; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\elog.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\elog.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\elog.crf ..\..\BSP\easylogger\src\elog.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  elog_output_unlock PROC
;;;381     */
;;;382    void elog_output_unlock(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;383        if (elog.output_lock_enabled) {
000002  4cf8              LDR      r4,|L1.996|
000004  2500              MOVS     r5,#0
000006  f89400f2          LDRB     r0,[r4,#0xf2]  ; elog
00000a  b120              CBZ      r0,|L1.22|
;;;384            elog_port_output_unlock();
00000c  f7fffffe          BL       elog_port_output_unlock
;;;385            elog.output_is_locked_before_disable = false;
000010  f88450f4          STRB     r5,[r4,#0xf4]
;;;386        } else {
;;;387            elog.output_is_locked_before_enable = false;
;;;388        }
;;;389    }
000014  bd70              POP      {r4-r6,pc}
                  |L1.22|
000016  f88450f3          STRB     r5,[r4,#0xf3]         ;387
00001a  bd70              POP      {r4-r6,pc}
;;;390    
                          ENDP

                  get_fmt_enabled PROC
;;;729     */
;;;730    static bool get_fmt_enabled(uint8_t level, size_t set) {
00001c  b530              PUSH     {r4,r5,lr}
00001e  b085              SUB      sp,sp,#0x14
000020  460d              MOV      r5,r1
000022  4604              MOV      r4,r0
;;;731        ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
000024  2805              CMP      r0,#5
000026  d907              BLS      |L1.56|
000028  48ef              LDR      r0,|L1.1000|
00002a  f24022db          MOV      r2,#0x2db
00002e  6803              LDR      r3,[r0,#0]  ; elog_assert_hook
000030  b163              CBZ      r3,|L1.76|
000032  49ee              LDR      r1,|L1.1004|
000034  a0ee              ADR      r0,|L1.1008|
000036  4798              BLX      r3
                  |L1.56|
;;;732    
;;;733        if (elog.enabled_fmt_set[level] & set) {
000038  48ea              LDR      r0,|L1.996|
00003a  eb000084          ADD      r0,r0,r4,LSL #2
00003e  f8d000d8          LDR      r0,[r0,#0xd8]
000042  4028              ANDS     r0,r0,r5
000044  d000              BEQ      |L1.72|
;;;734            return true;
000046  2001              MOVS     r0,#1
                  |L1.72|
;;;735        } else {
;;;736            return false;
;;;737        }
;;;738    }
000048  b005              ADD      sp,sp,#0x14
00004a  bd30              POP      {r4,r5,pc}
                  |L1.76|
00004c  48e7              LDR      r0,|L1.1004|
00004e  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;731
000052  9200              STR      r2,[sp,#0]            ;731
000054  a1e6              ADR      r1,|L1.1008|
000056  a3ed              ADR      r3,|L1.1036|
000058  e9cd3101          STRD     r3,r1,[sp,#4]         ;731
00005c  4603              MOV      r3,r0                 ;731
00005e  a2f4              ADR      r2,|L1.1072|
000060  a1fb              ADR      r1,|L1.1104|
000062  2000              MOVS     r0,#0                 ;731
000064  f7fffffe          BL       elog_output
                  |L1.104|
000068  e7fe              B        |L1.104|
;;;739    
                          ENDP

                  elog_output_lock PROC
;;;369     */
;;;370    void elog_output_lock(void) {
00006a  b570              PUSH     {r4-r6,lr}
;;;371        if (elog.output_lock_enabled) {
00006c  4cdd              LDR      r4,|L1.996|
;;;372            elog_port_output_lock();
;;;373            elog.output_is_locked_before_disable = true;
00006e  2501              MOVS     r5,#1
000070  f89400f2          LDRB     r0,[r4,#0xf2]         ;371  ; elog
000074  b120              CBZ      r0,|L1.128|
000076  f7fffffe          BL       elog_port_output_lock
00007a  f88450f4          STRB     r5,[r4,#0xf4]
;;;374        } else {
;;;375            elog.output_is_locked_before_enable = true;
;;;376        }
;;;377    }
00007e  bd70              POP      {r4-r6,pc}
                  |L1.128|
000080  f88450f3          STRB     r5,[r4,#0xf3]         ;375
000084  bd70              POP      {r4-r6,pc}
;;;378    
                          ENDP

                  elog_get_filter_tag_lvl PROC
;;;475     */
;;;476    uint8_t elog_get_filter_tag_lvl(const char *tag)
000086  b5f0              PUSH     {r4-r7,lr}
;;;477    {
000088  b085              SUB      sp,sp,#0x14
00008a  0007              MOVS     r7,r0
00008c  d108              BNE      |L1.160|
;;;478        ELOG_ASSERT(tag != ((void *)0));
00008e  48d6              LDR      r0,|L1.1000|
000090  f44f72ef          MOV      r2,#0x1de
000094  6803              LDR      r3,[r0,#0]  ; elog_assert_hook
000096  b1a3              CBZ      r3,|L1.194|
000098  49d4              LDR      r1,|L1.1004|
00009a  a0ef              ADR      r0,|L1.1112|
00009c  3924              SUBS     r1,r1,#0x24
00009e  4798              BLX      r3
                  |L1.160|
;;;479        uint8_t i = 0;
;;;480        uint8_t level = ELOG_FILTER_LVL_ALL;
;;;481    
;;;482        if (!elog.init_ok) {
0000a0  4ed0              LDR      r6,|L1.996|
0000a2  2400              MOVS     r4,#0                 ;479
0000a4  2505              MOVS     r5,#5                 ;480
0000a6  f89600f0          LDRB     r0,[r6,#0xf0]  ; elog
0000aa  2800              CMP      r0,#0
0000ac  d019              BEQ      |L1.226|
;;;483            return level;
;;;484        }
;;;485    
;;;486        elog_output_lock();
0000ae  f7fffffe          BL       elog_output_lock
                  |L1.178|
;;;487        /* find the tag in arr */
;;;488        for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
;;;489            if (elog.filter.tag_lvl[i].tag_use_flag == true &&
0000b2  eb041044          ADD      r0,r4,r4,LSL #5
0000b6  1981              ADDS     r1,r0,r6
0000b8  f8910051          LDRB     r0,[r1,#0x51]
0000bc  2801              CMP      r0,#1
0000be  d013              BEQ      |L1.232|
0000c0  e018              B        |L1.244|
                  |L1.194|
0000c2  48ca              LDR      r0,|L1.1004|
0000c4  a1e4              ADR      r1,|L1.1112|
0000c6  3824              SUBS     r0,r0,#0x24           ;478
0000c8  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;478
0000cc  9200              STR      r2,[sp,#0]            ;478
0000ce  a3cf              ADR      r3,|L1.1036|
0000d0  e9cd3101          STRD     r3,r1,[sp,#4]         ;478
0000d4  4603              MOV      r3,r0                 ;478
0000d6  a2d6              ADR      r2,|L1.1072|
0000d8  a1dd              ADR      r1,|L1.1104|
0000da  2000              MOVS     r0,#0                 ;478
0000dc  f7fffffe          BL       elog_output
                  |L1.224|
0000e0  e7fe              B        |L1.224|
                  |L1.226|
;;;490                !strncmp(tag, elog.filter.tag_lvl[i].tag,ELOG_FILTER_TAG_MAX_LEN)){
;;;491                level = elog.filter.tag_lvl[i].level;
;;;492                break;
;;;493            }
;;;494        }
;;;495        elog_output_unlock();
;;;496    
;;;497        return level;
;;;498    }
0000e2  b005              ADD      sp,sp,#0x14
0000e4  4628              MOV      r0,r5                 ;483
0000e6  bdf0              POP      {r4-r7,pc}
                  |L1.232|
0000e8  221e              MOVS     r2,#0x1e              ;490
0000ea  4638              MOV      r0,r7                 ;490
0000ec  3132              ADDS     r1,r1,#0x32           ;490
0000ee  f7fffffe          BL       strncmp
0000f2  b130              CBZ      r0,|L1.258|
                  |L1.244|
0000f4  1c64              ADDS     r4,r4,#1              ;490
0000f6  b2e4              UXTB     r4,r4                 ;488
0000f8  2c05              CMP      r4,#5                 ;488
0000fa  d3da              BCC      |L1.178|
                  |L1.252|
0000fc  f7fffffe          BL       elog_output_unlock
000100  e7ef              B        |L1.226|
                  |L1.258|
000102  eb041044          ADD      r0,r4,r4,LSL #5       ;491
000106  4430              ADD      r0,r0,r6              ;491
000108  f8905031          LDRB     r5,[r0,#0x31]         ;491
00010c  e7f6              B        |L1.252|
;;;499    
                          ENDP

                  elog_output PROC
;;;559     */
;;;560    void elog_output(uint8_t level, const char *tag, const char *file, const char *func,
00010e  b40f              PUSH     {r0-r3}
;;;561            const long line, const char *format, ...) {
000110  e92d4ff0          PUSH     {r4-r11,lr}
000114  4605              MOV      r5,r0
000116  b08b              SUB      sp,sp,#0x2c
000118  468b              MOV      r11,r1
;;;562        extern const char *elog_port_get_time(void);
;;;563        extern const char *elog_port_get_p_info(void);
;;;564        extern const char *elog_port_get_t_info(void);
;;;565    
;;;566        size_t tag_len = strlen(tag), log_len = 0, newline_len = strlen(ELOG_NEWLINE_SIGN);
00011a  4608              MOV      r0,r1
00011c  f7fffffe          BL       strlen
000120  2400              MOVS     r4,#0
;;;567        char line_num[ELOG_LINE_NUM_MAX_LEN + 1] = { 0 };
;;;568        char tag_sapce[ELOG_FILTER_TAG_MAX_LEN / 2 + 1] = { 0 };
000122  940a              STR      r4,[sp,#0x28]
000124  4607              MOV      r7,r0                 ;566
000126  46a1              MOV      r9,r4                 ;567
000128  9409              STR      r4,[sp,#0x24]         ;567
00012a  9405              STR      r4,[sp,#0x14]
00012c  9406              STR      r4,[sp,#0x18]
00012e  9407              STR      r4,[sp,#0x1c]
;;;569        va_list args;
;;;570        int fmt_result;
;;;571    
;;;572        ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
000130  9408              STR      r4,[sp,#0x20]
000132  2d05              CMP      r5,#5
000134  d909              BLS      |L1.330|
000136  48ac              LDR      r0,|L1.1000|
000138  f44f720f          MOV      r2,#0x23c
00013c  6803              LDR      r3,[r0,#0]  ; elog_assert_hook
00013e  2b00              CMP      r3,#0
000140  d07e              BEQ      |L1.576|
000142  49aa              LDR      r1,|L1.1004|
000144  a0aa              ADR      r0,|L1.1008|
000146  390c              SUBS     r1,r1,#0xc
000148  4798              BLX      r3
                  |L1.330|
;;;573    
;;;574        /* check output enabled */
;;;575        if (!elog.output_enabled) {
00014a  4ea6              LDR      r6,|L1.996|
00014c  f89600f1          LDRB     r0,[r6,#0xf1]  ; elog
000150  2800              CMP      r0,#0
000152  d076              BEQ      |L1.578|
;;;576            return;
;;;577        }
;;;578        /* level filter */
;;;579        if (level > elog.filter.level || level > elog_get_filter_tag_lvl(tag)) {
000154  7830              LDRB     r0,[r6,#0]  ; elog
000156  42a8              CMP      r0,r5
000158  d373              BCC      |L1.578|
00015a  4658              MOV      r0,r11
00015c  f7fffffe          BL       elog_get_filter_tag_lvl
000160  42a8              CMP      r0,r5
000162  d36e              BCC      |L1.578|
;;;580            return;
;;;581        } else if (!strstr(tag, elog.filter.tag)) { /* tag filter */
000164  1c71              ADDS     r1,r6,#1
000166  4658              MOV      r0,r11
000168  f7fffffe          BL       strstr
00016c  2800              CMP      r0,#0
00016e  d068              BEQ      |L1.578|
;;;582            return;
;;;583        }
;;;584        /* args point to the first variable parameter */
;;;585        va_start(args, format);
000170  f10d0a68          ADD      r10,sp,#0x68
;;;586        /* lock output */
;;;587        elog_output_lock();
000174  f7fffffe          BL       elog_output_lock
;;;588    
;;;589    #ifdef ELOG_COLOR_ENABLE
;;;590        /* add CSI start sign and color info */
;;;591        if (elog.text_color_enabled) {
000178  46b0              MOV      r8,r6
00017a  f89600f5          LDRB     r0,[r6,#0xf5]  ; elog
;;;592            log_len += elog_strcpy(log_len, log_buf + log_len, CSI_START);
00017e  f5a67680          SUB      r6,r6,#0x100
000182  b170              CBZ      r0,|L1.418|
000184  4631              MOV      r1,r6
000186  a2b9              ADR      r2,|L1.1132|
000188  4620              MOV      r0,r4
00018a  f7fffffe          BL       elog_strcpy
00018e  4604              MOV      r4,r0
;;;593            log_len += elog_strcpy(log_len, log_buf + log_len, color_output_info[level]);
000190  4895              LDR      r0,|L1.1000|
000192  1931              ADDS     r1,r6,r4
000194  301c              ADDS     r0,r0,#0x1c
000196  f8502025          LDR      r2,[r0,r5,LSL #2]
00019a  4620              MOV      r0,r4
00019c  f7fffffe          BL       elog_strcpy
0001a0  4404              ADD      r4,r4,r0
                  |L1.418|
;;;594        }
;;;595    #endif
;;;596    
;;;597        /* package level info */
;;;598        if (get_fmt_enabled(level, ELOG_FMT_LVL)) {
0001a2  2101              MOVS     r1,#1
0001a4  4628              MOV      r0,r5
0001a6  f7fffffe          BL       get_fmt_enabled
0001aa  b140              CBZ      r0,|L1.446|
;;;599            log_len += elog_strcpy(log_len, log_buf + log_len, level_output_info[level]);
0001ac  488e              LDR      r0,|L1.1000|
0001ae  1931              ADDS     r1,r6,r4
0001b0  1d00              ADDS     r0,r0,#4
0001b2  f8502025          LDR      r2,[r0,r5,LSL #2]
0001b6  4620              MOV      r0,r4
0001b8  f7fffffe          BL       elog_strcpy
0001bc  4404              ADD      r4,r4,r0
                  |L1.446|
;;;600        }
;;;601        /* package tag info */
;;;602        if (get_fmt_enabled(level, ELOG_FMT_TAG)) {
0001be  2102              MOVS     r1,#2
0001c0  4628              MOV      r0,r5
0001c2  f7fffffe          BL       get_fmt_enabled
0001c6  b1c8              CBZ      r0,|L1.508|
;;;603            log_len += elog_strcpy(log_len, log_buf + log_len, tag);
0001c8  1931              ADDS     r1,r6,r4
0001ca  465a              MOV      r2,r11
0001cc  4620              MOV      r0,r4
0001ce  f7fffffe          BL       elog_strcpy
0001d2  4404              ADD      r4,r4,r0
;;;604            /* if the tag length is less than 50% ELOG_FILTER_TAG_MAX_LEN, then fill space */
;;;605            if (tag_len <= ELOG_FILTER_TAG_MAX_LEN / 2) {
0001d4  2f0f              CMP      r7,#0xf
0001d6  d80b              BHI      |L1.496|
;;;606                memset(tag_sapce, ' ', ELOG_FILTER_TAG_MAX_LEN / 2 - tag_len);
0001d8  f1c7010f          RSB      r1,r7,#0xf
0001dc  2220              MOVS     r2,#0x20
0001de  a805              ADD      r0,sp,#0x14
0001e0  f7fffffe          BL       __aeabi_memset
;;;607                log_len += elog_strcpy(log_len, log_buf + log_len, tag_sapce);
0001e4  1931              ADDS     r1,r6,r4
0001e6  aa05              ADD      r2,sp,#0x14
0001e8  4620              MOV      r0,r4
0001ea  f7fffffe          BL       elog_strcpy
0001ee  4404              ADD      r4,r4,r0
                  |L1.496|
;;;608            }
;;;609            log_len += elog_strcpy(log_len, log_buf + log_len, " ");
0001f0  1931              ADDS     r1,r6,r4
0001f2  a29f              ADR      r2,|L1.1136|
0001f4  4620              MOV      r0,r4
0001f6  f7fffffe          BL       elog_strcpy
0001fa  4404              ADD      r4,r4,r0
                  |L1.508|
;;;610        }
;;;611        /* package time, process and thread info */
;;;612        if (get_fmt_enabled(level, ELOG_FMT_TIME | ELOG_FMT_P_INFO | ELOG_FMT_T_INFO)) {
0001fc  211c              MOVS     r1,#0x1c
0001fe  4628              MOV      r0,r5
000200  f7fffffe          BL       get_fmt_enabled
000204  2800              CMP      r0,#0
000206  d04b              BEQ      |L1.672|
;;;613            log_len += elog_strcpy(log_len, log_buf + log_len, "[");
000208  1931              ADDS     r1,r6,r4
00020a  a29a              ADR      r2,|L1.1140|
00020c  4620              MOV      r0,r4
00020e  f7fffffe          BL       elog_strcpy
000212  4404              ADD      r4,r4,r0
;;;614            /* package time info */
;;;615            if (get_fmt_enabled(level, ELOG_FMT_TIME)) {
000214  2104              MOVS     r1,#4
000216  4628              MOV      r0,r5
000218  f7fffffe          BL       get_fmt_enabled
00021c  b1a8              CBZ      r0,|L1.586|
;;;616                log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_time());
00021e  f7fffffe          BL       elog_port_get_time
000222  4602              MOV      r2,r0
000224  1931              ADDS     r1,r6,r4
000226  4620              MOV      r0,r4
000228  f7fffffe          BL       elog_strcpy
00022c  4404              ADD      r4,r4,r0
;;;617                if (get_fmt_enabled(level, ELOG_FMT_P_INFO | ELOG_FMT_T_INFO)) {
00022e  2118              MOVS     r1,#0x18
000230  4628              MOV      r0,r5
000232  f7fffffe          BL       get_fmt_enabled
000236  b140              CBZ      r0,|L1.586|
;;;618                    log_len += elog_strcpy(log_len, log_buf + log_len, " ");
000238  1931              ADDS     r1,r6,r4
00023a  a28d              ADR      r2,|L1.1136|
00023c  4620              MOV      r0,r4
00023e  e001              B        |L1.580|
                  |L1.576|
000240  e04e              B        |L1.736|
                  |L1.578|
000242  e0c9              B        |L1.984|
                  |L1.580|
000244  f7fffffe          BL       elog_strcpy
000248  4404              ADD      r4,r4,r0
                  |L1.586|
;;;619                }
;;;620            }
;;;621            /* package process info */
;;;622            if (get_fmt_enabled(level, ELOG_FMT_P_INFO)) {
00024a  2108              MOVS     r1,#8
00024c  4628              MOV      r0,r5
00024e  f7fffffe          BL       get_fmt_enabled
000252  b190              CBZ      r0,|L1.634|
;;;623                log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_p_info());
000254  f7fffffe          BL       elog_port_get_p_info
000258  4602              MOV      r2,r0
00025a  1931              ADDS     r1,r6,r4
00025c  4620              MOV      r0,r4
00025e  f7fffffe          BL       elog_strcpy
000262  4404              ADD      r4,r4,r0
;;;624                if (get_fmt_enabled(level, ELOG_FMT_T_INFO)) {
000264  2110              MOVS     r1,#0x10
000266  4628              MOV      r0,r5
000268  f7fffffe          BL       get_fmt_enabled
00026c  b128              CBZ      r0,|L1.634|
;;;625                    log_len += elog_strcpy(log_len, log_buf + log_len, " ");
00026e  1931              ADDS     r1,r6,r4
000270  a27f              ADR      r2,|L1.1136|
000272  4620              MOV      r0,r4
000274  f7fffffe          BL       elog_strcpy
000278  4404              ADD      r4,r4,r0
                  |L1.634|
;;;626                }
;;;627            }
;;;628            /* package thread info */
;;;629            if (get_fmt_enabled(level, ELOG_FMT_T_INFO)) {
00027a  2110              MOVS     r1,#0x10
00027c  4628              MOV      r0,r5
00027e  f7fffffe          BL       get_fmt_enabled
000282  b138              CBZ      r0,|L1.660|
;;;630                log_len += elog_strcpy(log_len, log_buf + log_len, elog_port_get_t_info());
000284  f7fffffe          BL       elog_port_get_t_info
000288  4602              MOV      r2,r0
00028a  1931              ADDS     r1,r6,r4
00028c  4620              MOV      r0,r4
00028e  f7fffffe          BL       elog_strcpy
000292  4404              ADD      r4,r4,r0
                  |L1.660|
;;;631            }
;;;632            log_len += elog_strcpy(log_len, log_buf + log_len, "] ");
000294  1931              ADDS     r1,r6,r4
000296  a278              ADR      r2,|L1.1144|
000298  4620              MOV      r0,r4
00029a  f7fffffe          BL       elog_strcpy
00029e  4404              ADD      r4,r4,r0
                  |L1.672|
;;;633        }
;;;634        /* package file directory and name, function name and line number info */
;;;635        if (get_fmt_enabled(level, ELOG_FMT_DIR | ELOG_FMT_FUNC | ELOG_FMT_LINE)) {
0002a0  21e0              MOVS     r1,#0xe0
0002a2  4628              MOV      r0,r5
0002a4  f7fffffe          BL       get_fmt_enabled
0002a8  2800              CMP      r0,#0
0002aa  d061              BEQ      |L1.880|
;;;636            log_len += elog_strcpy(log_len, log_buf + log_len, "(");
0002ac  1931              ADDS     r1,r6,r4
0002ae  a273              ADR      r2,|L1.1148|
0002b0  4620              MOV      r0,r4
0002b2  f7fffffe          BL       elog_strcpy
0002b6  4404              ADD      r4,r4,r0
;;;637            /* package file info */
;;;638            if (get_fmt_enabled(level, ELOG_FMT_DIR)) {
0002b8  2120              MOVS     r1,#0x20
0002ba  4628              MOV      r0,r5
0002bc  f7fffffe          BL       get_fmt_enabled
0002c0  2800              CMP      r0,#0
0002c2  d028              BEQ      |L1.790|
;;;639                log_len += elog_strcpy(log_len, log_buf + log_len, file);
0002c4  1931              ADDS     r1,r6,r4
0002c6  4620              MOV      r0,r4
0002c8  9a16              LDR      r2,[sp,#0x58]
0002ca  f7fffffe          BL       elog_strcpy
0002ce  4404              ADD      r4,r4,r0
;;;640                if (get_fmt_enabled(level, ELOG_FMT_FUNC)) {
0002d0  2140              MOVS     r1,#0x40
0002d2  4628              MOV      r0,r5
0002d4  f7fffffe          BL       get_fmt_enabled
0002d8  b190              CBZ      r0,|L1.768|
;;;641                    log_len += elog_strcpy(log_len, log_buf + log_len, ":");
0002da  1931              ADDS     r1,r6,r4
0002dc  a268              ADR      r2,|L1.1152|
0002de  e016              B        |L1.782|
                  |L1.736|
0002e0  4842              LDR      r0,|L1.1004|
0002e2  a143              ADR      r1,|L1.1008|
0002e4  380c              SUBS     r0,r0,#0xc            ;572
0002e6  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;572
0002ea  9200              STR      r2,[sp,#0]            ;572
0002ec  a347              ADR      r3,|L1.1036|
0002ee  e9cd3101          STRD     r3,r1,[sp,#4]         ;572
0002f2  4603              MOV      r3,r0                 ;572
0002f4  a24e              ADR      r2,|L1.1072|
0002f6  a156              ADR      r1,|L1.1104|
0002f8  2000              MOVS     r0,#0                 ;572
0002fa  f7fffffe          BL       elog_output
                  |L1.766|
0002fe  e7fe              B        |L1.766|
                  |L1.768|
;;;642                } else if (get_fmt_enabled(level, ELOG_FMT_LINE)) {
000300  2180              MOVS     r1,#0x80
000302  4628              MOV      r0,r5
000304  f7fffffe          BL       get_fmt_enabled
000308  b128              CBZ      r0,|L1.790|
;;;643                    log_len += elog_strcpy(log_len, log_buf + log_len, " ");
00030a  1931              ADDS     r1,r6,r4
00030c  a258              ADR      r2,|L1.1136|
                  |L1.782|
00030e  4620              MOV      r0,r4
000310  f7fffffe          BL       elog_strcpy
000314  4404              ADD      r4,r4,r0
                  |L1.790|
;;;644                }
;;;645            }
;;;646            /* package line info */
;;;647            if (get_fmt_enabled(level, ELOG_FMT_LINE)) {
000316  2180              MOVS     r1,#0x80
000318  4628              MOV      r0,r5
00031a  f7fffffe          BL       get_fmt_enabled
00031e  b1b0              CBZ      r0,|L1.846|
;;;648                snprintf(line_num, ELOG_LINE_NUM_MAX_LEN, "%ld", line);
000320  a258              ADR      r2,|L1.1156|
000322  2105              MOVS     r1,#5
000324  a809              ADD      r0,sp,#0x24
000326  9b18              LDR      r3,[sp,#0x60]
000328  f7fffffe          BL       __2snprintf
;;;649                log_len += elog_strcpy(log_len, log_buf + log_len, line_num);
00032c  1931              ADDS     r1,r6,r4
00032e  aa09              ADD      r2,sp,#0x24
000330  4620              MOV      r0,r4
000332  f7fffffe          BL       elog_strcpy
000336  4404              ADD      r4,r4,r0
;;;650                if (get_fmt_enabled(level, ELOG_FMT_FUNC)) {
000338  2140              MOVS     r1,#0x40
00033a  4628              MOV      r0,r5
00033c  f7fffffe          BL       get_fmt_enabled
000340  b128              CBZ      r0,|L1.846|
;;;651                    log_len += elog_strcpy(log_len, log_buf + log_len, " ");
000342  1931              ADDS     r1,r6,r4
000344  a24a              ADR      r2,|L1.1136|
000346  4620              MOV      r0,r4
000348  f7fffffe          BL       elog_strcpy
00034c  4404              ADD      r4,r4,r0
                  |L1.846|
;;;652                }
;;;653            }
;;;654            /* package func info */
;;;655            if (get_fmt_enabled(level, ELOG_FMT_FUNC)) {
00034e  2140              MOVS     r1,#0x40
000350  4628              MOV      r0,r5
000352  f7fffffe          BL       get_fmt_enabled
000356  b128              CBZ      r0,|L1.868|
;;;656                log_len += elog_strcpy(log_len, log_buf + log_len, func);
000358  1931              ADDS     r1,r6,r4
00035a  4620              MOV      r0,r4
00035c  9a17              LDR      r2,[sp,#0x5c]
00035e  f7fffffe          BL       elog_strcpy
000362  4404              ADD      r4,r4,r0
                  |L1.868|
;;;657                
;;;658            }
;;;659            log_len += elog_strcpy(log_len, log_buf + log_len, ")");
000364  1931              ADDS     r1,r6,r4
000366  a248              ADR      r2,|L1.1160|
000368  4620              MOV      r0,r4
00036a  f7fffffe          BL       elog_strcpy
00036e  4404              ADD      r4,r4,r0
                  |L1.880|
;;;660        }
;;;661        /* package other log data to buffer. '\0' must be added in the end by vsnprintf. */
;;;662        fmt_result = vsnprintf(log_buf + log_len, ELOG_LINE_BUF_SIZE - log_len, format, args);
000370  f5c47180          RSB      r1,r4,#0x100
000374  1930              ADDS     r0,r6,r4
000376  4653              MOV      r3,r10
000378  9a19              LDR      r2,[sp,#0x64]
00037a  f7fffffe          BL       vsnprintf
;;;663    
;;;664        va_end(args);
;;;665        /* calculate log length */
;;;666        if ((log_len + fmt_result <= ELOG_LINE_BUF_SIZE) && (fmt_result > -1)) {
00037e  4404              ADD      r4,r4,r0
000380  f44f7180          MOV      r1,#0x100
000384  428c              CMP      r4,r1
000386  d801              BHI      |L1.908|
000388  2800              CMP      r0,#0
00038a  da00              BGE      |L1.910|
                  |L1.908|
;;;667            log_len += fmt_result;
;;;668        } else {
;;;669            /* using max length */
;;;670            log_len = ELOG_LINE_BUF_SIZE;
00038c  460c              MOV      r4,r1
                  |L1.910|
;;;671        }
;;;672        /* overflow check and reserve some space for CSI end sign and newline sign */
;;;673    #ifdef ELOG_COLOR_ENABLE
;;;674        if (log_len + (sizeof(CSI_END) - 1) + newline_len > ELOG_LINE_BUF_SIZE) {
00038e  1da0              ADDS     r0,r4,#6
000390  4288              CMP      r0,r1
000392  d900              BLS      |L1.918|
;;;675            /* using max length */
;;;676            log_len = ELOG_LINE_BUF_SIZE;
;;;677            /* reserve some space for CSI end sign */
;;;678            log_len -= (sizeof(CSI_END) - 1);
;;;679    #else
;;;680        if (log_len + newline_len > ELOG_LINE_BUF_SIZE) {
;;;681            /* using max length */
;;;682            log_len = ELOG_LINE_BUF_SIZE;
;;;683    #endif /* ELOG_COLOR_ENABLE */
;;;684            /* reserve some space for newline sign */
;;;685            log_len -= newline_len;
000394  24fa              MOVS     r4,#0xfa
                  |L1.918|
;;;686        }
;;;687        /* keyword filter */
;;;688        if (elog.filter.keyword[0] != '\0') {
000396  f8980020          LDRB     r0,[r8,#0x20]  ; elog
00039a  4645              MOV      r5,r8
00039c  b140              CBZ      r0,|L1.944|
;;;689            /* add string end sign */
;;;690            log_buf[log_len] = '\0';
;;;691            /* find the keyword */
;;;692            if (!strstr(log_buf, elog.filter.keyword)) {
00039e  4911              LDR      r1,|L1.996|
0003a0  f8069004          STRB     r9,[r6,r4]            ;690
0003a4  3120              ADDS     r1,r1,#0x20
0003a6  f5a17090          SUB      r0,r1,#0x120
0003aa  f7fffffe          BL       strstr
0003ae  b188              CBZ      r0,|L1.980|
                  |L1.944|
;;;693                /* unlock output */
;;;694                elog_output_unlock();
;;;695                return;
;;;696            }
;;;697        }
;;;698    
;;;699    #ifdef ELOG_COLOR_ENABLE
;;;700        /* add CSI end sign */
;;;701        if (elog.text_color_enabled) {
0003b0  f89500f5          LDRB     r0,[r5,#0xf5]  ; elog
0003b4  b128              CBZ      r0,|L1.962|
;;;702            log_len += elog_strcpy(log_len, log_buf + log_len, CSI_END);
0003b6  1931              ADDS     r1,r6,r4
0003b8  a234              ADR      r2,|L1.1164|
0003ba  4620              MOV      r0,r4
0003bc  f7fffffe          BL       elog_strcpy
0003c0  4404              ADD      r4,r4,r0
                  |L1.962|
;;;703        }
;;;704    #endif
;;;705    
;;;706        /* package newline sign */
;;;707        log_len += elog_strcpy(log_len, log_buf + log_len, ELOG_NEWLINE_SIGN);
0003c2  1931              ADDS     r1,r6,r4
0003c4  a233              ADR      r2,|L1.1172|
0003c6  4620              MOV      r0,r4
0003c8  f7fffffe          BL       elog_strcpy
0003cc  1901              ADDS     r1,r0,r4
;;;708        /* output log */
;;;709    #if defined(ELOG_ASYNC_OUTPUT_ENABLE)
;;;710        extern void elog_async_output(uint8_t level, const char *log, size_t size);
;;;711        elog_async_output(level, log_buf, log_len);
;;;712    #elif defined(ELOG_BUF_OUTPUT_ENABLE)
;;;713        extern void elog_buf_output(const char *log, size_t size);
;;;714        elog_buf_output(log_buf, log_len);
;;;715    #else
;;;716        elog_port_output(log_buf, log_len);
0003ce  4832              LDR      r0,|L1.1176|
0003d0  f7fffffe          BL       elog_port_output
                  |L1.980|
0003d4  f7fffffe          BL       elog_output_unlock
                  |L1.984|
;;;717    #endif
;;;718        /* unlock output */
;;;719        elog_output_unlock();
;;;720    }
0003d8  b00b              ADD      sp,sp,#0x2c
0003da  e8bd0ff0          POP      {r4-r11}
0003de  f85dfb14          LDR      pc,[sp],#0x14
0003e2  0000              DCW      0x0000
                  |L1.996|
                          DCD      ||.bss||+0x100
                  |L1.1000|
                          DCD      ||.data||
                  |L1.1004|
                          DCD      ||.constdata||+0xb6
                  |L1.1008|
0003f0  6c657665          DCB      "level <= ELOG_LVL_VERBOSE",0
0003f4  6c203c3d
0003f8  20454c4f
0003fc  475f4c56
000400  4c5f5645
000404  52424f53
000408  4500    
00040a  00                DCB      0
00040b  00                DCB      0
                  |L1.1036|
00040c  28257329          DCB      "(%s) has assert failed at %s:%ld.",0
000410  20686173
000414  20617373
000418  65727420
00041c  6661696c
000420  65642061
000424  74202573
000428  3a256c64
00042c  2e00    
00042e  00                DCB      0
00042f  00                DCB      0
                  |L1.1072|
000430  2e2e5c2e          DCB      "..\\..\\BSP\\easylogger\\src\\elog.c",0
000434  2e5c4253
000438  505c6561
00043c  73796c6f
000440  67676572
000444  5c737263
000448  5c656c6f
00044c  672e6300
                  |L1.1104|
000450  656c6f67          DCB      "elog",0
000454  00      
000455  00                DCB      0
000456  00                DCB      0
000457  00                DCB      0
                  |L1.1112|
000458  74616720          DCB      "tag != ((void *)0)",0
00045c  213d2028
000460  28766f69
000464  64202a29
000468  302900  
00046b  00                DCB      0
                  |L1.1132|
00046c  1b5b00            DCB      27,"[",0
00046f  00                DCB      0
                  |L1.1136|
000470  2000              DCB      " ",0
000472  00                DCB      0
000473  00                DCB      0
                  |L1.1140|
000474  5b00              DCB      "[",0
000476  00                DCB      0
000477  00                DCB      0
                  |L1.1144|
000478  5d2000            DCB      "] ",0
00047b  00                DCB      0
                  |L1.1148|
00047c  2800              DCB      "(",0
00047e  00                DCB      0
00047f  00                DCB      0
                  |L1.1152|
000480  3a00              DCB      ":",0
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  256c6400          DCB      "%ld",0
                  |L1.1160|
000488  2900              DCB      ")",0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L1.1164|
00048c  1b5b306d          DCB      27,"[0m",0
000490  00      
000491  00                DCB      0
000492  00                DCB      0
000493  00                DCB      0
                  |L1.1172|
000494  0d0a00            DCB      "\r\n",0
000497  00                DCB      0
                  |L1.1176|
                          DCD      ||.bss||
                          ENDP

                  elog_set_filter_lvl PROC
;;;342     */
;;;343    void elog_set_filter_lvl(uint8_t level) {
00049c  b510              PUSH     {r4,lr}
00049e  b086              SUB      sp,sp,#0x18
0004a0  4604              MOV      r4,r0
;;;344        ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
0004a2  2805              CMP      r0,#5
0004a4  d908              BLS      |L1.1208|
0004a6  48fe              LDR      r0,|L1.2208|
0004a8  f44f72ac          MOV      r2,#0x158
0004ac  6803              LDR      r3,[r0,#0]  ; elog_assert_hook
0004ae  b13b              CBZ      r3,|L1.1216|
0004b0  49fc              LDR      r1,|L1.2212|
0004b2  f2af00c4          ADR      r0,|L1.1008|
0004b6  4798              BLX      r3
                  |L1.1208|
;;;345    
;;;346        elog.filter.level = level;
0004b8  48fb              LDR      r0,|L1.2216|
0004ba  7004              STRB     r4,[r0,#0]
;;;347    }
0004bc  b006              ADD      sp,sp,#0x18
0004be  bd10              POP      {r4,pc}
                  |L1.1216|
0004c0  48f8              LDR      r0,|L1.2212|
0004c2  f2af01d4          ADR      r1,|L1.1008|
0004c6  f2af03bc          ADR      r3,|L1.1036|
0004ca  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;344
0004ce  9200              STR      r2,[sp,#0]            ;344
0004d0  e9cd3101          STRD     r3,r1,[sp,#4]         ;344
0004d4  4603              MOV      r3,r0                 ;344
0004d6  f2af02a8          ADR      r2,|L1.1072|
0004da  f2af018c          ADR      r1,|L1.1104|
0004de  2000              MOVS     r0,#0                 ;344
0004e0  f7fffffe          BL       elog_output
                  |L1.1252|
0004e4  e7fe              B        |L1.1252|
;;;348    
                          ENDP

                  elog_set_text_color_enabled PROC
;;;285     */
;;;286    void elog_set_text_color_enabled(bool enabled) {
0004e6  49f0              LDR      r1,|L1.2216|
;;;287        ELOG_ASSERT((enabled == false) || (enabled == true));
;;;288    
;;;289        elog.text_color_enabled = enabled;
0004e8  f88100f5          STRB     r0,[r1,#0xf5]
;;;290    }
0004ec  4770              BX       lr
;;;291    
                          ENDP

                  elog_output_lock_enabled PROC
;;;745     */
;;;746    void elog_output_lock_enabled(bool enabled) {
0004ee  49ee              LDR      r1,|L1.2216|
0004f0  2800              CMP      r0,#0
;;;747        elog.output_lock_enabled = enabled;
0004f2  f88100f2          STRB     r0,[r1,#0xf2]
0004f6  d00d              BEQ      |L1.1300|
0004f8  48eb              LDR      r0,|L1.2216|
;;;748        /* it will re-lock or re-unlock before output lock enable */
;;;749        if (elog.output_lock_enabled) {
;;;750            if (!elog.output_is_locked_before_disable && elog.output_is_locked_before_enable) {
0004fa  f89110f4          LDRB     r1,[r1,#0xf4]  ; elog
0004fe  f89000f3          LDRB     r0,[r0,#0xf3]
000502  b119              CBZ      r1,|L1.1292|
;;;751                /* the output lock is unlocked before disable, and the lock will unlocking after enable */
;;;752                elog_port_output_lock();
;;;753            } else if (elog.output_is_locked_before_disable && !elog.output_is_locked_before_enable) {
000504  2800              CMP      r0,#0
000506  d105              BNE      |L1.1300|
;;;754                /* the output lock is locked before disable, and the lock will locking after enable */
;;;755                elog_port_output_unlock();
000508  f7ffbffe          B.W      elog_port_output_unlock
                  |L1.1292|
00050c  2800              CMP      r0,#0                 ;750
00050e  d001              BEQ      |L1.1300|
000510  f7ffbffe          B.W      elog_port_output_lock
                  |L1.1300|
;;;756            }
;;;757        }
;;;758    }
000514  4770              BX       lr
;;;759    
                          ENDP

                  elog_init PROC
;;;157     */
;;;158    ElogErrCode elog_init(void) {
000516  e92d41f0          PUSH     {r4-r8,lr}
;;;159        extern ElogErrCode elog_port_init(void);
;;;160        extern ElogErrCode elog_async_init(void);
;;;161    
;;;162        ElogErrCode result = ELOG_NO_ERR;
;;;163    
;;;164        if (elog.init_ok == true) {
00051a  4fe3              LDR      r7,|L1.2216|
00051c  2000              MOVS     r0,#0                 ;162
00051e  f89710f0          LDRB     r1,[r7,#0xf0]  ; elog
000522  2901              CMP      r1,#1
000524  d027              BEQ      |L1.1398|
;;;165            return result;
;;;166        }
;;;167    
;;;168        /* port initialize */
;;;169        result = elog_port_init();
000526  f7fffffe          BL       elog_port_init
00052a  0006              MOVS     r6,r0
;;;170        if (result != ELOG_NO_ERR) {
00052c  d123              BNE      |L1.1398|
;;;171            return result;
;;;172        }
;;;173    
;;;174    #ifdef ELOG_ASYNC_OUTPUT_ENABLE
;;;175        result = elog_async_init();
;;;176        if (result != ELOG_NO_ERR) {
;;;177            return result;
;;;178        }
;;;179    #endif
;;;180    
;;;181        /* enable the output lock */
;;;182        elog_output_lock_enabled(true);
00052e  2001              MOVS     r0,#1
000530  f7fffffe          BL       elog_output_lock_enabled
;;;183        /* output locked status initialize */
;;;184        elog.output_is_locked_before_enable = false;
000534  2500              MOVS     r5,#0
000536  f88750f3          STRB     r5,[r7,#0xf3]
;;;185        elog.output_is_locked_before_disable = false;
00053a  f88750f4          STRB     r5,[r7,#0xf4]
;;;186    
;;;187    #ifdef ELOG_COLOR_ENABLE
;;;188        /* enable text color by default */
;;;189        elog_set_text_color_enabled(true);
00053e  2001              MOVS     r0,#1
000540  f88700f5          STRB     r0,[r7,#0xf5]
;;;190    #endif
;;;191    
;;;192        /* set level is ELOG_LVL_VERBOSE */
;;;193        elog_set_filter_lvl(ELOG_LVL_VERBOSE);
000544  2005              MOVS     r0,#5
000546  f7fffffe          BL       elog_set_filter_lvl
00054a  2400              MOVS     r4,#0
00054c  46a8              MOV      r8,r5
                  |L1.1358|
00054e  eb041044          ADD      r0,r4,r4,LSL #5
000552  19c5              ADDS     r5,r0,r7
000554  f1050032          ADD      r0,r5,#0x32
000558  211f              MOVS     r1,#0x1f
00055a  f7fffffe          BL       __aeabi_memclr
00055e  1c64              ADDS     r4,r4,#1
000560  f8858031          STRB     r8,[r5,#0x31]
000564  b2e4              UXTB     r4,r4
000566  f8858051          STRB     r8,[r5,#0x51]
00056a  2c05              CMP      r4,#5
00056c  d3ef              BCC      |L1.1358|
;;;194    
;;;195        /* set tag_level to default val */
;;;196        elog_set_filter_tag_lvl_default();
;;;197    
;;;198        elog.init_ok = true;
00056e  2001              MOVS     r0,#1
000570  f88700f0          STRB     r0,[r7,#0xf0]
;;;199    
;;;200        return result;
000574  4630              MOV      r0,r6
                  |L1.1398|
;;;201    }
000576  e8bd81f0          POP      {r4-r8,pc}
;;;202    
                          ENDP

                  elog_deinit PROC
;;;206     */
;;;207    void elog_deinit(void) {
00057a  b510              PUSH     {r4,lr}
;;;208        extern ElogErrCode elog_port_deinit(void);
;;;209        extern ElogErrCode elog_async_deinit(void);
;;;210    
;;;211        if (!elog.init_ok) {
00057c  4cca              LDR      r4,|L1.2216|
00057e  f89400f0          LDRB     r0,[r4,#0xf0]  ; elog
000582  2800              CMP      r0,#0                 ;207
000584  d004              BEQ      |L1.1424|
;;;212            return ;
;;;213        }
;;;214        
;;;215    #ifdef ELOG_ASYNC_OUTPUT_ENABLE
;;;216        elog_async_deinit();
;;;217    #endif
;;;218    
;;;219        /* port deinitialize */
;;;220        elog_port_deinit();
000586  f7fffffe          BL       elog_port_deinit
;;;221    
;;;222        elog.init_ok = false;
00058a  2000              MOVS     r0,#0
00058c  f88400f0          STRB     r0,[r4,#0xf0]
                  |L1.1424|
;;;223    }
000590  bd10              POP      {r4,pc}
;;;224    
                          ENDP

                  elog_set_output_enabled PROC
;;;273     */
;;;274    void elog_set_output_enabled(bool enabled) {
000592  49c5              LDR      r1,|L1.2216|
;;;275        ELOG_ASSERT((enabled == false) || (enabled == true));
;;;276    
;;;277        elog.output_enabled = enabled;
000594  f88100f1          STRB     r0,[r1,#0xf1]
;;;278    }
000598  4770              BX       lr
;;;279    
                          ENDP

                  elog_start PROC
;;;228     */
;;;229    void elog_start(void) {
00059a  b50e              PUSH     {r1-r3,lr}
;;;230        if (!elog.init_ok) {
00059c  49c2              LDR      r1,|L1.2216|
00059e  f89100f0          LDRB     r0,[r1,#0xf0]  ; elog
0005a2  2800              CMP      r0,#0                 ;229
0005a4  d010              BEQ      |L1.1480|
;;;231            return ;
;;;232        }
;;;233        
;;;234        /* enable output */
;;;235        elog_set_output_enabled(true);
0005a6  2001              MOVS     r0,#1
0005a8  f88100f1          STRB     r0,[r1,#0xf1]
;;;236    
;;;237    #if defined(ELOG_ASYNC_OUTPUT_ENABLE)
;;;238        elog_async_enabled(true);
;;;239    #elif defined(ELOG_BUF_OUTPUT_ENABLE)
;;;240        elog_buf_enabled(true);
;;;241    #endif
;;;242    
;;;243        /* show version */
;;;244        log_i("EasyLogger V%s is initialize success.", ELOG_SW_VERSION);
0005ac  20f4              MOVS     r0,#0xf4
0005ae  a2bf              ADR      r2,|L1.2220|
0005b0  a1c0              ADR      r1,|L1.2228|
0005b2  4bbc              LDR      r3,|L1.2212|
0005b4  e88d0007          STM      sp,{r0-r2}
0005b8  3b66              SUBS     r3,r3,#0x66
0005ba  f2af128c          ADR      r2,|L1.1072|
0005be  f2af1170          ADR      r1,|L1.1104|
0005c2  2003              MOVS     r0,#3
0005c4  f7fffffe          BL       elog_output
                  |L1.1480|
;;;245    }
0005c8  bd0e              POP      {r1-r3,pc}
;;;246    
                          ENDP

                  elog_stop PROC
;;;249     */
;;;250    void elog_stop(void) {
0005ca  b50e              PUSH     {r1-r3,lr}
;;;251        if (!elog.init_ok) {
0005cc  49b6              LDR      r1,|L1.2216|
0005ce  f89100f0          LDRB     r0,[r1,#0xf0]  ; elog
0005d2  2800              CMP      r0,#0                 ;250
0005d4  d011              BEQ      |L1.1530|
;;;252            return ;
;;;253        }
;;;254    
;;;255        /* disable output */
;;;256        elog_set_output_enabled(false);
0005d6  2000              MOVS     r0,#0
0005d8  f88100f1          STRB     r0,[r1,#0xf1]
;;;257    
;;;258    #if defined(ELOG_ASYNC_OUTPUT_ENABLE)
;;;259        elog_async_enabled(false);
;;;260    #elif defined(ELOG_BUF_OUTPUT_ENABLE)
;;;261        elog_buf_enabled(false);
;;;262    #endif
;;;263    
;;;264        /* show version */
;;;265        log_i("EasyLogger V%s is deinitialize success.", ELOG_SW_VERSION);
0005dc  a2b3              ADR      r2,|L1.2220|
0005de  a1bf              ADR      r1,|L1.2268|
0005e0  f2401009          MOV      r0,#0x109
0005e4  4baf              LDR      r3,|L1.2212|
0005e6  e88d0007          STM      sp,{r0-r2}
0005ea  3b5b              SUBS     r3,r3,#0x5b
0005ec  f2af12c0          ADR      r2,|L1.1072|
0005f0  f2af11a4          ADR      r1,|L1.1104|
0005f4  2003              MOVS     r0,#3
0005f6  f7fffffe          BL       elog_output
                  |L1.1530|
;;;266    }
0005fa  bd0e              POP      {r1-r3,pc}
;;;267    
                          ENDP

                  elog_get_text_color_enabled PROC
;;;296     */
;;;297    bool elog_get_text_color_enabled(void) {
0005fc  48aa              LDR      r0,|L1.2216|
;;;298        return elog.text_color_enabled;
0005fe  f89000f5          LDRB     r0,[r0,#0xf5]  ; elog
;;;299    }
000602  4770              BX       lr
;;;300    #endif /* ELOG_COLOR_ENABLE */
                          ENDP

                  elog_get_output_enabled PROC
;;;306     */
;;;307    bool elog_get_output_enabled(void) {
000604  48a8              LDR      r0,|L1.2216|
;;;308        return elog.output_enabled;
000606  f89000f1          LDRB     r0,[r0,#0xf1]  ; elog
;;;309    }
00060a  4770              BX       lr
;;;310    
                          ENDP

                  elog_set_fmt PROC
;;;316     */
;;;317    void elog_set_fmt(uint8_t level, size_t set) {
00060c  b530              PUSH     {r4,r5,lr}
00060e  b085              SUB      sp,sp,#0x14
000610  460d              MOV      r5,r1
000612  4604              MOV      r4,r0
;;;318        ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
000614  2805              CMP      r0,#5
000616  d909              BLS      |L1.1580|
000618  48a1              LDR      r0,|L1.2208|
00061a  f44f729f          MOV      r2,#0x13e
00061e  6803              LDR      r3,[r0,#0]  ; elog_assert_hook
000620  b153              CBZ      r3,|L1.1592|
000622  49a0              LDR      r1,|L1.2212|
000624  391d              SUBS     r1,r1,#0x1d
000626  f2af2038          ADR      r0,|L1.1008|
00062a  4798              BLX      r3
                  |L1.1580|
;;;319    
;;;320        elog.enabled_fmt_set[level] = set;
00062c  489e              LDR      r0,|L1.2216|
00062e  eb000084          ADD      r0,r0,r4,LSL #2
;;;321    }
000632  f8c050d8          STR      r5,[r0,#0xd8]
000636  e507              B        |L1.72|
                  |L1.1592|
000638  489a              LDR      r0,|L1.2212|
00063a  381d              SUBS     r0,r0,#0x1d           ;318
00063c  f2af2150          ADR      r1,|L1.1008|
000640  f2af2338          ADR      r3,|L1.1036|
000644  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;318
000648  9200              STR      r2,[sp,#0]            ;318
00064a  e9cd3101          STRD     r3,r1,[sp,#4]         ;318
00064e  4603              MOV      r3,r0                 ;318
000650  f2af2224          ADR      r2,|L1.1072|
000654  f2af2108          ADR      r1,|L1.1104|
000658  2000              MOVS     r0,#0                 ;318
00065a  f7fffffe          BL       elog_output
                  |L1.1630|
00065e  e7fe              B        |L1.1630|
;;;322    
                          ENDP

                  elog_set_filter_kw PROC
;;;362     */
;;;363    void elog_set_filter_kw(const char *keyword) {
000660  4601              MOV      r1,r0
;;;364        strncpy(elog.filter.keyword, keyword, ELOG_FILTER_KW_MAX_LEN);
000662  4891              LDR      r0,|L1.2216|
000664  2210              MOVS     r2,#0x10
000666  3020              ADDS     r0,r0,#0x20
000668  f7ffbffe          B.W      strncpy
;;;365    }
;;;366    
                          ENDP

                  elog_set_filter_tag PROC
;;;353     */
;;;354    void elog_set_filter_tag(const char *tag) {
00066c  4601              MOV      r1,r0
;;;355        strncpy(elog.filter.tag, tag, ELOG_FILTER_TAG_MAX_LEN);
00066e  488e              LDR      r0,|L1.2216|
000670  221e              MOVS     r2,#0x1e
000672  1c40              ADDS     r0,r0,#1
000674  f7ffbffe          B.W      strncpy
;;;356    }
;;;357    
                          ENDP

                  elog_set_filter PROC
;;;329     */
;;;330    void elog_set_filter(uint8_t level, const char *tag, const char *keyword) {
000678  b570              PUSH     {r4-r6,lr}
00067a  b086              SUB      sp,sp,#0x18
00067c  4615              MOV      r5,r2
00067e  460e              MOV      r6,r1
000680  4604              MOV      r4,r0
;;;331        ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
000682  2805              CMP      r0,#5
000684  d909              BLS      |L1.1690|
000686  4886              LDR      r0,|L1.2208|
000688  f240124b          MOV      r2,#0x14b
00068c  6803              LDR      r3,[r0,#0]  ; elog_assert_hook
00068e  b17b              CBZ      r3,|L1.1712|
000690  4984              LDR      r1,|L1.2212|
000692  3910              SUBS     r1,r1,#0x10
000694  f2af20a8          ADR      r0,|L1.1008|
000698  4798              BLX      r3
                  |L1.1690|
;;;332    
;;;333        elog_set_filter_lvl(level);
00069a  4620              MOV      r0,r4
00069c  f7fffffe          BL       elog_set_filter_lvl
;;;334        elog_set_filter_tag(tag);
0006a0  4630              MOV      r0,r6
0006a2  f7fffffe          BL       elog_set_filter_tag
;;;335        elog_set_filter_kw(keyword);
0006a6  b006              ADD      sp,sp,#0x18
0006a8  4628              MOV      r0,r5
0006aa  e8bd4070          POP      {r4-r6,lr}
0006ae  e7fe              B        elog_set_filter_kw
                  |L1.1712|
0006b0  487c              LDR      r0,|L1.2212|
0006b2  3810              SUBS     r0,r0,#0x10           ;331
0006b4  f2af21c8          ADR      r1,|L1.1008|
0006b8  f2af23b0          ADR      r3,|L1.1036|
0006bc  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;331
0006c0  9200              STR      r2,[sp,#0]            ;331
0006c2  e9cd3101          STRD     r3,r1,[sp,#4]         ;331
0006c6  4603              MOV      r3,r0                 ;331
0006c8  f2af229c          ADR      r2,|L1.1072|
0006cc  f2af2180          ADR      r1,|L1.1104|
0006d0  2000              MOVS     r0,#0                 ;331
0006d2  f7fffffe          BL       elog_output
                  |L1.1750|
0006d6  e7fe              B        |L1.1750|
;;;336    }
;;;337    
                          ENDP

                  elog_set_filter_tag_lvl PROC
;;;422     */
;;;423    void elog_set_filter_tag_lvl(const char *tag, uint8_t level)
0006d8  e92d41f0          PUSH     {r4-r8,lr}
;;;424    {
;;;425        ELOG_ASSERT(level <= ELOG_LVL_VERBOSE);
0006dc  4c71              LDR      r4,|L1.2212|
0006de  4e70              LDR      r6,|L1.2208|
0006e0  3414              ADDS     r4,r4,#0x14
0006e2  b086              SUB      sp,sp,#0x18           ;424
0006e4  460d              MOV      r5,r1                 ;424
0006e6  4680              MOV      r8,r0                 ;424
0006e8  2905              CMP      r1,#5
0006ea  d907              BLS      |L1.1788|
0006ec  6833              LDR      r3,[r6,#0]  ; elog_assert_hook
0006ee  f24012a9          MOV      r2,#0x1a9
0006f2  b13b              CBZ      r3,|L1.1796|
0006f4  4621              MOV      r1,r4
0006f6  f2af3008          ADR      r0,|L1.1008|
0006fa  4798              BLX      r3
                  |L1.1788|
;;;426        ELOG_ASSERT(tag != ((void *)0));
0006fc  f1b80f00          CMP      r8,#0
000700  d013              BEQ      |L1.1834|
000702  e01b              B        |L1.1852|
                  |L1.1796|
000704  f2af3018          ADR      r0,|L1.1008|
000708  f2af3100          ADR      r1,|L1.1036|
00070c  9002              STR      r0,[sp,#8]            ;425
00070e  e9cd4203          STRD     r4,r2,[sp,#0xc]       ;425
000712  4b64              LDR      r3,|L1.2212|
000714  e9cd2100          STRD     r2,r1,[sp,#0]         ;425
000718  3314              ADDS     r3,r3,#0x14           ;425
00071a  f2af22ec          ADR      r2,|L1.1072|
00071e  f2af21d0          ADR      r1,|L1.1104|
000722  2000              MOVS     r0,#0                 ;425
000724  f7fffffe          BL       elog_output
                  |L1.1832|
000728  e7fe              B        |L1.1832|
                  |L1.1834|
00072a  6833              LDR      r3,[r6,#0]  ; elog_assert_hook
00072c  f44f72d5          MOV      r2,#0x1aa
000730  b1a3              CBZ      r3,|L1.1884|
000732  495c              LDR      r1,|L1.2212|
000734  3114              ADDS     r1,r1,#0x14
000736  f2af20e0          ADR      r0,|L1.1112|
00073a  4798              BLX      r3
                  |L1.1852|
;;;427        uint8_t i = 0;
;;;428    
;;;429        if (!elog.init_ok) {
00073c  4e5a              LDR      r6,|L1.2216|
00073e  2400              MOVS     r4,#0                 ;427
000740  f89600f0          LDRB     r0,[r6,#0xf0]  ; elog
000744  2800              CMP      r0,#0
000746  d060              BEQ      |L1.2058|
;;;430            return;
;;;431        }
;;;432    
;;;433        elog_output_lock();
000748  f7fffffe          BL       elog_output_lock
                  |L1.1868|
;;;434        /* find the tag in arr */
;;;435        for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
;;;436            if (elog.filter.tag_lvl[i].tag_use_flag == true &&
00074c  eb041044          ADD      r0,r4,r4,LSL #5
000750  1987              ADDS     r7,r0,r6
000752  f8970051          LDRB     r0,[r7,#0x51]
000756  2801              CMP      r0,#1
000758  d013              BEQ      |L1.1922|
00075a  e019              B        |L1.1936|
                  |L1.1884|
00075c  f2af3008          ADR      r0,|L1.1112|
000760  f2af3158          ADR      r1,|L1.1036|
000764  9002              STR      r0,[sp,#8]            ;426
000766  e9cd4203          STRD     r4,r2,[sp,#0xc]       ;426
00076a  4b4e              LDR      r3,|L1.2212|
00076c  e9cd2100          STRD     r2,r1,[sp,#0]         ;426
000770  3314              ADDS     r3,r3,#0x14           ;426
000772  f2af3244          ADR      r2,|L1.1072|
000776  f2af3128          ADR      r1,|L1.1104|
00077a  2000              MOVS     r0,#0                 ;426
00077c  f7fffffe          BL       elog_output
                  |L1.1920|
000780  e7fe              B        |L1.1920|
                  |L1.1922|
;;;437                !strncmp(tag, elog.filter.tag_lvl[i].tag,ELOG_FILTER_TAG_MAX_LEN)){
000782  f1070132          ADD      r1,r7,#0x32
000786  221e              MOVS     r2,#0x1e
000788  4640              MOV      r0,r8
00078a  f7fffffe          BL       strncmp
00078e  b120              CBZ      r0,|L1.1946|
                  |L1.1936|
000790  1c64              ADDS     r4,r4,#1
000792  b2e4              UXTB     r4,r4                 ;435
000794  2c05              CMP      r4,#5                 ;435
000796  d3d9              BCC      |L1.1868|
000798  e017              B        |L1.1994|
                  |L1.1946|
;;;438                break;
;;;439            }
;;;440        }
;;;441    
;;;442        if (i < ELOG_FILTER_TAG_LVL_MAX_NUM){
00079a  2c05              CMP      r4,#5
00079c  d215              BCS      |L1.1994|
;;;443            /* find OK */
;;;444            if (level == ELOG_FILTER_LVL_ALL){
00079e  2d05              CMP      r5,#5
0007a0  d005              BEQ      |L1.1966|
;;;445                /* remove current tag's level filter when input level is the lowest level */
;;;446                 elog.filter.tag_lvl[i].tag_use_flag = false;
;;;447                 memset(elog.filter.tag_lvl[i].tag, '\0', ELOG_FILTER_TAG_MAX_LEN + 1);
;;;448                 elog.filter.tag_lvl[i].level = ELOG_FILTER_LVL_SILENT;
;;;449            } else{
;;;450                elog.filter.tag_lvl[i].level = level;
0007a2  eb041044          ADD      r0,r4,r4,LSL #5
0007a6  4430              ADD      r0,r0,r6
0007a8  f8805031          STRB     r5,[r0,#0x31]
0007ac  e01a              B        |L1.2020|
                  |L1.1966|
0007ae  eb041044          ADD      r0,r4,r4,LSL #5       ;446
0007b2  4430              ADD      r0,r0,r6              ;446
0007b4  2500              MOVS     r5,#0                 ;446
0007b6  f8805051          STRB     r5,[r0,#0x51]         ;446
0007ba  f1070032          ADD      r0,r7,#0x32           ;447
0007be  211f              MOVS     r1,#0x1f              ;447
0007c0  f7fffffe          BL       __aeabi_memclr
0007c4  f8875031          STRB     r5,[r7,#0x31]         ;448
0007c8  e00c              B        |L1.2020|
                  |L1.1994|
;;;451            }
;;;452        } else{
;;;453            /* only add the new tag's level filer when level is not ELOG_FILTER_LVL_ALL */
;;;454            if (level != ELOG_FILTER_LVL_ALL){
0007ca  2d05              CMP      r5,#5
0007cc  d00a              BEQ      |L1.2020|
;;;455                for (i =0; i< ELOG_FILTER_TAG_LVL_MAX_NUM; i++){
0007ce  2000              MOVS     r0,#0
                  |L1.2000|
;;;456                    if (elog.filter.tag_lvl[i].tag_use_flag == false){
0007d0  eb001140          ADD      r1,r0,r0,LSL #5
0007d4  4431              ADD      r1,r1,r6
0007d6  f8911051          LDRB     r1,[r1,#0x51]
0007da  b139              CBZ      r1,|L1.2028|
0007dc  1c40              ADDS     r0,r0,#1
0007de  b2c0              UXTB     r0,r0                 ;455
0007e0  2805              CMP      r0,#5                 ;455
0007e2  d3f5              BCC      |L1.2000|
                  |L1.2020|
;;;457                        strncpy(elog.filter.tag_lvl[i].tag, tag, ELOG_FILTER_TAG_MAX_LEN);
;;;458                        elog.filter.tag_lvl[i].level = level;
;;;459                        elog.filter.tag_lvl[i].tag_use_flag = true;
;;;460                        break;
;;;461                    }
;;;462                }
;;;463            }
;;;464        }
;;;465        elog_output_unlock();
0007e4  b006              ADD      sp,sp,#0x18
0007e6  e8bd41f0          POP      {r4-r8,lr}
0007ea  e7fe              B        elog_output_unlock
                  |L1.2028|
0007ec  eb001040          ADD      r0,r0,r0,LSL #5       ;457
0007f0  1984              ADDS     r4,r0,r6              ;457
0007f2  f1040032          ADD      r0,r4,#0x32           ;457
0007f6  221e              MOVS     r2,#0x1e              ;457
0007f8  4641              MOV      r1,r8                 ;457
0007fa  f7fffffe          BL       strncpy
0007fe  f8845031          STRB     r5,[r4,#0x31]         ;458
000802  2001              MOVS     r0,#1                 ;459
000804  f8840051          STRB     r0,[r4,#0x51]         ;459
000808  e7ec              B        |L1.2020|
                  |L1.2058|
;;;466    }
00080a  b006              ADD      sp,sp,#0x18
00080c  e6b3              B        |L1.1398|
;;;467    
                          ENDP

                  elog_raw PROC
;;;505     */
;;;506    void elog_raw(const char *format, ...) {
00080e  b40f              PUSH     {r0-r3}
;;;507        va_list args;
;;;508        size_t log_len = 0;
;;;509        int fmt_result;
;;;510    
;;;511        /* check output enabled */
;;;512        if (!elog.output_enabled) {
000810  4825              LDR      r0,|L1.2216|
000812  b510              PUSH     {r4,lr}               ;506
000814  f89000f1          LDRB     r0,[r0,#0xf1]  ; elog
000818  2800              CMP      r0,#0                 ;506
00081a  d014              BEQ      |L1.2118|
;;;513            return;
;;;514        }
;;;515    
;;;516        /* args point to the first variable parameter */
;;;517        va_start(args, format);
00081c  ac03              ADD      r4,sp,#0xc
;;;518    
;;;519        /* lock output */
;;;520        elog_output_lock();
00081e  f7fffffe          BL       elog_output_lock
000822  4623              MOV      r3,r4
;;;521    
;;;522        /* package log data to buffer */
;;;523        fmt_result = vsnprintf(log_buf, ELOG_LINE_BUF_SIZE, format, args);
000824  f44f7480          MOV      r4,#0x100
000828  4621              MOV      r1,r4
00082a  4836              LDR      r0,|L1.2308|
00082c  9a02              LDR      r2,[sp,#8]
00082e  f7fffffe          BL       vsnprintf
;;;524    
;;;525        /* output converted log */
;;;526        if ((fmt_result > -1) && (fmt_result <= ELOG_LINE_BUF_SIZE)) {
000832  42a0              CMP      r0,r4
000834  d801              BHI      |L1.2106|
;;;527            log_len = fmt_result;
000836  4601              MOV      r1,r0
000838  e000              B        |L1.2108|
                  |L1.2106|
;;;528        } else {
;;;529            log_len = ELOG_LINE_BUF_SIZE;
00083a  4621              MOV      r1,r4
                  |L1.2108|
;;;530        }
;;;531        /* output log */
;;;532    #if defined(ELOG_ASYNC_OUTPUT_ENABLE)
;;;533        extern void elog_async_output(uint8_t level, const char *log, size_t size);
;;;534        /* raw log will using assert level */
;;;535        elog_async_output(ELOG_LVL_ASSERT, log_buf, log_len);
;;;536    #elif defined(ELOG_BUF_OUTPUT_ENABLE)
;;;537        extern void elog_buf_output(const char *log, size_t size);
;;;538        elog_buf_output(log_buf, log_len);
;;;539    #else
;;;540        elog_port_output(log_buf, log_len);
00083c  4831              LDR      r0,|L1.2308|
00083e  f7fffffe          BL       elog_port_output
;;;541    #endif
;;;542        /* unlock output */
;;;543        elog_output_unlock();
000842  f7fffffe          BL       elog_output_unlock
                  |L1.2118|
;;;544    
;;;545        va_end(args);
;;;546    }
000846  bc10              POP      {r4}
000848  f85dfb14          LDR      pc,[sp],#0x14
;;;547    
                          ENDP

                  elog_assert_set_hook PROC
;;;764     */
;;;765    void elog_assert_set_hook(void (*hook)(const char* expr, const char* func, size_t line)) {
00084c  4914              LDR      r1,|L1.2208|
;;;766        elog_assert_hook = hook;
00084e  6008              STR      r0,[r1,#0]  ; elog_assert_hook
;;;767    }
000850  4770              BX       lr
;;;768    
                          ENDP

                  elog_find_lvl PROC
;;;776     */
;;;777    int8_t elog_find_lvl(const char *log) {
000852  b5f0              PUSH     {r4-r7,lr}
;;;778        ELOG_ASSERT(log);
000854  4d13              LDR      r5,|L1.2212|
000856  4c12              LDR      r4,|L1.2208|
000858  b085              SUB      sp,sp,#0x14           ;777
00085a  0006              MOVS     r6,r0                 ;777
00085c  f1050560          ADD      r5,r5,#0x60
000860  d106              BNE      |L1.2160|
000862  6823              LDR      r3,[r4,#0]  ; elog_assert_hook
000864  f240320a          MOV      r2,#0x30a
000868  b143              CBZ      r3,|L1.2172|
00086a  4629              MOV      r1,r5
00086c  a026              ADR      r0,|L1.2312|
00086e  4798              BLX      r3
                  |L1.2160|
;;;779        /* make sure the log level is output on each format */
;;;780        ELOG_ASSERT(elog.enabled_fmt_set[ELOG_LVL_ASSERT] & ELOG_FMT_LVL);
000870  4f0d              LDR      r7,|L1.2216|
000872  f89700d8          LDRB     r0,[r7,#0xd8]  ; elog
000876  07c0              LSLS     r0,r0,#31
000878  d048              BEQ      |L1.2316|
00087a  e04e              B        |L1.2330|
                  |L1.2172|
00087c  a022              ADR      r0,|L1.2312|
00087e  f2af4174          ADR      r1,|L1.1036|
000882  9002              STR      r0,[sp,#8]            ;778
000884  e9cd5203          STRD     r5,r2,[sp,#0xc]       ;778
000888  4b06              LDR      r3,|L1.2212|
00088a  e9cd2100          STRD     r2,r1,[sp,#0]         ;778
00088e  3360              ADDS     r3,r3,#0x60           ;778
000890  f2af4264          ADR      r2,|L1.1072|
000894  f2af4148          ADR      r1,|L1.1104|
000898  2000              MOVS     r0,#0                 ;778
00089a  f7fffffe          BL       elog_output
                  |L1.2206|
00089e  e7fe              B        |L1.2206|
                  |L1.2208|
                          DCD      ||.data||
                  |L1.2212|
                          DCD      ||.constdata||+0x66
                  |L1.2216|
                          DCD      ||.bss||+0x100
                  |L1.2220|
0008ac  322e322e          DCB      "2.2.99",0
0008b0  393900  
0008b3  00                DCB      0
                  |L1.2228|
0008b4  45617379          DCB      "EasyLogger V%s is initialize success.",0
0008b8  4c6f6767
0008bc  65722056
0008c0  25732069
0008c4  7320696e
0008c8  69746961
0008cc  6c697a65
0008d0  20737563
0008d4  63657373
0008d8  2e00    
0008da  00                DCB      0
0008db  00                DCB      0
                  |L1.2268|
0008dc  45617379          DCB      "EasyLogger V%s is deinitialize success.",0
0008e0  4c6f6767
0008e4  65722056
0008e8  25732069
0008ec  73206465
0008f0  696e6974
0008f4  69616c69
0008f8  7a652073
0008fc  75636365
000900  73732e00
                  |L1.2308|
                          DCD      ||.bss||
                  |L1.2312|
000908  6c6f6700          DCB      "log",0
                  |L1.2316|
00090c  6823              LDR      r3,[r4,#0]  ; elog_assert_hook
00090e  f44f7243          MOV      r2,#0x30c
000912  b13b              CBZ      r3,|L1.2340|
000914  49f6              LDR      r1,|L1.3312|
000916  a0f7              ADR      r0,|L1.3316|
000918  4798              BLX      r3
                  |L1.2330|
;;;781        ELOG_ASSERT(elog.enabled_fmt_set[ELOG_LVL_ERROR] & ELOG_FMT_LVL);
00091a  f89700dc          LDRB     r0,[r7,#0xdc]  ; elog
00091e  07c0              LSLS     r0,r0,#31
000920  d011              BEQ      |L1.2374|
000922  e017              B        |L1.2388|
                  |L1.2340|
000924  a0f3              ADR      r0,|L1.3316|
000926  f2af511c          ADR      r1,|L1.1036|
00092a  9002              STR      r0,[sp,#8]            ;780
00092c  e9cd5203          STRD     r5,r2,[sp,#0xc]       ;780
000930  e9cd2100          STRD     r2,r1,[sp,#0]         ;780
000934  4bee              LDR      r3,|L1.3312|
000936  f2af5208          ADR      r2,|L1.1072|
00093a  f2af41ec          ADR      r1,|L1.1104|
00093e  2000              MOVS     r0,#0                 ;780
000940  f7fffffe          BL       elog_output
                  |L1.2372|
000944  e7fe              B        |L1.2372|
                  |L1.2374|
000946  6823              LDR      r3,[r4,#0]  ; elog_assert_hook
000948  f240320d          MOV      r2,#0x30d
00094c  b13b              CBZ      r3,|L1.2398|
00094e  49e8              LDR      r1,|L1.3312|
000950  a0f6              ADR      r0,|L1.3372|
000952  4798              BLX      r3
                  |L1.2388|
;;;782        ELOG_ASSERT(elog.enabled_fmt_set[ELOG_LVL_WARN] & ELOG_FMT_LVL);
000954  f89700e0          LDRB     r0,[r7,#0xe0]  ; elog
000958  07c0              LSLS     r0,r0,#31
00095a  d011              BEQ      |L1.2432|
00095c  e017              B        |L1.2446|
                  |L1.2398|
00095e  a0f3              ADR      r0,|L1.3372|
000960  f2af5158          ADR      r1,|L1.1036|
000964  9002              STR      r0,[sp,#8]            ;781
000966  e9cd5203          STRD     r5,r2,[sp,#0xc]       ;781
00096a  e9cd2100          STRD     r2,r1,[sp,#0]         ;781
00096e  4be0              LDR      r3,|L1.3312|
000970  f2af5244          ADR      r2,|L1.1072|
000974  f2af5128          ADR      r1,|L1.1104|
000978  2000              MOVS     r0,#0                 ;781
00097a  f7fffffe          BL       elog_output
                  |L1.2430|
00097e  e7fe              B        |L1.2430|
                  |L1.2432|
000980  6823              LDR      r3,[r4,#0]  ; elog_assert_hook
000982  f240320e          MOV      r2,#0x30e
000986  b13b              CBZ      r3,|L1.2456|
000988  49d9              LDR      r1,|L1.3312|
00098a  a0f5              ADR      r0,|L1.3424|
00098c  4798              BLX      r3
                  |L1.2446|
;;;783        ELOG_ASSERT(elog.enabled_fmt_set[ELOG_LVL_INFO] & ELOG_FMT_LVL);
00098e  f89700e4          LDRB     r0,[r7,#0xe4]  ; elog
000992  07c0              LSLS     r0,r0,#31
000994  d011              BEQ      |L1.2490|
000996  e017              B        |L1.2504|
                  |L1.2456|
000998  a0f1              ADR      r0,|L1.3424|
00099a  f2af5190          ADR      r1,|L1.1036|
00099e  9002              STR      r0,[sp,#8]            ;782
0009a0  e9cd5203          STRD     r5,r2,[sp,#0xc]       ;782
0009a4  e9cd2100          STRD     r2,r1,[sp,#0]         ;782
0009a8  4bd1              LDR      r3,|L1.3312|
0009aa  f2af527c          ADR      r2,|L1.1072|
0009ae  f2af5160          ADR      r1,|L1.1104|
0009b2  2000              MOVS     r0,#0                 ;782
0009b4  f7fffffe          BL       elog_output
                  |L1.2488|
0009b8  e7fe              B        |L1.2488|
                  |L1.2490|
0009ba  6823              LDR      r3,[r4,#0]  ; elog_assert_hook
0009bc  f240320f          MOV      r2,#0x30f
0009c0  b13b              CBZ      r3,|L1.2514|
0009c2  49cb              LDR      r1,|L1.3312|
0009c4  a0f3              ADR      r0,|L1.3476|
0009c6  4798              BLX      r3
                  |L1.2504|
;;;784        ELOG_ASSERT(elog.enabled_fmt_set[ELOG_LVL_DEBUG] & ELOG_FMT_LVL);
0009c8  f89700e8          LDRB     r0,[r7,#0xe8]  ; elog
0009cc  07c0              LSLS     r0,r0,#31
0009ce  d011              BEQ      |L1.2548|
0009d0  e017              B        |L1.2562|
                  |L1.2514|
0009d2  a0f0              ADR      r0,|L1.3476|
0009d4  f2af51cc          ADR      r1,|L1.1036|
0009d8  9002              STR      r0,[sp,#8]            ;783
0009da  e9cd5203          STRD     r5,r2,[sp,#0xc]       ;783
0009de  e9cd2100          STRD     r2,r1,[sp,#0]         ;783
0009e2  4bc3              LDR      r3,|L1.3312|
0009e4  f2af52b8          ADR      r2,|L1.1072|
0009e8  f2af519c          ADR      r1,|L1.1104|
0009ec  2000              MOVS     r0,#0                 ;783
0009ee  f7fffffe          BL       elog_output
                  |L1.2546|
0009f2  e7fe              B        |L1.2546|
                  |L1.2548|
0009f4  6823              LDR      r3,[r4,#0]  ; elog_assert_hook
0009f6  f44f7244          MOV      r2,#0x310
0009fa  b13b              CBZ      r3,|L1.2572|
0009fc  49bc              LDR      r1,|L1.3312|
0009fe  a0f2              ADR      r0,|L1.3528|
000a00  4798              BLX      r3
                  |L1.2562|
;;;785        ELOG_ASSERT(elog.enabled_fmt_set[ELOG_LVL_VERBOSE] & ELOG_FMT_LVL);
000a02  f89700ec          LDRB     r0,[r7,#0xec]  ; elog
000a06  07c0              LSLS     r0,r0,#31
000a08  d011              BEQ      |L1.2606|
000a0a  e017              B        |L1.2620|
                  |L1.2572|
000a0c  a0ee              ADR      r0,|L1.3528|
000a0e  f2af6104          ADR      r1,|L1.1036|
000a12  9002              STR      r0,[sp,#8]            ;784
000a14  e9cd5203          STRD     r5,r2,[sp,#0xc]       ;784
000a18  e9cd2100          STRD     r2,r1,[sp,#0]         ;784
000a1c  4bb4              LDR      r3,|L1.3312|
000a1e  f2af52f0          ADR      r2,|L1.1072|
000a22  f2af51d4          ADR      r1,|L1.1104|
000a26  2000              MOVS     r0,#0                 ;784
000a28  f7fffffe          BL       elog_output
                  |L1.2604|
000a2c  e7fe              B        |L1.2604|
                  |L1.2606|
000a2e  6823              LDR      r3,[r4,#0]  ; elog_assert_hook
000a30  f2403211          MOV      r2,#0x311
000a34  b1c3              CBZ      r3,|L1.2664|
000a36  49ae              LDR      r1,|L1.3312|
000a38  a0f0              ADR      r0,|L1.3580|
000a3a  4798              BLX      r3
                  |L1.2620|
;;;786    
;;;787    #ifdef ELOG_COLOR_ENABLE
;;;788        uint8_t i;
;;;789        size_t csi_start_len = strlen(CSI_START);
;;;790        for(i = 0; i < ELOG_LVL_TOTAL_NUM; i ++) {
000a3c  2400              MOVS     r4,#0
;;;791            if (!strncmp(color_output_info[i], log + csi_start_len, strlen(color_output_info[i]))) {
000a3e  4dfd              LDR      r5,|L1.3636|
000a40  1cb6              ADDS     r6,r6,#2
                  |L1.2626|
000a42  f8550024          LDR      r0,[r5,r4,LSL #2]
000a46  f7fffffe          BL       strlen
000a4a  4602              MOV      r2,r0
000a4c  4631              MOV      r1,r6
000a4e  f8550024          LDR      r0,[r5,r4,LSL #2]
000a52  f7fffffe          BL       strncmp
000a56  b1c0              CBZ      r0,|L1.2698|
000a58  1c64              ADDS     r4,r4,#1
000a5a  b2e4              UXTB     r4,r4                 ;790
000a5c  2c06              CMP      r4,#6                 ;790
000a5e  d3f0              BCC      |L1.2626|
;;;792                return i;
;;;793            }
;;;794        }
;;;795        /* found failed */
;;;796        return -1;
000a60  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2660|
;;;797    #else
;;;798        switch (log[0]) {
;;;799        case 'A': return ELOG_LVL_ASSERT;
;;;800        case 'E': return ELOG_LVL_ERROR;
;;;801        case 'W': return ELOG_LVL_WARN;
;;;802        case 'I': return ELOG_LVL_INFO;
;;;803        case 'D': return ELOG_LVL_DEBUG;
;;;804        case 'V': return ELOG_LVL_VERBOSE;
;;;805        default: return -1;
;;;806        }
;;;807    #endif
;;;808    }
000a64  b005              ADD      sp,sp,#0x14
000a66  bdf0              POP      {r4-r7,pc}
                  |L1.2664|
000a68  a0e4              ADR      r0,|L1.3580|
000a6a  f2af6160          ADR      r1,|L1.1036|
000a6e  9002              STR      r0,[sp,#8]            ;785
000a70  e9cd5203          STRD     r5,r2,[sp,#0xc]       ;785
000a74  e9cd2100          STRD     r2,r1,[sp,#0]         ;785
000a78  4b9d              LDR      r3,|L1.3312|
000a7a  f2af624c          ADR      r2,|L1.1072|
000a7e  f2af6130          ADR      r1,|L1.1104|
000a82  2000              MOVS     r0,#0                 ;785
000a84  f7fffffe          BL       elog_output
                  |L1.2696|
000a88  e7fe              B        |L1.2696|
                  |L1.2698|
000a8a  b260              SXTB     r0,r4                 ;792
000a8c  e7ea              B        |L1.2660|
;;;809    
                          ENDP

                  elog_find_tag PROC
;;;820     */
;;;821    const char *elog_find_tag(const char *log, uint8_t lvl, size_t *tag_len) {
000a8e  e92d41f0          PUSH     {r4-r8,lr}
;;;822        const char *tag = NULL, *tag_end = NULL;
;;;823    
;;;824        ELOG_ASSERT(log);
000a92  4e97              LDR      r6,|L1.3312|
000a94  4de7              LDR      r5,|L1.3636|
000a96  b086              SUB      sp,sp,#0x18           ;821
000a98  4690              MOV      r8,r2                 ;821
000a9a  460c              MOV      r4,r1                 ;821
000a9c  0007              MOVS     r7,r0                 ;821
000a9e  f106060e          ADD      r6,r6,#0xe
000aa2  f1a5051c          SUB      r5,r5,#0x1c
000aa6  d107              BNE      |L1.2744|
000aa8  682b              LDR      r3,[r5,#0]  ; elog_assert_hook
000aaa  f44f724e          MOV      r2,#0x338
000aae  b13b              CBZ      r3,|L1.2752|
000ab0  4631              MOV      r1,r6
000ab2  f2af10ac          ADR      r0,|L1.2312|
000ab6  4798              BLX      r3
                  |L1.2744|
;;;825        ELOG_ASSERT(tag_len);
000ab8  f1b80f00          CMP      r8,#0
000abc  d013              BEQ      |L1.2790|
000abe  e01b              B        |L1.2808|
                  |L1.2752|
000ac0  f2af10bc          ADR      r0,|L1.2312|
000ac4  f2af61bc          ADR      r1,|L1.1036|
000ac8  9002              STR      r0,[sp,#8]            ;824
000aca  e9cd6203          STRD     r6,r2,[sp,#0xc]       ;824
000ace  4b88              LDR      r3,|L1.3312|
000ad0  e9cd2100          STRD     r2,r1,[sp,#0]         ;824
000ad4  330e              ADDS     r3,r3,#0xe            ;824
000ad6  f2af62a8          ADR      r2,|L1.1072|
000ada  f2af618c          ADR      r1,|L1.1104|
000ade  2000              MOVS     r0,#0                 ;824
000ae0  f7fffffe          BL       elog_output
                  |L1.2788|
000ae4  e7fe              B        |L1.2788|
                  |L1.2790|
000ae6  682b              LDR      r3,[r5,#0]  ; elog_assert_hook
000ae8  f2403239          MOV      r2,#0x339
000aec  2b00              CMP      r3,#0
000aee  d037              BEQ      |L1.2912|
000af0  497f              LDR      r1,|L1.3312|
000af2  a0d1              ADR      r0,|L1.3640|
000af4  310e              ADDS     r1,r1,#0xe
000af6  4798              BLX      r3
                  |L1.2808|
;;;826        ELOG_ASSERT(lvl < ELOG_LVL_TOTAL_NUM);
000af8  2c06              CMP      r4,#6
000afa  d308              BCC      |L1.2830|
000afc  682b              LDR      r3,[r5,#0]  ; elog_assert_hook
000afe  f240323a          MOV      r2,#0x33a
000b02  2b00              CMP      r3,#0
000b04  d03e              BEQ      |L1.2948|
000b06  497a              LDR      r1,|L1.3312|
000b08  a0cd              ADR      r0,|L1.3648|
000b0a  310e              ADDS     r1,r1,#0xe
000b0c  4798              BLX      r3
                  |L1.2830|
;;;827        /* make sure the log tag is output on each format */
;;;828        ELOG_ASSERT(elog.enabled_fmt_set[lvl] & ELOG_FMT_TAG);
000b0e  48d3              LDR      r0,|L1.3676|
000b10  eb000084          ADD      r0,r0,r4,LSL #2
000b14  f89000d8          LDRB     r0,[r0,#0xd8]
000b18  0780              LSLS     r0,r0,#30
000b1a  d408              BMI      |L1.2862|
000b1c  682b              LDR      r3,[r5,#0]  ; elog_assert_hook
000b1e  f44f724f          MOV      r2,#0x33c
000b22  2b00              CMP      r3,#0
000b24  d040              BEQ      |L1.2984|
000b26  4972              LDR      r1,|L1.3312|
000b28  a0cd              ADR      r0,|L1.3680|
000b2a  310e              ADDS     r1,r1,#0xe
000b2c  4798              BLX      r3
                  |L1.2862|
;;;829    
;;;830    #ifdef ELOG_COLOR_ENABLE
;;;831        tag = log + strlen(CSI_START) + strlen(color_output_info[lvl]) + strlen(level_output_info[lvl]);
000b2e  48c1              LDR      r0,|L1.3636|
000b30  f8500024          LDR      r0,[r0,r4,LSL #2]
000b34  f7fffffe          BL       strlen
000b38  19c5              ADDS     r5,r0,r7
000b3a  48be              LDR      r0,|L1.3636|
000b3c  3818              SUBS     r0,r0,#0x18
000b3e  f8500024          LDR      r0,[r0,r4,LSL #2]
000b42  f7fffffe          BL       strlen
000b46  182c              ADDS     r4,r5,r0
;;;832    #else
;;;833        tag = log + strlen(level_output_info[lvl]);
;;;834    #endif
;;;835        /* find the first space after tag */
;;;836        if ((tag_end = memchr(tag, ' ', ELOG_FILTER_TAG_MAX_LEN)) != NULL) {
000b48  1ca4              ADDS     r4,r4,#2
000b4a  221e              MOVS     r2,#0x1e
000b4c  2120              MOVS     r1,#0x20
000b4e  4620              MOV      r0,r4
000b50  f7fffffe          BL       memchr
000b54  2800              CMP      r0,#0
000b56  d039              BEQ      |L1.3020|
;;;837            *tag_len = tag_end - tag;
000b58  1b01              SUBS     r1,r0,r4
000b5a  f8c81000          STR      r1,[r8,#0]
000b5e  e036              B        |L1.3022|
                  |L1.2912|
000b60  a0b5              ADR      r0,|L1.3640|
000b62  f2af7158          ADR      r1,|L1.1036|
000b66  9002              STR      r0,[sp,#8]            ;825
000b68  e9cd6203          STRD     r6,r2,[sp,#0xc]       ;825
000b6c  4b60              LDR      r3,|L1.3312|
000b6e  e9cd2100          STRD     r2,r1,[sp,#0]         ;825
000b72  330e              ADDS     r3,r3,#0xe            ;825
000b74  f2af7248          ADR      r2,|L1.1072|
000b78  f2af712c          ADR      r1,|L1.1104|
000b7c  2000              MOVS     r0,#0                 ;825
000b7e  f7fffffe          BL       elog_output
                  |L1.2946|
000b82  e7fe              B        |L1.2946|
                  |L1.2948|
000b84  a0ae              ADR      r0,|L1.3648|
000b86  f2af717c          ADR      r1,|L1.1036|
000b8a  9002              STR      r0,[sp,#8]            ;826
000b8c  e9cd6203          STRD     r6,r2,[sp,#0xc]       ;826
000b90  4b57              LDR      r3,|L1.3312|
000b92  e9cd2100          STRD     r2,r1,[sp,#0]         ;826
000b96  330e              ADDS     r3,r3,#0xe            ;826
000b98  f2af726c          ADR      r2,|L1.1072|
000b9c  f2af7150          ADR      r1,|L1.1104|
000ba0  2000              MOVS     r0,#0                 ;826
000ba2  f7fffffe          BL       elog_output
                  |L1.2982|
000ba6  e7fe              B        |L1.2982|
                  |L1.2984|
000ba8  a0ad              ADR      r0,|L1.3680|
000baa  f2af71a0          ADR      r1,|L1.1036|
000bae  9002              STR      r0,[sp,#8]            ;828
000bb0  e9cd6203          STRD     r6,r2,[sp,#0xc]       ;828
000bb4  4b4e              LDR      r3,|L1.3312|
000bb6  e9cd2100          STRD     r2,r1,[sp,#0]         ;828
000bba  330e              ADDS     r3,r3,#0xe            ;828
000bbc  f2af7290          ADR      r2,|L1.1072|
000bc0  f2af7174          ADR      r1,|L1.1104|
000bc4  2000              MOVS     r0,#0                 ;828
000bc6  f7fffffe          BL       elog_output
                  |L1.3018|
000bca  e7fe              B        |L1.3018|
                  |L1.3020|
;;;838        } else {
;;;839            tag = NULL;
000bcc  2400              MOVS     r4,#0
                  |L1.3022|
;;;840        }
;;;841    
;;;842        return tag;
000bce  4620              MOV      r0,r4
;;;843    }
000bd0  e61b              B        |L1.2058|
;;;844    
                          ENDP

                  elog_hexdump PROC
;;;852     */
;;;853    void elog_hexdump(const char *name, uint8_t width, const void *buf, uint16_t size)
000bd2  e92d4fff          PUSH     {r0-r11,lr}
;;;854    {
000bd6  b085              SUB      sp,sp,#0x14
000bd8  4688              MOV      r8,r1
;;;855    #define __is_print(ch)       ((unsigned int)((ch) - ' ') < 127u - ' ')
;;;856    
;;;857        uint16_t i, j;
;;;858        uint16_t log_len = 0;
;;;859        const uint8_t *buf_p = buf;
;;;860        char dump_string[8] = {0};
000bda  2000              MOVS     r0,#0
;;;861        int fmt_result;
;;;862    
;;;863        if (!elog.output_enabled) {
000bdc  499f              LDR      r1,|L1.3676|
000bde  9002              STR      r0,[sp,#8]            ;860
000be0  9003              STR      r0,[sp,#0xc]
000be2  f89100f1          LDRB     r0,[r1,#0xf1]  ; elog
000be6  461e              MOV      r6,r3                 ;854
000be8  4691              MOV      r9,r2                 ;859
000bea  2800              CMP      r0,#0                 ;854
000bec  d07e              BEQ      |L1.3308|
;;;864            return;
;;;865        }
;;;866    
;;;867        /* level filter */
;;;868        if (ELOG_LVL_DEBUG > elog.filter.level) {
000bee  7808              LDRB     r0,[r1,#0]  ; elog
000bf0  2804              CMP      r0,#4
000bf2  d37b              BCC      |L1.3308|
;;;869            return;
;;;870        } else if (!strstr(name, elog.filter.tag)) { /* tag filter */
000bf4  1c49              ADDS     r1,r1,#1
000bf6  9805              LDR      r0,[sp,#0x14]
000bf8  f7fffffe          BL       strstr
000bfc  2800              CMP      r0,#0
000bfe  d075              BEQ      |L1.3308|
;;;871            return;
;;;872        }
;;;873    
;;;874        /* lock output */
;;;875        elog_output_lock();
000c00  f7fffffe          BL       elog_output_lock
;;;876    
;;;877        for (i = 0; i < size; i += width) {
000c04  2500              MOVS     r5,#0
;;;878            /* package header */
;;;879            fmt_result = snprintf(log_buf, ELOG_LINE_BUF_SIZE, "D/HEX %s: %04X-%04X: ", name, i, i + width - 1);
000c06  f44f7b80          MOV      r11,#0x100
000c0a  f8dfa280          LDR      r10,|L1.3724|
000c0e  e15b              B        |L1.3784|
                  |L1.3088|
000c10  eb050008          ADD      r0,r5,r8
000c14  9004              STR      r0,[sp,#0x10]
000c16  1e40              SUBS     r0,r0,#1
000c18  e9cd5000          STRD     r5,r0,[sp,#0]
000c1c  a29c              ADR      r2,|L1.3728|
000c1e  465c              MOV      r4,r11
000c20  4659              MOV      r1,r11
000c22  489a              LDR      r0,|L1.3724|
000c24  9b05              LDR      r3,[sp,#0x14]
000c26  f7fffffe          BL       __2snprintf
;;;880            /* calculate log length */
;;;881            if ((fmt_result > -1) && (fmt_result <= ELOG_LINE_BUF_SIZE)) {
000c2a  42a0              CMP      r0,r4
000c2c  d801              BHI      |L1.3122|
;;;882                log_len = fmt_result;
000c2e  b284              UXTH     r4,r0
000c30  e000              B        |L1.3124|
                  |L1.3122|
;;;883            } else {
;;;884                log_len = ELOG_LINE_BUF_SIZE;
000c32  465c              MOV      r4,r11
                  |L1.3124|
;;;885            }
;;;886            /* dump hex */
;;;887            for (j = 0; j < width; j++) {
000c34  2700              MOVS     r7,#0
000c36  e025              B        |L1.3204|
                  |L1.3128|
;;;888                if (i + j < size) {
000c38  19e8              ADDS     r0,r5,r7
000c3a  42b0              CMP      r0,r6
000c3c  d207              BCS      |L1.3150|
;;;889                    snprintf(dump_string, sizeof(dump_string), "%02X ", buf_p[i + j]);
000c3e  f8193000          LDRB     r3,[r9,r0]
000c42  a299              ADR      r2,|L1.3752|
000c44  2108              MOVS     r1,#8
000c46  a802              ADD      r0,sp,#8
000c48  f7fffffe          BL       __2snprintf
000c4c  e004              B        |L1.3160|
                  |L1.3150|
;;;890                } else {
;;;891                    strncpy(dump_string, "   ", sizeof(dump_string));
000c4e  2208              MOVS     r2,#8
000c50  a197              ADR      r1,|L1.3760|
000c52  a802              ADD      r0,sp,#8
000c54  f7fffffe          BL       strncpy
                  |L1.3160|
;;;892                }
;;;893                log_len += elog_strcpy(log_len, log_buf + log_len, dump_string);
000c58  eb0a0104          ADD      r1,r10,r4
000c5c  aa02              ADD      r2,sp,#8
000c5e  4620              MOV      r0,r4
000c60  f7fffffe          BL       elog_strcpy
000c64  4420              ADD      r0,r0,r4
000c66  b284              UXTH     r4,r0
;;;894                if ((j + 1) % 8 == 0) {
000c68  0778              LSLS     r0,r7,#29
000c6a  f1b04f60          CMP      r0,#0xe0000000
000c6e  d107              BNE      |L1.3200|
;;;895                    log_len += elog_strcpy(log_len, log_buf + log_len, " ");
000c70  eb0a0104          ADD      r1,r10,r4
000c74  a28b              ADR      r2,|L1.3748|
000c76  4620              MOV      r0,r4
000c78  f7fffffe          BL       elog_strcpy
000c7c  4420              ADD      r0,r0,r4
000c7e  b284              UXTH     r4,r0
                  |L1.3200|
000c80  1c7f              ADDS     r7,r7,#1
000c82  b2bf              UXTH     r7,r7                 ;887
                  |L1.3204|
000c84  4547              CMP      r7,r8                 ;887
000c86  d3d7              BCC      |L1.3128|
;;;896                }
;;;897            }
;;;898            log_len += elog_strcpy(log_len, log_buf + log_len, "  ");
000c88  eb0a0104          ADD      r1,r10,r4
000c8c  a289              ADR      r2,|L1.3764|
000c8e  4620              MOV      r0,r4
000c90  f7fffffe          BL       elog_strcpy
000c94  4420              ADD      r0,r0,r4
000c96  b284              UXTH     r4,r0
;;;899            /* dump char for hex */
;;;900            for (j = 0; j < width; j++) {
000c98  2700              MOVS     r7,#0
000c9a  e018              B        |L1.3278|
                  |L1.3228|
;;;901                if (i + j < size) {
000c9c  19e8              ADDS     r0,r5,r7
000c9e  42b0              CMP      r0,r6
000ca0  d213              BCS      |L1.3274|
;;;902                    snprintf(dump_string, sizeof(dump_string), "%c", __is_print(buf_p[i + j]) ? buf_p[i + j] : '.');
000ca2  f8193000          LDRB     r3,[r9,r0]
000ca6  f1a30020          SUB      r0,r3,#0x20
000caa  285f              CMP      r0,#0x5f
000cac  d300              BCC      |L1.3248|
000cae  232e              MOVS     r3,#0x2e
                  |L1.3248|
000cb0  a281              ADR      r2,|L1.3768|
000cb2  2108              MOVS     r1,#8
000cb4  a802              ADD      r0,sp,#8
000cb6  f7fffffe          BL       __2snprintf
;;;903                    log_len += elog_strcpy(log_len, log_buf + log_len, dump_string);
000cba  eb0a0104          ADD      r1,r10,r4
000cbe  aa02              ADD      r2,sp,#8
000cc0  4620              MOV      r0,r4
000cc2  f7fffffe          BL       elog_strcpy
000cc6  4420              ADD      r0,r0,r4
000cc8  b284              UXTH     r4,r0
                  |L1.3274|
000cca  1c7f              ADDS     r7,r7,#1
000ccc  b2bf              UXTH     r7,r7                 ;900
                  |L1.3278|
000cce  4547              CMP      r7,r8                 ;900
000cd0  d3e4              BCC      |L1.3228|
;;;904                }
;;;905            }
;;;906            /* overflow check and reserve some space for newline sign */
;;;907            if (log_len + strlen(ELOG_NEWLINE_SIGN) > ELOG_LINE_BUF_SIZE) {
000cd2  1ca0              ADDS     r0,r4,#2
000cd4  4558              CMP      r0,r11
000cd6  d900              BLS      |L1.3290|
;;;908                log_len = ELOG_LINE_BUF_SIZE - strlen(ELOG_NEWLINE_SIGN);
000cd8  24fe              MOVS     r4,#0xfe
                  |L1.3290|
;;;909            }
;;;910            /* package newline sign */
;;;911            log_len += elog_strcpy(log_len, log_buf + log_len, ELOG_NEWLINE_SIGN);
000cda  eb0a0104          ADD      r1,r10,r4
000cde  f6af024c          ADR      r2,|L1.1172|
000ce2  4620              MOV      r0,r4
000ce4  f7fffffe          BL       elog_strcpy
000ce8  4420              ADD      r0,r0,r4
000cea  e0e7              B        |L1.3772|
                  |L1.3308|
000cec  e0f1              B        |L1.3794|
000cee  0000              DCW      0x0000
                  |L1.3312|
                          DCD      ||.constdata||+0xc6
                  |L1.3316|
000cf4  656c6f67          DCB      "elog.enabled_fmt_set[ELOG_LVL_ASSERT] & ELOG_FMT_LVL",0
000cf8  2e656e61
000cfc  626c6564
000d00  5f666d74
000d04  5f736574
000d08  5b454c4f
000d0c  475f4c56
000d10  4c5f4153
000d14  53455254
000d18  5d202620
000d1c  454c4f47
000d20  5f464d54
000d24  5f4c564c
000d28  00      
000d29  00                DCB      0
000d2a  00                DCB      0
000d2b  00                DCB      0
                  |L1.3372|
000d2c  656c6f67          DCB      "elog.enabled_fmt_set[ELOG_LVL_ERROR] & ELOG_FMT_LVL",0
000d30  2e656e61
000d34  626c6564
000d38  5f666d74
000d3c  5f736574
000d40  5b454c4f
000d44  475f4c56
000d48  4c5f4552
000d4c  524f525d
000d50  20262045
000d54  4c4f475f
000d58  464d545f
000d5c  4c564c00
                  |L1.3424|
000d60  656c6f67          DCB      "elog.enabled_fmt_set[ELOG_LVL_WARN] & ELOG_FMT_LVL",0
000d64  2e656e61
000d68  626c6564
000d6c  5f666d74
000d70  5f736574
000d74  5b454c4f
000d78  475f4c56
000d7c  4c5f5741
000d80  524e5d20
000d84  2620454c
000d88  4f475f46
000d8c  4d545f4c
000d90  564c00  
000d93  00                DCB      0
                  |L1.3476|
000d94  656c6f67          DCB      "elog.enabled_fmt_set[ELOG_LVL_INFO] & ELOG_FMT_LVL",0
000d98  2e656e61
000d9c  626c6564
000da0  5f666d74
000da4  5f736574
000da8  5b454c4f
000dac  475f4c56
000db0  4c5f494e
000db4  464f5d20
000db8  2620454c
000dbc  4f475f46
000dc0  4d545f4c
000dc4  564c00  
000dc7  00                DCB      0
                  |L1.3528|
000dc8  656c6f67          DCB      "elog.enabled_fmt_set[ELOG_LVL_DEBUG] & ELOG_FMT_LVL",0
000dcc  2e656e61
000dd0  626c6564
000dd4  5f666d74
000dd8  5f736574
000ddc  5b454c4f
000de0  475f4c56
000de4  4c5f4445
000de8  4255475d
000dec  20262045
000df0  4c4f475f
000df4  464d545f
000df8  4c564c00
                  |L1.3580|
000dfc  656c6f67          DCB      "elog.enabled_fmt_set[ELOG_LVL_VERBOSE] & ELOG_FMT_LVL",0
000e00  2e656e61
000e04  626c6564
000e08  5f666d74
000e0c  5f736574
000e10  5b454c4f
000e14  475f4c56
000e18  4c5f5645
000e1c  52424f53
000e20  455d2026
000e24  20454c4f
000e28  475f464d
000e2c  545f4c56
000e30  4c00    
000e32  00                DCB      0
000e33  00                DCB      0
                  |L1.3636|
                          DCD      ||.data||+0x1c
                  |L1.3640|
000e38  7461675f          DCB      "tag_len",0
000e3c  6c656e00
                  |L1.3648|
000e40  6c766c20          DCB      "lvl < ELOG_LVL_TOTAL_NUM",0
000e44  3c20454c
000e48  4f475f4c
000e4c  564c5f54
000e50  4f54414c
000e54  5f4e554d
000e58  00      
000e59  00                DCB      0
000e5a  00                DCB      0
000e5b  00                DCB      0
                  |L1.3676|
                          DCD      ||.bss||+0x100
                  |L1.3680|
000e60  656c6f67          DCB      "elog.enabled_fmt_set[lvl] & ELOG_FMT_TAG",0
000e64  2e656e61
000e68  626c6564
000e6c  5f666d74
000e70  5f736574
000e74  5b6c766c
000e78  5d202620
000e7c  454c4f47
000e80  5f464d54
000e84  5f544147
000e88  00      
000e89  00                DCB      0
000e8a  00                DCB      0
000e8b  00                DCB      0
                  |L1.3724|
                          DCD      ||.bss||
                  |L1.3728|
000e90  442f4845          DCB      "D/HEX %s: %04X-%04X:"
000e94  58202573
000e98  3a202530
000e9c  34582d25
000ea0  3034583a
                  |L1.3748|
000ea4  2000              DCB      " ",0
000ea6  00                DCB      0
000ea7  00                DCB      0
                  |L1.3752|
000ea8  25303258          DCB      "%02X ",0
000eac  2000    
000eae  00                DCB      0
000eaf  00                DCB      0
                  |L1.3760|
000eb0  20202000          DCB      "   ",0
                  |L1.3764|
000eb4  202000            DCB      "  ",0
000eb7  00                DCB      0
                  |L1.3768|
000eb8  256300            DCB      "%c",0
000ebb  00                DCB      0
                  |L1.3772|
000ebc  b281              UXTH     r1,r0
;;;912            /* do log output */
;;;913    #if defined(ELOG_ASYNC_OUTPUT_ENABLE)
;;;914            extern void elog_async_output(uint8_t level, const char *log, size_t size);
;;;915            elog_async_output(ELOG_LVL_DEBUG, log_buf, log_len);
;;;916    #elif defined(ELOG_BUF_OUTPUT_ENABLE)
;;;917            extern void elog_buf_output(const char *log, size_t size);
;;;918        elog_buf_output(log_buf, log_len);
;;;919    #else
;;;920            elog_port_output(log_buf, log_len);
000ebe  4806              LDR      r0,|L1.3800|
000ec0  f7fffffe          BL       elog_port_output
000ec4  9804              LDR      r0,[sp,#0x10]         ;877
000ec6  b285              UXTH     r5,r0                 ;877
                  |L1.3784|
000ec8  42b5              CMP      r5,r6                 ;877
000eca  f4ffaea1          BCC      |L1.3088|
;;;921    #endif
;;;922        }
;;;923        /* unlock output */
;;;924        elog_output_unlock();
000ece  f7fffffe          BL       elog_output_unlock
                  |L1.3794|
;;;925    }
000ed2  b009              ADD      sp,sp,#0x24
000ed4  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L1.3800|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  log_buf
                          %        256
                  elog
                          %        248

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  656c6f67          DCB      0x65,0x6c,0x6f,0x67
000004  5f737461          DCB      0x5f,0x73,0x74,0x61
000008  727400            DCB      0x72,0x74,0x00
                  |symbol_number.19|
00000b  65                DCB      0x65
00000c  6c6f675f          DCB      0x6c,0x6f,0x67,0x5f
000010  73746f70          DCB      0x73,0x74,0x6f,0x70
000014  00                DCB      0x00
                  |symbol_number.20|
000015  656c6f            DCB      0x65,0x6c,0x6f
000018  675f7365          DCB      0x67,0x5f,0x73,0x65
00001c  745f6f75          DCB      0x74,0x5f,0x6f,0x75
000020  74707574          DCB      0x74,0x70,0x75,0x74
000024  5f656e61          DCB      0x5f,0x65,0x6e,0x61
000028  626c6564          DCB      0x62,0x6c,0x65,0x64
00002c  00                DCB      0x00
                  |symbol_number.21|
00002d  656c6f            DCB      0x65,0x6c,0x6f
000030  675f7365          DCB      0x67,0x5f,0x73,0x65
000034  745f7465          DCB      0x74,0x5f,0x74,0x65
000038  78745f63          DCB      0x78,0x74,0x5f,0x63
00003c  6f6c6f72          DCB      0x6f,0x6c,0x6f,0x72
000040  5f656e61          DCB      0x5f,0x65,0x6e,0x61
000044  626c6564          DCB      0x62,0x6c,0x65,0x64
000048  00                DCB      0x00
                  |symbol_number.22|
000049  656c6f            DCB      0x65,0x6c,0x6f
00004c  675f7365          DCB      0x67,0x5f,0x73,0x65
000050  745f666d          DCB      0x74,0x5f,0x66,0x6d
000054  7400              DCB      0x74,0x00
                  |symbol_number.23|
000056  656c              DCB      0x65,0x6c
000058  6f675f73          DCB      0x6f,0x67,0x5f,0x73
00005c  65745f66          DCB      0x65,0x74,0x5f,0x66
000060  696c7465          DCB      0x69,0x6c,0x74,0x65
000064  7200              DCB      0x72,0x00
                  |symbol_number.24|
000066  656c              DCB      0x65,0x6c
000068  6f675f73          DCB      0x6f,0x67,0x5f,0x73
00006c  65745f66          DCB      0x65,0x74,0x5f,0x66
000070  696c7465          DCB      0x69,0x6c,0x74,0x65
000074  725f6c76          DCB      0x72,0x5f,0x6c,0x76
000078  6c00              DCB      0x6c,0x00
                  |symbol_number.25|
00007a  656c              DCB      0x65,0x6c
00007c  6f675f73          DCB      0x6f,0x67,0x5f,0x73
000080  65745f66          DCB      0x65,0x74,0x5f,0x66
000084  696c7465          DCB      0x69,0x6c,0x74,0x65
000088  725f7461          DCB      0x72,0x5f,0x74,0x61
00008c  675f6c76          DCB      0x67,0x5f,0x6c,0x76
000090  6c00              DCB      0x6c,0x00
                  |symbol_number.26|
000092  656c              DCB      0x65,0x6c
000094  6f675f67          DCB      0x6f,0x67,0x5f,0x67
000098  65745f66          DCB      0x65,0x74,0x5f,0x66
00009c  696c7465          DCB      0x69,0x6c,0x74,0x65
0000a0  725f7461          DCB      0x72,0x5f,0x74,0x61
0000a4  675f6c76          DCB      0x67,0x5f,0x6c,0x76
0000a8  6c00              DCB      0x6c,0x00
                  |symbol_number.27|
0000aa  656c              DCB      0x65,0x6c
0000ac  6f675f6f          DCB      0x6f,0x67,0x5f,0x6f
0000b0  75747075          DCB      0x75,0x74,0x70,0x75
0000b4  7400              DCB      0x74,0x00
                  |symbol_number.28|
0000b6  6765              DCB      0x67,0x65
0000b8  745f666d          DCB      0x74,0x5f,0x66,0x6d
0000bc  745f656e          DCB      0x74,0x5f,0x65,0x6e
0000c0  61626c65          DCB      0x61,0x62,0x6c,0x65
0000c4  6400              DCB      0x64,0x00
                  |symbol_number.29|
0000c6  656c              DCB      0x65,0x6c
0000c8  6f675f66          DCB      0x6f,0x67,0x5f,0x66
0000cc  696e645f          DCB      0x69,0x6e,0x64,0x5f
0000d0  6c766c00          DCB      0x6c,0x76,0x6c,0x00
                  |symbol_number.30|
0000d4  656c6f67          DCB      0x65,0x6c,0x6f,0x67
0000d8  5f66696e          DCB      0x5f,0x66,0x69,0x6e
0000dc  645f7461          DCB      0x64,0x5f,0x74,0x61
0000e0  6700              DCB      0x67,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  412f00            DCB      "A/",0
000003  00                DCB      0
000004  452f00            DCB      "E/",0
000007  00                DCB      0
000008  572f00            DCB      "W/",0
00000b  00                DCB      0
00000c  492f00            DCB      "I/",0
00000f  00                DCB      0
000010  442f00            DCB      "D/",0
000013  00                DCB      0
000014  562f00            DCB      "V/",0
000017  00                DCB      0
000018  33353b32          DCB      "35;22m",0
00001c  326d00  
00001f  00                DCB      0
000020  33313b32          DCB      "31;22m",0
000024  326d00  
000027  00                DCB      0
000028  33333b32          DCB      "33;22m",0
00002c  326d00  
00002f  00                DCB      0
000030  33363b32          DCB      "36;22m",0
000034  326d00  
000037  00                DCB      0
000038  33323b32          DCB      "32;22m",0
00003c  326d00  
00003f  00                DCB      0
000040  33343b32          DCB      "34;22m",0
000044  326d00  

                          AREA ||.data||, DATA, ALIGN=2

                  elog_assert_hook
                          DCD      0x00000000
                  level_output_info
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x4
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0xc
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x14
                  color_output_info
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x20
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x30
                          DCD      ||.conststring||+0x38
                          DCD      ||.conststring||+0x40
