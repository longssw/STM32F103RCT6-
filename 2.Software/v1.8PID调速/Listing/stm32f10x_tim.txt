; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\stm32f10x_tim.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_tim.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\stm32f10x_tim.crf ..\..\Libraries\FWlib\src\stm32f10x_tim.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  TIM_DeInit PROC
;;;121      */
;;;122    void TIM_DeInit(TIM_TypeDef* TIMx)
000000  49f9              LDR      r1,|L1.1000|
;;;123    {
000002  b510              PUSH     {r4,lr}
;;;124      /* Check the parameters */
;;;125      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;126     
;;;127      if (TIMx == TIM1)
000004  4288              CMP      r0,r1
000006  d102              BNE      |L1.14|
;;;128      {
;;;129        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
000008  2101              MOVS     r1,#1
00000a  14c4              ASRS     r4,r0,#19
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
00000c  e086              B        |L1.284|
                  |L1.14|
;;;131      }     
;;;132      else if (TIMx == TIM2)
00000e  f1b04f80          CMP      r0,#0x40000000
000012  d009              BEQ      |L1.40|
;;;133      {
;;;134        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
;;;135        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
;;;136      }
;;;137      else if (TIMx == TIM3)
000014  49f5              LDR      r1,|L1.1004|
000016  4288              CMP      r0,r1
000018  d10d              BNE      |L1.54|
;;;138      {
;;;139        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  2002              MOVS     r0,#2
00001e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;140        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
000022  2100              MOVS     r1,#0
000024  2002              MOVS     r0,#2
000026  e064              B        |L1.242|
                  |L1.40|
000028  2101              MOVS     r1,#1                 ;134
00002a  4608              MOV      r0,r1                 ;134
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000030  2100              MOVS     r1,#0                 ;135
000032  2001              MOVS     r0,#1                 ;135
000034  e05d              B        |L1.242|
                  |L1.54|
;;;141      }
;;;142      else if (TIMx == TIM4)
000036  49ee              LDR      r1,|L1.1008|
000038  4288              CMP      r0,r1
00003a  d106              BNE      |L1.74|
;;;143      {
;;;144        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  2004              MOVS     r0,#4
000040  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;145        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
000044  2100              MOVS     r1,#0
000046  2004              MOVS     r0,#4
000048  e053              B        |L1.242|
                  |L1.74|
;;;146      } 
;;;147      else if (TIMx == TIM5)
00004a  49ea              LDR      r1,|L1.1012|
00004c  4288              CMP      r0,r1
00004e  d106              BNE      |L1.94|
;;;148      {
;;;149        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
000050  2101              MOVS     r1,#1
000052  2008              MOVS     r0,#8
000054  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;150        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
000058  2100              MOVS     r1,#0
00005a  2008              MOVS     r0,#8
00005c  e049              B        |L1.242|
                  |L1.94|
;;;151      } 
;;;152      else if (TIMx == TIM6)
00005e  49e6              LDR      r1,|L1.1016|
000060  4288              CMP      r0,r1
000062  d106              BNE      |L1.114|
;;;153      {
;;;154        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
000064  2101              MOVS     r1,#1
000066  2010              MOVS     r0,#0x10
000068  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;155        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
00006c  2100              MOVS     r1,#0
00006e  2010              MOVS     r0,#0x10
000070  e03f              B        |L1.242|
                  |L1.114|
;;;156      } 
;;;157      else if (TIMx == TIM7)
000072  49e2              LDR      r1,|L1.1020|
000074  4288              CMP      r0,r1
000076  d106              BNE      |L1.134|
;;;158      {
;;;159        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
000078  2101              MOVS     r1,#1
00007a  2020              MOVS     r0,#0x20
00007c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;160        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
000080  2100              MOVS     r1,#0
000082  2020              MOVS     r0,#0x20
000084  e035              B        |L1.242|
                  |L1.134|
;;;161      } 
;;;162      else if (TIMx == TIM8)
000086  49de              LDR      r1,|L1.1024|
000088  4288              CMP      r0,r1
00008a  d102              BNE      |L1.146|
;;;163      {
;;;164        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  1444              ASRS     r4,r0,#17
;;;165        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
000090  e044              B        |L1.284|
                  |L1.146|
;;;166      }
;;;167      else if (TIMx == TIM9)
000092  49dc              LDR      r1,|L1.1028|
000094  4288              CMP      r0,r1
000096  d102              BNE      |L1.158|
;;;168      {      
;;;169        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
000098  2101              MOVS     r1,#1
00009a  04cc              LSLS     r4,r1,#19
;;;170        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
00009c  e03e              B        |L1.284|
                  |L1.158|
;;;171       }  
;;;172      else if (TIMx == TIM10)
00009e  49da              LDR      r1,|L1.1032|
0000a0  4288              CMP      r0,r1
0000a2  d102              BNE      |L1.170|
;;;173      {      
;;;174        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
0000a4  2101              MOVS     r1,#1
0000a6  050c              LSLS     r4,r1,#20
;;;175        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
0000a8  e038              B        |L1.284|
                  |L1.170|
;;;176      }  
;;;177      else if (TIMx == TIM11) 
0000aa  49d8              LDR      r1,|L1.1036|
0000ac  4288              CMP      r0,r1
0000ae  d102              BNE      |L1.182|
;;;178      {     
;;;179        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
0000b0  2101              MOVS     r1,#1
0000b2  054c              LSLS     r4,r1,#21
;;;180        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
0000b4  e032              B        |L1.284|
                  |L1.182|
;;;181      }  
;;;182      else if (TIMx == TIM12)
0000b6  49d6              LDR      r1,|L1.1040|
0000b8  4288              CMP      r0,r1
0000ba  d106              BNE      |L1.202|
;;;183      {      
;;;184        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
0000bc  2101              MOVS     r1,#1
0000be  2040              MOVS     r0,#0x40
0000c0  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;185        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
0000c4  2100              MOVS     r1,#0
0000c6  2040              MOVS     r0,#0x40
0000c8  e013              B        |L1.242|
                  |L1.202|
;;;186      }  
;;;187      else if (TIMx == TIM13) 
0000ca  49d2              LDR      r1,|L1.1044|
0000cc  4288              CMP      r0,r1
0000ce  d106              BNE      |L1.222|
;;;188      {       
;;;189        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
0000d0  2101              MOVS     r1,#1
0000d2  2080              MOVS     r0,#0x80
0000d4  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;190        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
0000d8  2100              MOVS     r1,#0
0000da  2080              MOVS     r0,#0x80
0000dc  e009              B        |L1.242|
                  |L1.222|
;;;191      }
;;;192      else if (TIMx == TIM14) 
0000de  49ce              LDR      r1,|L1.1048|
0000e0  4288              CMP      r0,r1
0000e2  d10a              BNE      |L1.250|
;;;193      {       
;;;194        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
0000e4  1584              ASRS     r4,r0,#22
0000e6  2101              MOVS     r1,#1
0000e8  4620              MOV      r0,r4
0000ea  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;195        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
0000ee  2100              MOVS     r1,#0
0000f0  4620              MOV      r0,r4
                  |L1.242|
0000f2  e8bd4010          POP      {r4,lr}
0000f6  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.250|
;;;196      }        
;;;197      else if (TIMx == TIM15)
0000fa  49c8              LDR      r1,|L1.1052|
0000fc  4288              CMP      r0,r1
0000fe  d102              BNE      |L1.262|
;;;198      {
;;;199        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
000100  2101              MOVS     r1,#1
000102  040c              LSLS     r4,r1,#16
;;;200        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
000104  e00a              B        |L1.284|
                  |L1.262|
;;;201      } 
;;;202      else if (TIMx == TIM16)
000106  49c6              LDR      r1,|L1.1056|
000108  4288              CMP      r0,r1
00010a  d102              BNE      |L1.274|
;;;203      {
;;;204        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
00010c  2101              MOVS     r1,#1
00010e  044c              LSLS     r4,r1,#17
;;;205        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
000110  e004              B        |L1.284|
                  |L1.274|
;;;206      } 
;;;207      else
;;;208      {
;;;209        if (TIMx == TIM17)
000112  49c4              LDR      r1,|L1.1060|
000114  4288              CMP      r0,r1
000116  d10a              BNE      |L1.302|
;;;210        {
;;;211          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
000118  2101              MOVS     r1,#1
00011a  048c              LSLS     r4,r1,#18
                  |L1.284|
00011c  4620              MOV      r0,r4
00011e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;212          RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
000122  4620              MOV      r0,r4
000124  e8bd4010          POP      {r4,lr}
000128  2100              MOVS     r1,#0
00012a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.302|
;;;213        }  
;;;214      }
;;;215    }
00012e  bd10              POP      {r4,pc}
;;;216    
                          ENDP

                  TIM_TimeBaseInit PROC
;;;225      */
;;;226    void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000130  b530              PUSH     {r4,r5,lr}
;;;227    {
;;;228      uint16_t tmpcr1 = 0;
;;;229    
;;;230      /* Check the parameters */
;;;231      assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
;;;232      assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
;;;233      assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
;;;234    
;;;235      tmpcr1 = TIMx->CR1;  
000132  8802              LDRH     r2,[r0,#0]
;;;236    
;;;237      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
000134  4cac              LDR      r4,|L1.1000|
000136  4db2              LDR      r5,|L1.1024|
000138  42a0              CMP      r0,r4
00013a  d00d              BEQ      |L1.344|
00013c  42a8              CMP      r0,r5
00013e  d00b              BEQ      |L1.344|
000140  f1b04f80          CMP      r0,#0x40000000
000144  d008              BEQ      |L1.344|
000146  4ba9              LDR      r3,|L1.1004|
000148  4298              CMP      r0,r3
00014a  d005              BEQ      |L1.344|
;;;238         (TIMx == TIM4) || (TIMx == TIM5)) 
00014c  4ba8              LDR      r3,|L1.1008|
00014e  4298              CMP      r0,r3
000150  d002              BEQ      |L1.344|
000152  4ba8              LDR      r3,|L1.1012|
000154  4298              CMP      r0,r3
000156  d103              BNE      |L1.352|
                  |L1.344|
;;;239      {
;;;240        /* Select the Counter Mode */
;;;241        tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
000158  f0220370          BIC      r3,r2,#0x70
;;;242        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
00015c  884a              LDRH     r2,[r1,#2]
00015e  431a              ORRS     r2,r2,r3
                  |L1.352|
;;;243      }
;;;244     
;;;245      if((TIMx != TIM6) && (TIMx != TIM7))
000160  4ba5              LDR      r3,|L1.1016|
000162  4298              CMP      r0,r3
000164  d006              BEQ      |L1.372|
000166  4ba5              LDR      r3,|L1.1020|
000168  4298              CMP      r0,r3
00016a  d003              BEQ      |L1.372|
;;;246      {
;;;247        /* Set the clock division */
;;;248        tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
00016c  f4227340          BIC      r3,r2,#0x300
;;;249        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
000170  88ca              LDRH     r2,[r1,#6]
000172  431a              ORRS     r2,r2,r3
                  |L1.372|
;;;250      }
;;;251    
;;;252      TIMx->CR1 = tmpcr1;
000174  8002              STRH     r2,[r0,#0]
;;;253    
;;;254      /* Set the Autoreload value */
;;;255      TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
000176  888a              LDRH     r2,[r1,#4]
000178  8582              STRH     r2,[r0,#0x2c]
;;;256     
;;;257      /* Set the Prescaler value */
;;;258      TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
00017a  880a              LDRH     r2,[r1,#0]
00017c  8502              STRH     r2,[r0,#0x28]
;;;259        
;;;260      if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
00017e  42a0              CMP      r0,r4
000180  d00a              BEQ      |L1.408|
000182  42a8              CMP      r0,r5
000184  d008              BEQ      |L1.408|
000186  4aa5              LDR      r2,|L1.1052|
000188  4290              CMP      r0,r2
00018a  d005              BEQ      |L1.408|
00018c  4aa4              LDR      r2,|L1.1056|
00018e  4290              CMP      r0,r2
000190  d002              BEQ      |L1.408|
000192  4aa4              LDR      r2,|L1.1060|
000194  4290              CMP      r0,r2
000196  d101              BNE      |L1.412|
                  |L1.408|
;;;261      {
;;;262        /* Set the Repetition Counter value */
;;;263        TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
000198  7a09              LDRB     r1,[r1,#8]
00019a  8601              STRH     r1,[r0,#0x30]
                  |L1.412|
;;;264      }
;;;265    
;;;266      /* Generate an update event to reload the Prescaler and the Repetition counter
;;;267         values immediately */
;;;268      TIMx->EGR = TIM_PSCReloadMode_Immediate;           
00019c  2101              MOVS     r1,#1
00019e  8281              STRH     r1,[r0,#0x14]
;;;269    }
0001a0  bd30              POP      {r4,r5,pc}
;;;270    
                          ENDP

                  TIM_OC1Init PROC
;;;278      */
;;;279    void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
0001a2  b530              PUSH     {r4,r5,lr}
;;;280    {
;;;281      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;282       
;;;283      /* Check the parameters */
;;;284      assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;285      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;286      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;287      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;288     /* Disable the Channel 1: Reset the CC1E Bit */
;;;289      TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
0001a4  8c02              LDRH     r2,[r0,#0x20]
0001a6  f0220201          BIC      r2,r2,#1
0001aa  8402              STRH     r2,[r0,#0x20]
;;;290      /* Get the TIMx CCER register value */
;;;291      tmpccer = TIMx->CCER;
0001ac  8c02              LDRH     r2,[r0,#0x20]
;;;292      /* Get the TIMx CR2 register value */
;;;293      tmpcr2 =  TIMx->CR2;
0001ae  8883              LDRH     r3,[r0,#4]
;;;294      
;;;295      /* Get the TIMx CCMR1 register value */
;;;296      tmpccmrx = TIMx->CCMR1;
0001b0  8b04              LDRH     r4,[r0,#0x18]
;;;297        
;;;298      /* Reset the Output Compare Mode Bits */
;;;299      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
;;;300      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
;;;301    
;;;302      /* Select the Output Compare Mode */
;;;303      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
;;;304      
;;;305      /* Reset the Output Polarity level */
;;;306      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
0001b2  f0220202          BIC      r2,r2,#2
0001b6  f0240573          BIC      r5,r4,#0x73           ;300
0001ba  880c              LDRH     r4,[r1,#0]            ;303
0001bc  432c              ORRS     r4,r4,r5              ;303
;;;307      /* Set the Output Compare Polarity */
;;;308      tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
0001be  890d              LDRH     r5,[r1,#8]
0001c0  4315              ORRS     r5,r5,r2
;;;309      
;;;310      /* Set the Output State */
;;;311      tmpccer |= TIM_OCInitStruct->TIM_OutputState;
0001c2  884a              LDRH     r2,[r1,#2]
0001c4  432a              ORRS     r2,r2,r5
;;;312        
;;;313      if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
0001c6  4d88              LDR      r5,|L1.1000|
0001c8  42a8              CMP      r0,r5
0001ca  d00b              BEQ      |L1.484|
0001cc  4d8c              LDR      r5,|L1.1024|
0001ce  42a8              CMP      r0,r5
0001d0  d008              BEQ      |L1.484|
0001d2  4d92              LDR      r5,|L1.1052|
0001d4  42a8              CMP      r0,r5
0001d6  d005              BEQ      |L1.484|
;;;314         (TIMx == TIM16)|| (TIMx == TIM17))
0001d8  4d91              LDR      r5,|L1.1056|
0001da  42a8              CMP      r0,r5
0001dc  d002              BEQ      |L1.484|
0001de  4d91              LDR      r5,|L1.1060|
0001e0  42a8              CMP      r0,r5
0001e2  d10d              BNE      |L1.512|
                  |L1.484|
;;;315      {
;;;316        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;317        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;318        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;319        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;320        
;;;321        /* Reset the Output N Polarity level */
;;;322        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
0001e4  f0220508          BIC      r5,r2,#8
;;;323        /* Set the Output N Polarity */
;;;324        tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
0001e8  894a              LDRH     r2,[r1,#0xa]
;;;325        
;;;326        /* Reset the Output N State */
;;;327        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
;;;328        /* Set the Output N State */
;;;329        tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
;;;330        
;;;331        /* Reset the Output Compare and Output Compare N IDLE State */
;;;332        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
;;;333        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
0001ea  f4237340          BIC      r3,r3,#0x300
0001ee  432a              ORRS     r2,r2,r5              ;324
0001f0  f0220504          BIC      r5,r2,#4              ;327
0001f4  888a              LDRH     r2,[r1,#4]            ;329
0001f6  432a              ORRS     r2,r2,r5              ;329
;;;334        
;;;335        /* Set the Output Idle state */
;;;336        tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
0001f8  898d              LDRH     r5,[r1,#0xc]
0001fa  431d              ORRS     r5,r5,r3
;;;337        /* Set the Output N Idle state */
;;;338        tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
0001fc  89cb              LDRH     r3,[r1,#0xe]
0001fe  432b              ORRS     r3,r3,r5
                  |L1.512|
;;;339      }
;;;340      /* Write to TIMx CR2 */
;;;341      TIMx->CR2 = tmpcr2;
000200  8083              STRH     r3,[r0,#4]
;;;342      
;;;343      /* Write to TIMx CCMR1 */
;;;344      TIMx->CCMR1 = tmpccmrx;
000202  8304              STRH     r4,[r0,#0x18]
;;;345    
;;;346      /* Set the Capture Compare Register value */
;;;347      TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
000204  88c9              LDRH     r1,[r1,#6]
000206  8681              STRH     r1,[r0,#0x34]
;;;348     
;;;349      /* Write to TIMx CCER */
;;;350      TIMx->CCER = tmpccer;
000208  8402              STRH     r2,[r0,#0x20]
;;;351    }
00020a  bd30              POP      {r4,r5,pc}
;;;352    
                          ENDP

                  TIM_OC2Init PROC
;;;361      */
;;;362    void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
00020c  b570              PUSH     {r4-r6,lr}
;;;363    {
;;;364      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;365       
;;;366      /* Check the parameters */
;;;367      assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
;;;368      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;369      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;370      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;371       /* Disable the Channel 2: Reset the CC2E Bit */
;;;372      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
00020e  8c02              LDRH     r2,[r0,#0x20]
000210  f0220210          BIC      r2,r2,#0x10
000214  8402              STRH     r2,[r0,#0x20]
;;;373      
;;;374      /* Get the TIMx CCER register value */  
;;;375      tmpccer = TIMx->CCER;
000216  8c02              LDRH     r2,[r0,#0x20]
;;;376      /* Get the TIMx CR2 register value */
;;;377      tmpcr2 =  TIMx->CR2;
000218  8883              LDRH     r3,[r0,#4]
;;;378      
;;;379      /* Get the TIMx CCMR1 register value */
;;;380      tmpccmrx = TIMx->CCMR1;
00021a  8b04              LDRH     r4,[r0,#0x18]
;;;381        
;;;382      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;383      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
;;;384      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
;;;385      
;;;386      /* Select the Output Compare Mode */
;;;387      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
00021c  880d              LDRH     r5,[r1,#0]
00021e  f42446e6          BIC      r6,r4,#0x7300         ;384
000222  f64f74ff          MOV      r4,#0xffff
000226  ea042505          AND      r5,r4,r5,LSL #8
00022a  4335              ORRS     r5,r5,r6
;;;388      
;;;389      /* Reset the Output Polarity level */
;;;390      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
;;;391      /* Set the Output Compare Polarity */
;;;392      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
00022c  890e              LDRH     r6,[r1,#8]
00022e  f0220220          BIC      r2,r2,#0x20           ;390
000232  ea041606          AND      r6,r4,r6,LSL #4
000236  4316              ORRS     r6,r6,r2
;;;393      
;;;394      /* Set the Output State */
;;;395      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
000238  884a              LDRH     r2,[r1,#2]
00023a  ea041202          AND      r2,r4,r2,LSL #4
00023e  4332              ORRS     r2,r2,r6
;;;396        
;;;397      if((TIMx == TIM1) || (TIMx == TIM8))
000240  4e69              LDR      r6,|L1.1000|
000242  42b0              CMP      r0,r6
000244  d002              BEQ      |L1.588|
000246  4e6e              LDR      r6,|L1.1024|
000248  42b0              CMP      r0,r6
00024a  d115              BNE      |L1.632|
                  |L1.588|
;;;398      {
;;;399        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;400        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;401        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;402        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;403        
;;;404        /* Reset the Output N Polarity level */
;;;405        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
00024c  f0220680          BIC      r6,r2,#0x80
;;;406        /* Set the Output N Polarity */
;;;407        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
000250  894a              LDRH     r2,[r1,#0xa]
;;;408        
;;;409        /* Reset the Output N State */
;;;410        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
;;;411        /* Set the Output N State */
;;;412        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
;;;413        
;;;414        /* Reset the Output Compare and Output Compare N IDLE State */
;;;415        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
;;;416        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
000252  f4236340          BIC      r3,r3,#0xc00
000256  ea041202          AND      r2,r4,r2,LSL #4       ;407
00025a  4332              ORRS     r2,r2,r6              ;407
00025c  f0220640          BIC      r6,r2,#0x40           ;410
000260  888a              LDRH     r2,[r1,#4]            ;412
000262  ea041202          AND      r2,r4,r2,LSL #4       ;412
000266  4332              ORRS     r2,r2,r6              ;412
;;;417        
;;;418        /* Set the Output Idle state */
;;;419        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
000268  898e              LDRH     r6,[r1,#0xc]
00026a  ea040686          AND      r6,r4,r6,LSL #2
00026e  431e              ORRS     r6,r6,r3
;;;420        /* Set the Output N Idle state */
;;;421        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
000270  89cb              LDRH     r3,[r1,#0xe]
000272  ea040383          AND      r3,r4,r3,LSL #2
000276  4333              ORRS     r3,r3,r6
                  |L1.632|
;;;422      }
;;;423      /* Write to TIMx CR2 */
;;;424      TIMx->CR2 = tmpcr2;
000278  8083              STRH     r3,[r0,#4]
;;;425      
;;;426      /* Write to TIMx CCMR1 */
;;;427      TIMx->CCMR1 = tmpccmrx;
00027a  8305              STRH     r5,[r0,#0x18]
;;;428    
;;;429      /* Set the Capture Compare Register value */
;;;430      TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
00027c  88c9              LDRH     r1,[r1,#6]
00027e  8701              STRH     r1,[r0,#0x38]
;;;431      
;;;432      /* Write to TIMx CCER */
;;;433      TIMx->CCER = tmpccer;
000280  8402              STRH     r2,[r0,#0x20]
;;;434    }
000282  bd70              POP      {r4-r6,pc}
;;;435    
                          ENDP

                  TIM_OC3Init PROC
;;;443      */
;;;444    void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
000284  b570              PUSH     {r4-r6,lr}
;;;445    {
;;;446      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;447       
;;;448      /* Check the parameters */
;;;449      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;450      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;451      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;452      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;453      /* Disable the Channel 2: Reset the CC2E Bit */
;;;454      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
000286  8c02              LDRH     r2,[r0,#0x20]
000288  f4227280          BIC      r2,r2,#0x100
00028c  8402              STRH     r2,[r0,#0x20]
;;;455      
;;;456      /* Get the TIMx CCER register value */
;;;457      tmpccer = TIMx->CCER;
00028e  8c02              LDRH     r2,[r0,#0x20]
;;;458      /* Get the TIMx CR2 register value */
;;;459      tmpcr2 =  TIMx->CR2;
000290  8883              LDRH     r3,[r0,#4]
;;;460      
;;;461      /* Get the TIMx CCMR2 register value */
;;;462      tmpccmrx = TIMx->CCMR2;
000292  8b84              LDRH     r4,[r0,#0x1c]
;;;463        
;;;464      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;465      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
;;;466      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
;;;467      /* Select the Output Compare Mode */
;;;468      tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
000294  880d              LDRH     r5,[r1,#0]
000296  f0240473          BIC      r4,r4,#0x73           ;466
00029a  4325              ORRS     r5,r5,r4
;;;469      
;;;470      /* Reset the Output Polarity level */
;;;471      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
;;;472      /* Set the Output Compare Polarity */
;;;473      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
00029c  890e              LDRH     r6,[r1,#8]
00029e  f64f74ff          MOV      r4,#0xffff
0002a2  f4227200          BIC      r2,r2,#0x200          ;471
0002a6  ea042606          AND      r6,r4,r6,LSL #8
0002aa  4316              ORRS     r6,r6,r2
;;;474      
;;;475      /* Set the Output State */
;;;476      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
0002ac  884a              LDRH     r2,[r1,#2]
0002ae  ea042202          AND      r2,r4,r2,LSL #8
0002b2  4332              ORRS     r2,r2,r6
;;;477        
;;;478      if((TIMx == TIM1) || (TIMx == TIM8))
0002b4  4e4c              LDR      r6,|L1.1000|
0002b6  42b0              CMP      r0,r6
0002b8  d002              BEQ      |L1.704|
0002ba  4e51              LDR      r6,|L1.1024|
0002bc  42b0              CMP      r0,r6
0002be  d115              BNE      |L1.748|
                  |L1.704|
;;;479      {
;;;480        assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
;;;481        assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
;;;482        assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
;;;483        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;484        
;;;485        /* Reset the Output N Polarity level */
;;;486        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
0002c0  f4226600          BIC      r6,r2,#0x800
;;;487        /* Set the Output N Polarity */
;;;488        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
0002c4  894a              LDRH     r2,[r1,#0xa]
;;;489        /* Reset the Output N State */
;;;490        tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
;;;491        
;;;492        /* Set the Output N State */
;;;493        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
;;;494        /* Reset the Output Compare and Output Compare N IDLE State */
;;;495        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
;;;496        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
0002c6  f4235340          BIC      r3,r3,#0x3000
0002ca  ea042202          AND      r2,r4,r2,LSL #8       ;488
0002ce  4332              ORRS     r2,r2,r6              ;488
0002d0  f4226680          BIC      r6,r2,#0x400          ;490
0002d4  888a              LDRH     r2,[r1,#4]            ;493
0002d6  ea042202          AND      r2,r4,r2,LSL #8       ;493
0002da  4332              ORRS     r2,r2,r6              ;493
;;;497        /* Set the Output Idle state */
;;;498        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
0002dc  898e              LDRH     r6,[r1,#0xc]
0002de  ea041606          AND      r6,r4,r6,LSL #4
0002e2  431e              ORRS     r6,r6,r3
;;;499        /* Set the Output N Idle state */
;;;500        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
0002e4  89cb              LDRH     r3,[r1,#0xe]
0002e6  ea041303          AND      r3,r4,r3,LSL #4
0002ea  4333              ORRS     r3,r3,r6
                  |L1.748|
;;;501      }
;;;502      /* Write to TIMx CR2 */
;;;503      TIMx->CR2 = tmpcr2;
0002ec  8083              STRH     r3,[r0,#4]
;;;504      
;;;505      /* Write to TIMx CCMR2 */
;;;506      TIMx->CCMR2 = tmpccmrx;
0002ee  8385              STRH     r5,[r0,#0x1c]
;;;507    
;;;508      /* Set the Capture Compare Register value */
;;;509      TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
0002f0  88c9              LDRH     r1,[r1,#6]
0002f2  8781              STRH     r1,[r0,#0x3c]
;;;510      
;;;511      /* Write to TIMx CCER */
;;;512      TIMx->CCER = tmpccer;
0002f4  8402              STRH     r2,[r0,#0x20]
;;;513    }
0002f6  bd70              POP      {r4-r6,pc}
;;;514    
                          ENDP

                  TIM_OC4Init PROC
;;;522      */
;;;523    void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
0002f8  b570              PUSH     {r4-r6,lr}
;;;524    {
;;;525      uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
;;;526       
;;;527      /* Check the parameters */
;;;528      assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;529      assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
;;;530      assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
;;;531      assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
;;;532      /* Disable the Channel 2: Reset the CC4E Bit */
;;;533      TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
0002fa  8c02              LDRH     r2,[r0,#0x20]
0002fc  f4225280          BIC      r2,r2,#0x1000
000300  8402              STRH     r2,[r0,#0x20]
;;;534      
;;;535      /* Get the TIMx CCER register value */
;;;536      tmpccer = TIMx->CCER;
000302  8c05              LDRH     r5,[r0,#0x20]
;;;537      /* Get the TIMx CR2 register value */
;;;538      tmpcr2 =  TIMx->CR2;
000304  8882              LDRH     r2,[r0,#4]
;;;539      
;;;540      /* Get the TIMx CCMR2 register value */
;;;541      tmpccmrx = TIMx->CCMR2;
000306  8b83              LDRH     r3,[r0,#0x1c]
;;;542        
;;;543      /* Reset the Output Compare mode and Capture/Compare selection Bits */
;;;544      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
;;;545      tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
;;;546      
;;;547      /* Select the Output Compare Mode */
;;;548      tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
000308  880c              LDRH     r4,[r1,#0]
00030a  f42346e6          BIC      r6,r3,#0x7300         ;545
00030e  f64f73ff          MOV      r3,#0xffff
000312  ea032404          AND      r4,r3,r4,LSL #8
000316  4334              ORRS     r4,r4,r6
;;;549      
;;;550      /* Reset the Output Polarity level */
;;;551      tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
000318  f4255600          BIC      r6,r5,#0x2000
;;;552      /* Set the Output Compare Polarity */
;;;553      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
00031c  890d              LDRH     r5,[r1,#8]
00031e  ea033505          AND      r5,r3,r5,LSL #12
000322  4335              ORRS     r5,r5,r6
;;;554      
;;;555      /* Set the Output State */
;;;556      tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
000324  884e              LDRH     r6,[r1,#2]
000326  ea033606          AND      r6,r3,r6,LSL #12
00032a  432e              ORRS     r6,r6,r5
;;;557        
;;;558      if((TIMx == TIM1) || (TIMx == TIM8))
00032c  4d2e              LDR      r5,|L1.1000|
00032e  42a8              CMP      r0,r5
000330  d002              BEQ      |L1.824|
000332  4d33              LDR      r5,|L1.1024|
000334  42a8              CMP      r0,r5
000336  d105              BNE      |L1.836|
                  |L1.824|
;;;559      {
;;;560        assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
;;;561        /* Reset the Output Compare IDLE State */
;;;562        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
000338  f4224580          BIC      r5,r2,#0x4000
;;;563        /* Set the Output Idle state */
;;;564        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
00033c  898a              LDRH     r2,[r1,#0xc]
00033e  ea031282          AND      r2,r3,r2,LSL #6
000342  432a              ORRS     r2,r2,r5
                  |L1.836|
;;;565      }
;;;566      /* Write to TIMx CR2 */
;;;567      TIMx->CR2 = tmpcr2;
000344  8082              STRH     r2,[r0,#4]
;;;568      
;;;569      /* Write to TIMx CCMR2 */  
;;;570      TIMx->CCMR2 = tmpccmrx;
000346  8384              STRH     r4,[r0,#0x1c]
;;;571    
;;;572      /* Set the Capture Compare Register value */
;;;573      TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
000348  88c9              LDRH     r1,[r1,#6]
00034a  f8a01040          STRH     r1,[r0,#0x40]
;;;574      
;;;575      /* Write to TIMx CCER */
;;;576      TIMx->CCER = tmpccer;
00034e  8406              STRH     r6,[r0,#0x20]
;;;577    }
000350  bd70              POP      {r4-r6,pc}
;;;578    
                          ENDP

                  TIM_SetIC4Prescaler PROC
;;;2418     */
;;;2419   void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000352  8b82              LDRH     r2,[r0,#0x1c]
;;;2420   {  
;;;2421     /* Check the parameters */
;;;2422     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2423     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2424     /* Reset the IC4PSC Bits */
;;;2425     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
000354  f4226240          BIC      r2,r2,#0xc00
000358  8382              STRH     r2,[r0,#0x1c]
;;;2426     /* Set the IC4PSC value */
;;;2427     TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
00035a  8b82              LDRH     r2,[r0,#0x1c]
00035c  f64f73ff          MOV      r3,#0xffff
000360  ea032101          AND      r1,r3,r1,LSL #8
000364  430a              ORRS     r2,r2,r1
000366  8382              STRH     r2,[r0,#0x1c]
;;;2428   }
000368  4770              BX       lr
;;;2429   
                          ENDP

                  TIM_SetIC3Prescaler PROC
;;;2396     */
;;;2397   void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
00036a  8b82              LDRH     r2,[r0,#0x1c]
;;;2398   {
;;;2399     /* Check the parameters */
;;;2400     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2401     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2402     /* Reset the IC3PSC Bits */
;;;2403     TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
00036c  f022020c          BIC      r2,r2,#0xc
000370  8382              STRH     r2,[r0,#0x1c]
;;;2404     /* Set the IC3PSC value */
;;;2405     TIMx->CCMR2 |= TIM_ICPSC;
000372  8b82              LDRH     r2,[r0,#0x1c]
000374  430a              ORRS     r2,r2,r1
000376  8382              STRH     r2,[r0,#0x1c]
;;;2406   }
000378  4770              BX       lr
;;;2407   
                          ENDP

                  TIM_SetIC2Prescaler PROC
;;;2374     */
;;;2375   void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
00037a  8b02              LDRH     r2,[r0,#0x18]
;;;2376   {
;;;2377     /* Check the parameters */
;;;2378     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2379     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2380     /* Reset the IC2PSC Bits */
;;;2381     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
00037c  f4226240          BIC      r2,r2,#0xc00
000380  8302              STRH     r2,[r0,#0x18]
;;;2382     /* Set the IC2PSC value */
;;;2383     TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
000382  8b02              LDRH     r2,[r0,#0x18]
000384  f64f73ff          MOV      r3,#0xffff
000388  ea032101          AND      r1,r3,r1,LSL #8
00038c  430a              ORRS     r2,r2,r1
00038e  8302              STRH     r2,[r0,#0x18]
;;;2384   }
000390  4770              BX       lr
;;;2385   
                          ENDP

                  TI2_Config PROC
;;;2747     */
;;;2748   static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000392  b5f0              PUSH     {r4-r7,lr}
;;;2749                          uint16_t TIM_ICFilter)
;;;2750   {
;;;2751     uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
;;;2752     /* Disable the Channel 2: Reset the CC2E Bit */
;;;2753     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
000394  8c04              LDRH     r4,[r0,#0x20]
000396  f0240410          BIC      r4,r4,#0x10
00039a  8404              STRH     r4,[r0,#0x20]
;;;2754     tmpccmr1 = TIMx->CCMR1;
00039c  8b07              LDRH     r7,[r0,#0x18]
;;;2755     tmpccer = TIMx->CCER;
00039e  8c04              LDRH     r4,[r0,#0x20]
;;;2756     tmp = (uint16_t)(TIM_ICPolarity << 4);
0003a0  f64f75ff          MOV      r5,#0xffff
;;;2757     /* Select the Input and set the filter */
;;;2758     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
0003a4  f4274773          BIC      r7,r7,#0xf300
;;;2759     tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
0003a8  ea053303          AND      r3,r5,r3,LSL #12
0003ac  433b              ORRS     r3,r3,r7
;;;2760     tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
0003ae  ea052202          AND      r2,r5,r2,LSL #8
0003b2  431a              ORRS     r2,r2,r3
;;;2761     
;;;2762     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
0003b4  4b0c              LDR      r3,|L1.1000|
0003b6  ea051601          AND      r6,r5,r1,LSL #4       ;2756
0003ba  4298              CMP      r0,r3
0003bc  d00e              BEQ      |L1.988|
0003be  4b10              LDR      r3,|L1.1024|
0003c0  4298              CMP      r0,r3
0003c2  d00b              BEQ      |L1.988|
0003c4  f1b04f80          CMP      r0,#0x40000000
0003c8  d008              BEQ      |L1.988|
0003ca  4b08              LDR      r3,|L1.1004|
0003cc  4298              CMP      r0,r3
0003ce  d005              BEQ      |L1.988|
;;;2763        (TIMx == TIM4) ||(TIMx == TIM5))
0003d0  4b07              LDR      r3,|L1.1008|
0003d2  4298              CMP      r0,r3
0003d4  d002              BEQ      |L1.988|
0003d6  4b07              LDR      r3,|L1.1012|
0003d8  4298              CMP      r0,r3
0003da  d125              BNE      |L1.1064|
                  |L1.988|
;;;2764     {
;;;2765       /* Select the Polarity and set the CC2E Bit */
;;;2766       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
0003dc  f0240120          BIC      r1,r4,#0x20
;;;2767       tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
0003e0  4331              ORRS     r1,r1,r6
0003e2  f0410110          ORR      r1,r1,#0x10
0003e6  e024              B        |L1.1074|
                  |L1.1000|
                          DCD      0x40012c00
                  |L1.1004|
                          DCD      0x40000400
                  |L1.1008|
                          DCD      0x40000800
                  |L1.1012|
                          DCD      0x40000c00
                  |L1.1016|
                          DCD      0x40001000
                  |L1.1020|
                          DCD      0x40001400
                  |L1.1024|
                          DCD      0x40013400
                  |L1.1028|
                          DCD      0x40014c00
                  |L1.1032|
                          DCD      0x40015000
                  |L1.1036|
                          DCD      0x40015400
                  |L1.1040|
                          DCD      0x40001800
                  |L1.1044|
                          DCD      0x40001c00
                  |L1.1048|
                          DCD      0x40002000
                  |L1.1052|
                          DCD      0x40014000
                  |L1.1056|
                          DCD      0x40014400
                  |L1.1060|
                          DCD      0x40014800
                  |L1.1064|
;;;2768     }
;;;2769     else
;;;2770     {
;;;2771       /* Select the Polarity and set the CC2E Bit */
;;;2772       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
000428  f02403a0          BIC      r3,r4,#0xa0
;;;2773       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
00042c  430b              ORRS     r3,r3,r1
00042e  f0430110          ORR      r1,r3,#0x10
                  |L1.1074|
;;;2774     }
;;;2775     
;;;2776     /* Write to TIMx CCMR1 and CCER registers */
;;;2777     TIMx->CCMR1 = tmpccmr1 ;
000432  8302              STRH     r2,[r0,#0x18]
;;;2778     TIMx->CCER = tmpccer;
000434  8401              STRH     r1,[r0,#0x20]
;;;2779   }
000436  bdf0              POP      {r4-r7,pc}
;;;2780   
                          ENDP

                  TIM_SetIC1Prescaler PROC
;;;2352     */
;;;2353   void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
000438  8b02              LDRH     r2,[r0,#0x18]
;;;2354   {
;;;2355     /* Check the parameters */
;;;2356     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2357     assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
;;;2358     /* Reset the IC1PSC Bits */
;;;2359     TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
00043a  f022020c          BIC      r2,r2,#0xc
00043e  8302              STRH     r2,[r0,#0x18]
;;;2360     /* Set the IC1PSC value */
;;;2361     TIMx->CCMR1 |= TIM_ICPSC;
000440  8b02              LDRH     r2,[r0,#0x18]
000442  430a              ORRS     r2,r2,r1
000444  8302              STRH     r2,[r0,#0x18]
;;;2362   }
000446  4770              BX       lr
;;;2363   
                          ENDP

                  TI1_Config PROC
;;;2700     */
;;;2701   static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
000448  b570              PUSH     {r4-r6,lr}
;;;2702                          uint16_t TIM_ICFilter)
;;;2703   {
;;;2704     uint16_t tmpccmr1 = 0, tmpccer = 0;
;;;2705     /* Disable the Channel 1: Reset the CC1E Bit */
;;;2706     TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
00044a  8c04              LDRH     r4,[r0,#0x20]
00044c  f0240401          BIC      r4,r4,#1
000450  8404              STRH     r4,[r0,#0x20]
;;;2707     tmpccmr1 = TIMx->CCMR1;
000452  8b05              LDRH     r5,[r0,#0x18]
;;;2708     tmpccer = TIMx->CCER;
000454  8c04              LDRH     r4,[r0,#0x20]
;;;2709     /* Select the Input and set the filter */
;;;2710     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
;;;2711     tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
000456  f64f76ff          MOV      r6,#0xffff
00045a  ea061303          AND      r3,r6,r3,LSL #4
00045e  4313              ORRS     r3,r3,r2
000460  f02505f3          BIC      r5,r5,#0xf3           ;2710
;;;2712     
;;;2713     if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
000464  4af8              LDR      r2,|L1.2120|
000466  432b              ORRS     r3,r3,r5              ;2711
000468  4290              CMP      r0,r2
00046a  d00e              BEQ      |L1.1162|
00046c  4af7              LDR      r2,|L1.2124|
00046e  4290              CMP      r0,r2
000470  d00b              BEQ      |L1.1162|
000472  f1b04f80          CMP      r0,#0x40000000
000476  d008              BEQ      |L1.1162|
000478  4af5              LDR      r2,|L1.2128|
00047a  4290              CMP      r0,r2
00047c  d005              BEQ      |L1.1162|
;;;2714        (TIMx == TIM4) ||(TIMx == TIM5))
00047e  4af5              LDR      r2,|L1.2132|
000480  4290              CMP      r0,r2
000482  d002              BEQ      |L1.1162|
000484  4af4              LDR      r2,|L1.2136|
000486  4290              CMP      r0,r2
000488  d102              BNE      |L1.1168|
                  |L1.1162|
;;;2715     {
;;;2716       /* Select the Polarity and set the CC1E Bit */
;;;2717       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
00048a  f0240202          BIC      r2,r4,#2
;;;2718       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
00048e  e001              B        |L1.1172|
                  |L1.1168|
;;;2719     }
;;;2720     else
;;;2721     {
;;;2722       /* Select the Polarity and set the CC1E Bit */
;;;2723       tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
000490  f024020a          BIC      r2,r4,#0xa
                  |L1.1172|
;;;2724       tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
000494  430a              ORRS     r2,r2,r1
000496  f0420101          ORR      r1,r2,#1
;;;2725     }
;;;2726   
;;;2727     /* Write to TIMx CCMR1 and CCER registers */
;;;2728     TIMx->CCMR1 = tmpccmr1;
00049a  8303              STRH     r3,[r0,#0x18]
;;;2729     TIMx->CCER = tmpccer;
00049c  8401              STRH     r1,[r0,#0x20]
;;;2730   }
00049e  bd70              POP      {r4-r6,pc}
;;;2731   
                          ENDP

                  TIM_ICInit PROC
;;;586      */
;;;587    void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
0004a0  e92d4ff8          PUSH     {r3-r11,lr}
;;;588    {
0004a4  460d              MOV      r5,r1
0004a6  4604              MOV      r4,r0
;;;589      /* Check the parameters */
;;;590      assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
;;;591      assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
;;;592      assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
;;;593      assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
;;;594      
;;;595      if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
;;;596         (TIMx == TIM4) ||(TIMx == TIM5))
;;;597      {
;;;598        assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
;;;599      }
;;;600      else
;;;601      {
;;;602        assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
;;;603      }
;;;604      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
0004a8  8808              LDRH     r0,[r1,#0]
0004aa  4fe7              LDR      r7,|L1.2120|
0004ac  f8dfc39c          LDR      r12,|L1.2124|
0004b0  f8df839c          LDR      r8,|L1.2128|
0004b4  f8df939c          LDR      r9,|L1.2132|
;;;605      {
;;;606        assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;607        /* TI1 Configuration */
;;;608        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
0004b8  8849              LDRH     r1,[r1,#2]
0004ba  88aa              LDRH     r2,[r5,#4]
0004bc  892b              LDRH     r3,[r5,#8]
0004be  f04f4a80          MOV      r10,#0x40000000       ;595
0004c2  b348              CBZ      r0,|L1.1304|
;;;609                   TIM_ICInitStruct->TIM_ICSelection,
;;;610                   TIM_ICInitStruct->TIM_ICFilter);
;;;611        /* Set the Input Capture Prescaler value */
;;;612        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;613      }
;;;614      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
0004c4  2804              CMP      r0,#4
0004c6  d02f              BEQ      |L1.1320|
0004c8  f64f76ff          MOV      r6,#0xffff
;;;615      {
;;;616        assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;617        /* TI2 Configuration */
;;;618        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
;;;619                   TIM_ICInitStruct->TIM_ICSelection,
;;;620                   TIM_ICInitStruct->TIM_ICFilter);
;;;621        /* Set the Input Capture Prescaler value */
;;;622        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;623      }
;;;624      else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
0004cc  2808              CMP      r0,#8
;;;625      {
;;;626        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;627        /* TI3 Configuration */
;;;628        TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
;;;629                   TIM_ICInitStruct->TIM_ICSelection,
;;;630                   TIM_ICInitStruct->TIM_ICFilter);
;;;631        /* Set the Input Capture Prescaler value */
;;;632        TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;633      }
;;;634      else
;;;635      {
;;;636        assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;637        /* TI4 Configuration */
;;;638        TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
0004ce  4693              MOV      r11,r2
0004d0  d032              BEQ      |L1.1336|
0004d2  8c20              LDRH     r0,[r4,#0x20]         ;624
0004d4  469e              MOV      lr,r3
0004d6  f4205080          BIC      r0,r0,#0x1000
0004da  8420              STRH     r0,[r4,#0x20]
0004dc  8ba3              LDRH     r3,[r4,#0x1c]
0004de  8c20              LDRH     r0,[r4,#0x20]
0004e0  ea063201          AND      r2,r6,r1,LSL #12
0004e4  9200              STR      r2,[sp,#0]
0004e6  f4234373          BIC      r3,r3,#0xf300
0004ea  ea06220b          AND      r2,r6,r11,LSL #8
0004ee  431a              ORRS     r2,r2,r3
0004f0  ea06330e          AND      r3,r6,lr,LSL #12
0004f4  4313              ORRS     r3,r3,r2
0004f6  42bc              CMP      r4,r7
0004f8  d00a              BEQ      |L1.1296|
0004fa  4564              CMP      r4,r12
0004fc  d008              BEQ      |L1.1296|
0004fe  4554              CMP      r4,r10
000500  d006              BEQ      |L1.1296|
000502  4544              CMP      r4,r8
000504  d004              BEQ      |L1.1296|
000506  454c              CMP      r4,r9
000508  d002              BEQ      |L1.1296|
00050a  4ad3              LDR      r2,|L1.2136|
00050c  4294              CMP      r4,r2
00050e  d142              BNE      |L1.1430|
                  |L1.1296|
000510  f4205000          BIC      r0,r0,#0x2000
000514  9900              LDR      r1,[sp,#0]
000516  e040              B        |L1.1434|
                  |L1.1304|
000518  4620              MOV      r0,r4                 ;608
00051a  f7fffffe          BL       TI1_Config
00051e  88e9              LDRH     r1,[r5,#6]            ;612
000520  4620              MOV      r0,r4                 ;612
000522  e8bd4ff8          POP      {r3-r11,lr}           ;612
000526  e7fe              B        TIM_SetIC1Prescaler
                  |L1.1320|
000528  4620              MOV      r0,r4                 ;618
00052a  f7fffffe          BL       TI2_Config
00052e  88e9              LDRH     r1,[r5,#6]            ;622
000530  4620              MOV      r0,r4                 ;622
000532  e8bd4ff8          POP      {r3-r11,lr}           ;622
000536  e7fe              B        TIM_SetIC2Prescaler
                  |L1.1336|
000538  8c20              LDRH     r0,[r4,#0x20]         ;622
00053a  f4207080          BIC      r0,r0,#0x100          ;622
00053e  8420              STRH     r0,[r4,#0x20]         ;622
000540  f8b4e01c          LDRH     lr,[r4,#0x1c]         ;622
000544  8c20              LDRH     r0,[r4,#0x20]         ;622
000546  ea061303          AND      r3,r6,r3,LSL #4       ;622
00054a  ea062201          AND      r2,r6,r1,LSL #8       ;622
00054e  f02e0ef3          BIC      lr,lr,#0xf3           ;622
000552  ea43030b          ORR      r3,r3,r11             ;622
000556  ea43030e          ORR      r3,r3,lr              ;622
00055a  9200              STR      r2,[sp,#0]            ;622
00055c  42bc              CMP      r4,r7                 ;622
00055e  d00a              BEQ      |L1.1398|
000560  4564              CMP      r4,r12                ;628
000562  d008              BEQ      |L1.1398|
000564  4554              CMP      r4,r10                ;628
000566  d006              BEQ      |L1.1398|
000568  4544              CMP      r4,r8                 ;628
00056a  d004              BEQ      |L1.1398|
00056c  454c              CMP      r4,r9                 ;628
00056e  d002              BEQ      |L1.1398|
000570  4ab9              LDR      r2,|L1.2136|
000572  4294              CMP      r4,r2                 ;628
000574  d103              BNE      |L1.1406|
                  |L1.1398|
000576  f4207000          BIC      r0,r0,#0x200          ;628
00057a  9900              LDR      r1,[sp,#0]            ;628
00057c  e001              B        |L1.1410|
                  |L1.1406|
00057e  f4206020          BIC      r0,r0,#0xa00          ;628
                  |L1.1410|
000582  4308              ORRS     r0,r0,r1              ;628
000584  f4407080          ORR      r0,r0,#0x100          ;628
000588  83a3              STRH     r3,[r4,#0x1c]         ;628
00058a  8420              STRH     r0,[r4,#0x20]         ;628
00058c  88e9              LDRH     r1,[r5,#6]            ;632
00058e  4620              MOV      r0,r4                 ;632
000590  e8bd4ff8          POP      {r3-r11,lr}           ;632
000594  e7fe              B        TIM_SetIC3Prescaler
                  |L1.1430|
000596  f4204002          BIC      r0,r0,#0x8200         ;632
                  |L1.1434|
00059a  4308              ORRS     r0,r0,r1              ;632
00059c  f4405080          ORR      r0,r0,#0x1000         ;632
0005a0  83a3              STRH     r3,[r4,#0x1c]         ;632
0005a2  8420              STRH     r0,[r4,#0x20]         ;632
;;;639                   TIM_ICInitStruct->TIM_ICSelection,
;;;640                   TIM_ICInitStruct->TIM_ICFilter);
;;;641        /* Set the Input Capture Prescaler value */
;;;642        TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0005a4  88e9              LDRH     r1,[r5,#6]
0005a6  4620              MOV      r0,r4
0005a8  e8bd4ff8          POP      {r3-r11,lr}
0005ac  e7fe              B        TIM_SetIC4Prescaler
;;;643      }
;;;644    }
;;;645    
                          ENDP

                  TIM_PWMIConfig PROC
;;;653      */
;;;654    void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
0005ae  e92d41f0          PUSH     {r4-r8,lr}
;;;655    {
0005b2  460c              MOV      r4,r1
;;;656      uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
0005b4  2600              MOVS     r6,#0
;;;657      uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
;;;658      /* Check the parameters */
;;;659      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;660      /* Select the Opposite Input Polarity */
;;;661      if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
0005b6  8849              LDRH     r1,[r1,#2]
0005b8  4607              MOV      r7,r0                 ;655
0005ba  2501              MOVS     r5,#1                 ;657
0005bc  b901              CBNZ     r1,|L1.1472|
;;;662      {
;;;663        icoppositepolarity = TIM_ICPolarity_Falling;
0005be  2602              MOVS     r6,#2
                  |L1.1472|
;;;664      }
;;;665      else
;;;666      {
;;;667        icoppositepolarity = TIM_ICPolarity_Rising;
;;;668      }
;;;669      /* Select the Opposite Input */
;;;670      if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
0005c0  88a2              LDRH     r2,[r4,#4]
0005c2  2a01              CMP      r2,#1
0005c4  d100              BNE      |L1.1480|
;;;671      {
;;;672        icoppositeselection = TIM_ICSelection_IndirectTI;
0005c6  2502              MOVS     r5,#2
                  |L1.1480|
;;;673      }
;;;674      else
;;;675      {
;;;676        icoppositeselection = TIM_ICSelection_DirectTI;
;;;677      }
;;;678      if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
0005c8  8820              LDRH     r0,[r4,#0]
;;;679      {
;;;680        /* TI1 Configuration */
;;;681        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
0005ca  8923              LDRH     r3,[r4,#8]
0005cc  2800              CMP      r0,#0                 ;678
;;;682                   TIM_ICInitStruct->TIM_ICFilter);
;;;683        /* Set the Input Capture Prescaler value */
;;;684        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;685        /* TI2 Configuration */
;;;686        TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
;;;687        /* Set the Input Capture Prescaler value */
;;;688        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
;;;689      }
;;;690      else
;;;691      { 
;;;692        /* TI2 Configuration */
;;;693        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
0005ce  4638              MOV      r0,r7
0005d0  d010              BEQ      |L1.1524|
0005d2  f7fffffe          BL       TI2_Config
;;;694                   TIM_ICInitStruct->TIM_ICFilter);
;;;695        /* Set the Input Capture Prescaler value */
;;;696        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0005d6  88e1              LDRH     r1,[r4,#6]
0005d8  4638              MOV      r0,r7
0005da  f7fffffe          BL       TIM_SetIC2Prescaler
;;;697        /* TI1 Configuration */
;;;698        TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
0005de  8923              LDRH     r3,[r4,#8]
0005e0  462a              MOV      r2,r5
0005e2  4631              MOV      r1,r6
0005e4  4638              MOV      r0,r7
0005e6  f7fffffe          BL       TI1_Config
;;;699        /* Set the Input Capture Prescaler value */
;;;700        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
0005ea  88e1              LDRH     r1,[r4,#6]
0005ec  4638              MOV      r0,r7
0005ee  e8bd41f0          POP      {r4-r8,lr}
0005f2  e7fe              B        TIM_SetIC1Prescaler
                  |L1.1524|
0005f4  f7fffffe          BL       TI1_Config
0005f8  88e1              LDRH     r1,[r4,#6]            ;684
0005fa  4638              MOV      r0,r7                 ;684
0005fc  f7fffffe          BL       TIM_SetIC1Prescaler
000600  8923              LDRH     r3,[r4,#8]            ;686
000602  462a              MOV      r2,r5                 ;686
000604  4631              MOV      r1,r6                 ;686
000606  4638              MOV      r0,r7                 ;686
000608  f7fffffe          BL       TI2_Config
00060c  88e1              LDRH     r1,[r4,#6]            ;688
00060e  4638              MOV      r0,r7                 ;688
000610  e8bd41f0          POP      {r4-r8,lr}            ;688
000614  e7fe              B        TIM_SetIC2Prescaler
;;;701      }
;;;702    }
;;;703    
                          ENDP

                  TIM_BDTRConfig PROC
;;;711      */
;;;712    void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
000616  b510              PUSH     {r4,lr}
;;;713    {
;;;714      /* Check the parameters */
;;;715      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;716      assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
;;;717      assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
;;;718      assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
;;;719      assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
;;;720      assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
;;;721      assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
;;;722      /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
;;;723         the OSSI State, the dead time value and the Automatic Output Enable Bit */
;;;724      TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
000618  880a              LDRH     r2,[r1,#0]
00061a  884b              LDRH     r3,[r1,#2]
00061c  88cc              LDRH     r4,[r1,#6]
00061e  431a              ORRS     r2,r2,r3
000620  888b              LDRH     r3,[r1,#4]
000622  4323              ORRS     r3,r3,r4
000624  431a              ORRS     r2,r2,r3
000626  890b              LDRH     r3,[r1,#8]
000628  431a              ORRS     r2,r2,r3
00062a  894b              LDRH     r3,[r1,#0xa]
00062c  8989              LDRH     r1,[r1,#0xc]
00062e  431a              ORRS     r2,r2,r3
000630  430a              ORRS     r2,r2,r1
000632  f8a02044          STRH     r2,[r0,#0x44]
;;;725                 TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
;;;726                 TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
;;;727                 TIM_BDTRInitStruct->TIM_AutomaticOutput;
;;;728    }
000636  bd10              POP      {r4,pc}
;;;729    
                          ENDP

                  TIM_TimeBaseStructInit PROC
;;;735      */
;;;736    void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
000638  f64f71ff          MOV      r1,#0xffff
;;;737    {
;;;738      /* Set the default configuration */
;;;739      TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
00063c  8081              STRH     r1,[r0,#4]
;;;740      TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
00063e  2100              MOVS     r1,#0
000640  8001              STRH     r1,[r0,#0]
;;;741      TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
000642  80c1              STRH     r1,[r0,#6]
;;;742      TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
000644  8041              STRH     r1,[r0,#2]
;;;743      TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
000646  7201              STRB     r1,[r0,#8]
;;;744    }
000648  4770              BX       lr
;;;745    
                          ENDP

                  TIM_OCStructInit PROC
;;;751      */
;;;752    void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
00064a  2100              MOVS     r1,#0
;;;753    {
;;;754      /* Set the default configuration */
;;;755      TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
00064c  8001              STRH     r1,[r0,#0]
;;;756      TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
00064e  8041              STRH     r1,[r0,#2]
;;;757      TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
000650  8081              STRH     r1,[r0,#4]
;;;758      TIM_OCInitStruct->TIM_Pulse = 0x0000;
000652  80c1              STRH     r1,[r0,#6]
;;;759      TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
000654  8101              STRH     r1,[r0,#8]
;;;760      TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
000656  8141              STRH     r1,[r0,#0xa]
;;;761      TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
000658  8181              STRH     r1,[r0,#0xc]
;;;762      TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
00065a  81c1              STRH     r1,[r0,#0xe]
;;;763    }
00065c  4770              BX       lr
;;;764    
                          ENDP

                  TIM_ICStructInit PROC
;;;770      */
;;;771    void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
00065e  2100              MOVS     r1,#0
;;;772    {
;;;773      /* Set the default configuration */
;;;774      TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
000660  8001              STRH     r1,[r0,#0]
;;;775      TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
000662  8041              STRH     r1,[r0,#2]
;;;776      TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
000664  2201              MOVS     r2,#1
000666  8082              STRH     r2,[r0,#4]
;;;777      TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
000668  80c1              STRH     r1,[r0,#6]
;;;778      TIM_ICInitStruct->TIM_ICFilter = 0x00;
00066a  8101              STRH     r1,[r0,#8]
;;;779    }
00066c  4770              BX       lr
;;;780    
                          ENDP

                  TIM_BDTRStructInit PROC
;;;786      */
;;;787    void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
00066e  2100              MOVS     r1,#0
;;;788    {
;;;789      /* Set the default configuration */
;;;790      TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
000670  8001              STRH     r1,[r0,#0]
;;;791      TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
000672  8041              STRH     r1,[r0,#2]
;;;792      TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
000674  8081              STRH     r1,[r0,#4]
;;;793      TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
000676  80c1              STRH     r1,[r0,#6]
;;;794      TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
000678  8101              STRH     r1,[r0,#8]
;;;795      TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
00067a  8141              STRH     r1,[r0,#0xa]
;;;796      TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
00067c  8181              STRH     r1,[r0,#0xc]
;;;797    }
00067e  4770              BX       lr
;;;798    
                          ENDP

                  TIM_Cmd PROC
;;;805      */
;;;806    void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
000680  2900              CMP      r1,#0
;;;807    {
;;;808      /* Check the parameters */
;;;809      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;810      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;811      
;;;812      if (NewState != DISABLE)
;;;813      {
;;;814        /* Enable the TIM Counter */
;;;815        TIMx->CR1 |= TIM_CR1_CEN;
;;;816      }
;;;817      else
;;;818      {
;;;819        /* Disable the TIM Counter */
;;;820        TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
000682  8801              LDRH     r1,[r0,#0]
000684  d002              BEQ      |L1.1676|
000686  f0410101          ORR      r1,r1,#1              ;815
00068a  e001              B        |L1.1680|
                  |L1.1676|
00068c  f0210101          BIC      r1,r1,#1
                  |L1.1680|
000690  8001              STRH     r1,[r0,#0]            ;815
;;;821      }
;;;822    }
000692  4770              BX       lr
;;;823    
                          ENDP

                  TIM_CtrlPWMOutputs PROC
;;;830      */
;;;831    void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
000694  2900              CMP      r1,#0
;;;832    {
;;;833      /* Check the parameters */
;;;834      assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;835      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;836      if (NewState != DISABLE)
;;;837      {
;;;838        /* Enable the TIM Main Output */
;;;839        TIMx->BDTR |= TIM_BDTR_MOE;
;;;840      }
;;;841      else
;;;842      {
;;;843        /* Disable the TIM Main Output */
;;;844        TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
000696  f8301f44          LDRH     r1,[r0,#0x44]!
00069a  d002              BEQ      |L1.1698|
00069c  f4414100          ORR      r1,r1,#0x8000         ;839
0006a0  e001              B        |L1.1702|
                  |L1.1698|
0006a2  f3c1010e          UBFX     r1,r1,#0,#15
                  |L1.1702|
0006a6  8001              STRH     r1,[r0,#0]            ;839
;;;845      }  
;;;846    }
0006a8  4770              BX       lr
;;;847    
                          ENDP

                  TIM_ITConfig PROC
;;;871      */
;;;872    void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
0006aa  2a00              CMP      r2,#0
;;;873    {  
;;;874      /* Check the parameters */
;;;875      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;876      assert_param(IS_TIM_IT(TIM_IT));
;;;877      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;878      
;;;879      if (NewState != DISABLE)
;;;880      {
;;;881        /* Enable the Interrupt sources */
;;;882        TIMx->DIER |= TIM_IT;
;;;883      }
;;;884      else
;;;885      {
;;;886        /* Disable the Interrupt sources */
;;;887        TIMx->DIER &= (uint16_t)~TIM_IT;
0006ac  8982              LDRH     r2,[r0,#0xc]
0006ae  d001              BEQ      |L1.1716|
0006b0  430a              ORRS     r2,r2,r1              ;882
0006b2  e000              B        |L1.1718|
                  |L1.1716|
0006b4  438a              BICS     r2,r2,r1
                  |L1.1718|
0006b6  8182              STRH     r2,[r0,#0xc]          ;882
;;;888      }
;;;889    }
0006b8  4770              BX       lr
;;;890    
                          ENDP

                  TIM_GenerateEvent PROC
;;;908      */
;;;909    void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
0006ba  8281              STRH     r1,[r0,#0x14]
;;;910    { 
;;;911      /* Check the parameters */
;;;912      assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;913      assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
;;;914      
;;;915      /* Set the event sources */
;;;916      TIMx->EGR = TIM_EventSource;
;;;917    }
0006bc  4770              BX       lr
;;;918    
                          ENDP

                  TIM_DMAConfig PROC
;;;936      */
;;;937    void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
0006be  4311              ORRS     r1,r1,r2
;;;938    {
;;;939      /* Check the parameters */
;;;940      assert_param(IS_TIM_LIST4_PERIPH(TIMx));
;;;941      assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
;;;942      assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
;;;943      /* Set the DMA Base and the DMA Burst Length */
;;;944      TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
0006c0  f8a01048          STRH     r1,[r0,#0x48]
;;;945    }
0006c4  4770              BX       lr
;;;946    
                          ENDP

                  TIM_DMACmd PROC
;;;963      */
;;;964    void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
0006c6  2a00              CMP      r2,#0
;;;965    { 
;;;966      /* Check the parameters */
;;;967      assert_param(IS_TIM_LIST9_PERIPH(TIMx));
;;;968      assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
;;;969      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;970      
;;;971      if (NewState != DISABLE)
;;;972      {
;;;973        /* Enable the DMA sources */
;;;974        TIMx->DIER |= TIM_DMASource; 
;;;975      }
;;;976      else
;;;977      {
;;;978        /* Disable the DMA sources */
;;;979        TIMx->DIER &= (uint16_t)~TIM_DMASource;
0006c8  8982              LDRH     r2,[r0,#0xc]
0006ca  d001              BEQ      |L1.1744|
0006cc  430a              ORRS     r2,r2,r1              ;974
0006ce  e000              B        |L1.1746|
                  |L1.1744|
0006d0  438a              BICS     r2,r2,r1
                  |L1.1746|
0006d2  8182              STRH     r2,[r0,#0xc]          ;974
;;;980      }
;;;981    }
0006d4  4770              BX       lr
;;;982    
                          ENDP

                  TIM_InternalClockConfig PROC
;;;988      */
;;;989    void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
0006d6  8901              LDRH     r1,[r0,#8]
;;;990    {
;;;991      /* Check the parameters */
;;;992      assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;993      /* Disable slave mode to clock the prescaler directly with the internal clock */
;;;994      TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
0006d8  f0210107          BIC      r1,r1,#7
0006dc  8101              STRH     r1,[r0,#8]
;;;995    }
0006de  4770              BX       lr
;;;996    
                          ENDP

                  TIM_SelectInputTrigger PROC
;;;1228     */
;;;1229   void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
0006e0  8902              LDRH     r2,[r0,#8]
;;;1230   {
;;;1231     uint16_t tmpsmcr = 0;
;;;1232     /* Check the parameters */
;;;1233     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1234     assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1235     /* Get the TIMx SMCR register value */
;;;1236     tmpsmcr = TIMx->SMCR;
;;;1237     /* Reset the TS Bits */
;;;1238     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
0006e2  f0220270          BIC      r2,r2,#0x70
;;;1239     /* Set the Input Trigger source */
;;;1240     tmpsmcr |= TIM_InputTriggerSource;
0006e6  430a              ORRS     r2,r2,r1
;;;1241     /* Write to TIMx SMCR */
;;;1242     TIMx->SMCR = tmpsmcr;
0006e8  8102              STRH     r2,[r0,#8]
;;;1243   }
0006ea  4770              BX       lr
;;;1244   
                          ENDP

                  TIM_ITRxExternalClockConfig PROC
;;;1007     */
;;;1008   void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
0006ec  b500              PUSH     {lr}
;;;1009   {
0006ee  4603              MOV      r3,r0
;;;1010     /* Check the parameters */
;;;1011     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1012     assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
;;;1013     /* Select the Internal Trigger */
;;;1014     TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
0006f0  f7fffffe          BL       TIM_SelectInputTrigger
;;;1015     /* Select the External clock mode1 */
;;;1016     TIMx->SMCR |= TIM_SlaveMode_External1;
0006f4  8918              LDRH     r0,[r3,#8]
0006f6  f0400007          ORR      r0,r0,#7
0006fa  8118              STRH     r0,[r3,#8]
;;;1017   }
0006fc  bd00              POP      {pc}
;;;1018   
                          ENDP

                  TIM_TIxExternalClockConfig PROC
;;;1034     */
;;;1035   void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
0006fe  b570              PUSH     {r4-r6,lr}
;;;1036                                   uint16_t TIM_ICPolarity, uint16_t ICFilter)
;;;1037   {
000700  4616              MOV      r6,r2
000702  460d              MOV      r5,r1
;;;1038     /* Check the parameters */
;;;1039     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1040     assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
;;;1041     assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
;;;1042     assert_param(IS_TIM_IC_FILTER(ICFilter));
;;;1043     /* Configure the Timer Input Clock Source */
;;;1044     if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
000704  2960              CMP      r1,#0x60
000706  4604              MOV      r4,r0                 ;1037
;;;1045     {
;;;1046       TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
;;;1047     }
;;;1048     else
;;;1049     {
;;;1050       TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
000708  f04f0201          MOV      r2,#1
00070c  4631              MOV      r1,r6
00070e  d00a              BEQ      |L1.1830|
000710  f7fffffe          BL       TI1_Config
                  |L1.1812|
;;;1051     }
;;;1052     /* Select the Trigger source */
;;;1053     TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
000714  4629              MOV      r1,r5
000716  4620              MOV      r0,r4
000718  f7fffffe          BL       TIM_SelectInputTrigger
;;;1054     /* Select the External clock mode1 */
;;;1055     TIMx->SMCR |= TIM_SlaveMode_External1;
00071c  8920              LDRH     r0,[r4,#8]
00071e  f0400007          ORR      r0,r0,#7
000722  8120              STRH     r0,[r4,#8]
;;;1056   }
000724  bd70              POP      {r4-r6,pc}
                  |L1.1830|
000726  f7fffffe          BL       TI2_Config
00072a  e7f3              B        |L1.1812|
;;;1057   
                          ENDP

                  TIM_ETRConfig PROC
;;;1147     */
;;;1148   void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
00072c  b530              PUSH     {r4,r5,lr}
;;;1149                      uint16_t ExtTRGFilter)
;;;1150   {
;;;1151     uint16_t tmpsmcr = 0;
;;;1152     /* Check the parameters */
;;;1153     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1154     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1155     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1156     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1157     tmpsmcr = TIMx->SMCR;
00072e  8904              LDRH     r4,[r0,#8]
;;;1158     /* Reset the ETR Bits */
;;;1159     tmpsmcr &= SMCR_ETR_Mask;
;;;1160     /* Set the Prescaler, the Filter value and the Polarity */
;;;1161     tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
000730  f64f75ff          MOV      r5,#0xffff
000734  ea052303          AND      r3,r5,r3,LSL #8
000738  4313              ORRS     r3,r3,r2
00073a  b2e4              UXTB     r4,r4                 ;1159
00073c  430b              ORRS     r3,r3,r1
00073e  4323              ORRS     r3,r3,r4
;;;1162     /* Write to TIMx SMCR */
;;;1163     TIMx->SMCR = tmpsmcr;
000740  8103              STRH     r3,[r0,#8]
;;;1164   }
000742  bd30              POP      {r4,r5,pc}
;;;1165   
                          ENDP

                  TIM_ETRClockMode1Config PROC
;;;1074     */
;;;1075   void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
000744  b510              PUSH     {r4,lr}
;;;1076                                uint16_t ExtTRGFilter)
;;;1077   {
000746  4604              MOV      r4,r0
;;;1078     uint16_t tmpsmcr = 0;
;;;1079     /* Check the parameters */
;;;1080     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1081     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1082     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1083     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1084     /* Configure the ETR Clock source */
;;;1085     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
000748  f7fffffe          BL       TIM_ETRConfig
;;;1086     
;;;1087     /* Get the TIMx SMCR register value */
;;;1088     tmpsmcr = TIMx->SMCR;
00074c  8920              LDRH     r0,[r4,#8]
;;;1089     /* Reset the SMS Bits */
;;;1090     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
;;;1091     /* Select the External clock mode1 */
;;;1092     tmpsmcr |= TIM_SlaveMode_External1;
;;;1093     /* Select the Trigger selection : ETRF */
;;;1094     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
;;;1095     tmpsmcr |= TIM_TS_ETRF;
00074e  f0400077          ORR      r0,r0,#0x77
;;;1096     /* Write to TIMx SMCR */
;;;1097     TIMx->SMCR = tmpsmcr;
000752  8120              STRH     r0,[r4,#8]
;;;1098   }
000754  bd10              POP      {r4,pc}
;;;1099   
                          ENDP

                  TIM_ETRClockMode2Config PROC
;;;1116     */
;;;1117   void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
000756  b510              PUSH     {r4,lr}
;;;1118                                uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
;;;1119   {
000758  4604              MOV      r4,r0
;;;1120     /* Check the parameters */
;;;1121     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1122     assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
;;;1123     assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
;;;1124     assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
;;;1125     /* Configure the ETR Clock source */
;;;1126     TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
00075a  f7fffffe          BL       TIM_ETRConfig
;;;1127     /* Enable the External clock mode2 */
;;;1128     TIMx->SMCR |= TIM_SMCR_ECE;
00075e  8920              LDRH     r0,[r4,#8]
000760  f4404080          ORR      r0,r0,#0x4000
000764  8120              STRH     r0,[r4,#8]
;;;1129   }
000766  bd10              POP      {r4,pc}
;;;1130   
                          ENDP

                  TIM_PrescalerConfig PROC
;;;1175     */
;;;1176   void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
000768  8501              STRH     r1,[r0,#0x28]
;;;1177   {
;;;1178     /* Check the parameters */
;;;1179     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;1180     assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
;;;1181     /* Set the Prescaler value */
;;;1182     TIMx->PSC = Prescaler;
;;;1183     /* Set or reset the UG Bit */
;;;1184     TIMx->EGR = TIM_PSCReloadMode;
00076a  8282              STRH     r2,[r0,#0x14]
;;;1185   }
00076c  4770              BX       lr
;;;1186   
                          ENDP

                  TIM_CounterModeConfig PROC
;;;1198     */
;;;1199   void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
00076e  8802              LDRH     r2,[r0,#0]
;;;1200   {
;;;1201     uint16_t tmpcr1 = 0;
;;;1202     /* Check the parameters */
;;;1203     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1204     assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
;;;1205     tmpcr1 = TIMx->CR1;
;;;1206     /* Reset the CMS and DIR Bits */
;;;1207     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
000770  f0220270          BIC      r2,r2,#0x70
;;;1208     /* Set the Counter Mode */
;;;1209     tmpcr1 |= TIM_CounterMode;
000774  430a              ORRS     r2,r2,r1
;;;1210     /* Write to TIMx CR1 register */
;;;1211     TIMx->CR1 = tmpcr1;
000776  8002              STRH     r2,[r0,#0]
;;;1212   }
000778  4770              BX       lr
;;;1213   
                          ENDP

                  TIM_EncoderInterfaceConfig PROC
;;;1263     */
;;;1264   void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
00077a  b570              PUSH     {r4-r6,lr}
;;;1265                                   uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
;;;1266   {
;;;1267     uint16_t tmpsmcr = 0;
;;;1268     uint16_t tmpccmr1 = 0;
;;;1269     uint16_t tmpccer = 0;
;;;1270       
;;;1271     /* Check the parameters */
;;;1272     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
;;;1273     assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
;;;1274     assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
;;;1275     assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
;;;1276   
;;;1277     /* Get the TIMx SMCR register value */
;;;1278     tmpsmcr = TIMx->SMCR;
00077c  8905              LDRH     r5,[r0,#8]
;;;1279     
;;;1280     /* Get the TIMx CCMR1 register value */
;;;1281     tmpccmr1 = TIMx->CCMR1;
00077e  8b04              LDRH     r4,[r0,#0x18]
;;;1282     
;;;1283     /* Get the TIMx CCER register value */
;;;1284     tmpccer = TIMx->CCER;
000780  8c06              LDRH     r6,[r0,#0x20]
;;;1285     
;;;1286     /* Set the encoder Mode */
;;;1287     tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
000782  f0250507          BIC      r5,r5,#7
;;;1288     tmpsmcr |= TIM_EncoderMode;
000786  430d              ORRS     r5,r5,r1
;;;1289     
;;;1290     /* Select the Capture Compare 1 and the Capture Compare 2 as input */
;;;1291     tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
000788  f64f41fc          MOV      r1,#0xfcfc
00078c  400c              ANDS     r4,r4,r1
;;;1292     tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
00078e  f2401101          MOV      r1,#0x101
000792  430c              ORRS     r4,r4,r1
;;;1293     
;;;1294     /* Set the TI1 and the TI2 Polarities */
;;;1295     tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
;;;1296     tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
000794  f64f71ff          MOV      r1,#0xffff
000798  ea011103          AND      r1,r1,r3,LSL #4
00079c  f0260622          BIC      r6,r6,#0x22           ;1295
0007a0  4311              ORRS     r1,r1,r2
0007a2  4331              ORRS     r1,r1,r6
;;;1297     
;;;1298     /* Write to TIMx SMCR */
;;;1299     TIMx->SMCR = tmpsmcr;
0007a4  8105              STRH     r5,[r0,#8]
;;;1300     /* Write to TIMx CCMR1 */
;;;1301     TIMx->CCMR1 = tmpccmr1;
0007a6  8304              STRH     r4,[r0,#0x18]
;;;1302     /* Write to TIMx CCER */
;;;1303     TIMx->CCER = tmpccer;
0007a8  8401              STRH     r1,[r0,#0x20]
;;;1304   }
0007aa  bd70              POP      {r4-r6,pc}
;;;1305   
                          ENDP

                  TIM_ForcedOC1Config PROC
;;;1314     */
;;;1315   void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
0007ac  8b02              LDRH     r2,[r0,#0x18]
;;;1316   {
;;;1317     uint16_t tmpccmr1 = 0;
;;;1318     /* Check the parameters */
;;;1319     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1320     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1321     tmpccmr1 = TIMx->CCMR1;
;;;1322     /* Reset the OC1M Bits */
;;;1323     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
0007ae  f0220270          BIC      r2,r2,#0x70
;;;1324     /* Configure The Forced output Mode */
;;;1325     tmpccmr1 |= TIM_ForcedAction;
0007b2  430a              ORRS     r2,r2,r1
;;;1326     /* Write to TIMx CCMR1 register */
;;;1327     TIMx->CCMR1 = tmpccmr1;
0007b4  8302              STRH     r2,[r0,#0x18]
;;;1328   }
0007b6  4770              BX       lr
;;;1329   
                          ENDP

                  TIM_ForcedOC2Config PROC
;;;1338     */
;;;1339   void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
0007b8  8b02              LDRH     r2,[r0,#0x18]
;;;1340   {
;;;1341     uint16_t tmpccmr1 = 0;
;;;1342     /* Check the parameters */
;;;1343     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1344     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1345     tmpccmr1 = TIMx->CCMR1;
;;;1346     /* Reset the OC2M Bits */
;;;1347     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
;;;1348     /* Configure The Forced output Mode */
;;;1349     tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
0007ba  f64f73ff          MOV      r3,#0xffff
0007be  f42242e0          BIC      r2,r2,#0x7000         ;1347
0007c2  ea032101          AND      r1,r3,r1,LSL #8
0007c6  4311              ORRS     r1,r1,r2
;;;1350     /* Write to TIMx CCMR1 register */
;;;1351     TIMx->CCMR1 = tmpccmr1;
0007c8  8301              STRH     r1,[r0,#0x18]
;;;1352   }
0007ca  4770              BX       lr
;;;1353   
                          ENDP

                  TIM_ForcedOC3Config PROC
;;;1362     */
;;;1363   void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
0007cc  8b82              LDRH     r2,[r0,#0x1c]
;;;1364   {
;;;1365     uint16_t tmpccmr2 = 0;
;;;1366     /* Check the parameters */
;;;1367     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1368     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1369     tmpccmr2 = TIMx->CCMR2;
;;;1370     /* Reset the OC1M Bits */
;;;1371     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
0007ce  f0220270          BIC      r2,r2,#0x70
;;;1372     /* Configure The Forced output Mode */
;;;1373     tmpccmr2 |= TIM_ForcedAction;
0007d2  430a              ORRS     r2,r2,r1
;;;1374     /* Write to TIMx CCMR2 register */
;;;1375     TIMx->CCMR2 = tmpccmr2;
0007d4  8382              STRH     r2,[r0,#0x1c]
;;;1376   }
0007d6  4770              BX       lr
;;;1377   
                          ENDP

                  TIM_ForcedOC4Config PROC
;;;1386     */
;;;1387   void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
0007d8  8b82              LDRH     r2,[r0,#0x1c]
;;;1388   {
;;;1389     uint16_t tmpccmr2 = 0;
;;;1390     /* Check the parameters */
;;;1391     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1392     assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
;;;1393     tmpccmr2 = TIMx->CCMR2;
;;;1394     /* Reset the OC2M Bits */
;;;1395     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
;;;1396     /* Configure The Forced output Mode */
;;;1397     tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
0007da  f64f73ff          MOV      r3,#0xffff
0007de  f42242e0          BIC      r2,r2,#0x7000         ;1395
0007e2  ea032101          AND      r1,r3,r1,LSL #8
0007e6  4311              ORRS     r1,r1,r2
;;;1398     /* Write to TIMx CCMR2 register */
;;;1399     TIMx->CCMR2 = tmpccmr2;
0007e8  8381              STRH     r1,[r0,#0x1c]
;;;1400   }
0007ea  4770              BX       lr
;;;1401   
                          ENDP

                  TIM_ARRPreloadConfig PROC
;;;1408     */
;;;1409   void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
0007ec  2900              CMP      r1,#0
;;;1410   {
;;;1411     /* Check the parameters */
;;;1412     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;1413     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1414     if (NewState != DISABLE)
;;;1415     {
;;;1416       /* Set the ARR Preload Bit */
;;;1417       TIMx->CR1 |= TIM_CR1_ARPE;
;;;1418     }
;;;1419     else
;;;1420     {
;;;1421       /* Reset the ARR Preload Bit */
;;;1422       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
0007ee  8801              LDRH     r1,[r0,#0]
0007f0  d002              BEQ      |L1.2040|
0007f2  f0410180          ORR      r1,r1,#0x80           ;1417
0007f6  e001              B        |L1.2044|
                  |L1.2040|
0007f8  f0210180          BIC      r1,r1,#0x80
                  |L1.2044|
0007fc  8001              STRH     r1,[r0,#0]            ;1417
;;;1423     }
;;;1424   }
0007fe  4770              BX       lr
;;;1425   
                          ENDP

                  TIM_SelectCOM PROC
;;;1432     */
;;;1433   void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
000800  2900              CMP      r1,#0
;;;1434   {
;;;1435     /* Check the parameters */
;;;1436     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1437     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1438     if (NewState != DISABLE)
;;;1439     {
;;;1440       /* Set the COM Bit */
;;;1441       TIMx->CR2 |= TIM_CR2_CCUS;
;;;1442     }
;;;1443     else
;;;1444     {
;;;1445       /* Reset the COM Bit */
;;;1446       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
000802  8881              LDRH     r1,[r0,#4]
000804  d002              BEQ      |L1.2060|
000806  f0410104          ORR      r1,r1,#4              ;1441
00080a  e001              B        |L1.2064|
                  |L1.2060|
00080c  f0210104          BIC      r1,r1,#4
                  |L1.2064|
000810  8081              STRH     r1,[r0,#4]            ;1441
;;;1447     }
;;;1448   }
000812  4770              BX       lr
;;;1449   
                          ENDP

                  TIM_SelectCCDMA PROC
;;;1457     */
;;;1458   void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
000814  2900              CMP      r1,#0
;;;1459   {
;;;1460     /* Check the parameters */
;;;1461     assert_param(IS_TIM_LIST4_PERIPH(TIMx));
;;;1462     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1463     if (NewState != DISABLE)
;;;1464     {
;;;1465       /* Set the CCDS Bit */
;;;1466       TIMx->CR2 |= TIM_CR2_CCDS;
;;;1467     }
;;;1468     else
;;;1469     {
;;;1470       /* Reset the CCDS Bit */
;;;1471       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
000816  8881              LDRH     r1,[r0,#4]
000818  d002              BEQ      |L1.2080|
00081a  f0410108          ORR      r1,r1,#8              ;1466
00081e  e001              B        |L1.2084|
                  |L1.2080|
000820  f0210108          BIC      r1,r1,#8
                  |L1.2084|
000824  8081              STRH     r1,[r0,#4]            ;1466
;;;1472     }
;;;1473   }
000826  4770              BX       lr
;;;1474   
                          ENDP

                  TIM_CCPreloadControl PROC
;;;1482     */
;;;1483   void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
000828  2900              CMP      r1,#0
;;;1484   { 
;;;1485     /* Check the parameters */
;;;1486     assert_param(IS_TIM_LIST5_PERIPH(TIMx));
;;;1487     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1488     if (NewState != DISABLE)
;;;1489     {
;;;1490       /* Set the CCPC Bit */
;;;1491       TIMx->CR2 |= TIM_CR2_CCPC;
;;;1492     }
;;;1493     else
;;;1494     {
;;;1495       /* Reset the CCPC Bit */
;;;1496       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
00082a  8881              LDRH     r1,[r0,#4]
00082c  d002              BEQ      |L1.2100|
00082e  f0410101          ORR      r1,r1,#1              ;1491
000832  e001              B        |L1.2104|
                  |L1.2100|
000834  f0210101          BIC      r1,r1,#1
                  |L1.2104|
000838  8081              STRH     r1,[r0,#4]            ;1491
;;;1497     }
;;;1498   }
00083a  4770              BX       lr
;;;1499   
                          ENDP

                  TIM_OC1PreloadConfig PROC
;;;1508     */
;;;1509   void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
00083c  8b02              LDRH     r2,[r0,#0x18]
;;;1510   {
;;;1511     uint16_t tmpccmr1 = 0;
;;;1512     /* Check the parameters */
;;;1513     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1514     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1515     tmpccmr1 = TIMx->CCMR1;
;;;1516     /* Reset the OC1PE Bit */
;;;1517     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
00083e  f0220208          BIC      r2,r2,#8
;;;1518     /* Enable or Disable the Output Compare Preload feature */
;;;1519     tmpccmr1 |= TIM_OCPreload;
000842  430a              ORRS     r2,r2,r1
;;;1520     /* Write to TIMx CCMR1 register */
;;;1521     TIMx->CCMR1 = tmpccmr1;
000844  8302              STRH     r2,[r0,#0x18]
                  |L1.2118|
;;;1522   }
000846  4770              BX       lr
                  |L1.2120|
                          DCD      0x40012c00
                  |L1.2124|
                          DCD      0x40013400
                  |L1.2128|
                          DCD      0x40000400
                  |L1.2132|
                          DCD      0x40000800
                  |L1.2136|
                          DCD      0x40000c00
                          ENDP

                  TIM_OC2PreloadConfig PROC
;;;1533     */
;;;1534   void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
00085c  8b02              LDRH     r2,[r0,#0x18]
;;;1535   {
;;;1536     uint16_t tmpccmr1 = 0;
;;;1537     /* Check the parameters */
;;;1538     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1539     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1540     tmpccmr1 = TIMx->CCMR1;
;;;1541     /* Reset the OC2PE Bit */
;;;1542     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
;;;1543     /* Enable or Disable the Output Compare Preload feature */
;;;1544     tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
00085e  f64f73ff          MOV      r3,#0xffff
000862  f4226200          BIC      r2,r2,#0x800          ;1542
000866  ea032101          AND      r1,r3,r1,LSL #8
00086a  4311              ORRS     r1,r1,r2
;;;1545     /* Write to TIMx CCMR1 register */
;;;1546     TIMx->CCMR1 = tmpccmr1;
00086c  8301              STRH     r1,[r0,#0x18]
;;;1547   }
00086e  e7ea              B        |L1.2118|
;;;1548   
                          ENDP

                  TIM_OC3PreloadConfig PROC
;;;1557     */
;;;1558   void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
000870  8b82              LDRH     r2,[r0,#0x1c]
;;;1559   {
;;;1560     uint16_t tmpccmr2 = 0;
;;;1561     /* Check the parameters */
;;;1562     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1563     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1564     tmpccmr2 = TIMx->CCMR2;
;;;1565     /* Reset the OC3PE Bit */
;;;1566     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
000872  f0220208          BIC      r2,r2,#8
;;;1567     /* Enable or Disable the Output Compare Preload feature */
;;;1568     tmpccmr2 |= TIM_OCPreload;
000876  430a              ORRS     r2,r2,r1
;;;1569     /* Write to TIMx CCMR2 register */
;;;1570     TIMx->CCMR2 = tmpccmr2;
000878  8382              STRH     r2,[r0,#0x1c]
;;;1571   }
00087a  e7e4              B        |L1.2118|
;;;1572   
                          ENDP

                  TIM_OC4PreloadConfig PROC
;;;1581     */
;;;1582   void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
00087c  8b82              LDRH     r2,[r0,#0x1c]
;;;1583   {
;;;1584     uint16_t tmpccmr2 = 0;
;;;1585     /* Check the parameters */
;;;1586     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1587     assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
;;;1588     tmpccmr2 = TIMx->CCMR2;
;;;1589     /* Reset the OC4PE Bit */
;;;1590     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
;;;1591     /* Enable or Disable the Output Compare Preload feature */
;;;1592     tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
00087e  f64f73ff          MOV      r3,#0xffff
000882  f4226200          BIC      r2,r2,#0x800          ;1590
000886  ea032101          AND      r1,r3,r1,LSL #8
00088a  4311              ORRS     r1,r1,r2
;;;1593     /* Write to TIMx CCMR2 register */
;;;1594     TIMx->CCMR2 = tmpccmr2;
00088c  8381              STRH     r1,[r0,#0x1c]
;;;1595   }
00088e  e7da              B        |L1.2118|
;;;1596   
                          ENDP

                  TIM_OC1FastConfig PROC
;;;1605     */
;;;1606   void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
000890  8b02              LDRH     r2,[r0,#0x18]
;;;1607   {
;;;1608     uint16_t tmpccmr1 = 0;
;;;1609     /* Check the parameters */
;;;1610     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1611     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1612     /* Get the TIMx CCMR1 register value */
;;;1613     tmpccmr1 = TIMx->CCMR1;
;;;1614     /* Reset the OC1FE Bit */
;;;1615     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
000892  f0220204          BIC      r2,r2,#4
;;;1616     /* Enable or Disable the Output Compare Fast Bit */
;;;1617     tmpccmr1 |= TIM_OCFast;
000896  430a              ORRS     r2,r2,r1
;;;1618     /* Write to TIMx CCMR1 */
;;;1619     TIMx->CCMR1 = tmpccmr1;
000898  8302              STRH     r2,[r0,#0x18]
;;;1620   }
00089a  e7d4              B        |L1.2118|
;;;1621   
                          ENDP

                  TIM_OC2FastConfig PROC
;;;1631     */
;;;1632   void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
00089c  8b02              LDRH     r2,[r0,#0x18]
;;;1633   {
;;;1634     uint16_t tmpccmr1 = 0;
;;;1635     /* Check the parameters */
;;;1636     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1637     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1638     /* Get the TIMx CCMR1 register value */
;;;1639     tmpccmr1 = TIMx->CCMR1;
;;;1640     /* Reset the OC2FE Bit */
;;;1641     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
;;;1642     /* Enable or Disable the Output Compare Fast Bit */
;;;1643     tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
00089e  f64f73ff          MOV      r3,#0xffff
0008a2  f4226280          BIC      r2,r2,#0x400          ;1641
0008a6  ea032101          AND      r1,r3,r1,LSL #8
0008aa  4311              ORRS     r1,r1,r2
;;;1644     /* Write to TIMx CCMR1 */
;;;1645     TIMx->CCMR1 = tmpccmr1;
0008ac  8301              STRH     r1,[r0,#0x18]
;;;1646   }
0008ae  e7ca              B        |L1.2118|
;;;1647   
                          ENDP

                  TIM_OC3FastConfig PROC
;;;1656     */
;;;1657   void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
0008b0  8b82              LDRH     r2,[r0,#0x1c]
;;;1658   {
;;;1659     uint16_t tmpccmr2 = 0;
;;;1660     /* Check the parameters */
;;;1661     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1662     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1663     /* Get the TIMx CCMR2 register value */
;;;1664     tmpccmr2 = TIMx->CCMR2;
;;;1665     /* Reset the OC3FE Bit */
;;;1666     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
0008b2  f0220204          BIC      r2,r2,#4
;;;1667     /* Enable or Disable the Output Compare Fast Bit */
;;;1668     tmpccmr2 |= TIM_OCFast;
0008b6  430a              ORRS     r2,r2,r1
;;;1669     /* Write to TIMx CCMR2 */
;;;1670     TIMx->CCMR2 = tmpccmr2;
0008b8  8382              STRH     r2,[r0,#0x1c]
;;;1671   }
0008ba  e7c4              B        |L1.2118|
;;;1672   
                          ENDP

                  TIM_OC4FastConfig PROC
;;;1681     */
;;;1682   void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
0008bc  8b82              LDRH     r2,[r0,#0x1c]
;;;1683   {
;;;1684     uint16_t tmpccmr2 = 0;
;;;1685     /* Check the parameters */
;;;1686     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1687     assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
;;;1688     /* Get the TIMx CCMR2 register value */
;;;1689     tmpccmr2 = TIMx->CCMR2;
;;;1690     /* Reset the OC4FE Bit */
;;;1691     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
;;;1692     /* Enable or Disable the Output Compare Fast Bit */
;;;1693     tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
0008be  f64f73ff          MOV      r3,#0xffff
0008c2  f4226280          BIC      r2,r2,#0x400          ;1691
0008c6  ea032101          AND      r1,r3,r1,LSL #8
0008ca  4311              ORRS     r1,r1,r2
;;;1694     /* Write to TIMx CCMR2 */
;;;1695     TIMx->CCMR2 = tmpccmr2;
0008cc  8381              STRH     r1,[r0,#0x1c]
;;;1696   }
0008ce  e7ba              B        |L1.2118|
;;;1697   
                          ENDP

                  TIM_ClearOC1Ref PROC
;;;1706     */
;;;1707   void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
0008d0  8b02              LDRH     r2,[r0,#0x18]
;;;1708   {
;;;1709     uint16_t tmpccmr1 = 0;
;;;1710     /* Check the parameters */
;;;1711     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1712     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1713   
;;;1714     tmpccmr1 = TIMx->CCMR1;
;;;1715   
;;;1716     /* Reset the OC1CE Bit */
;;;1717     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
0008d2  f0220280          BIC      r2,r2,#0x80
;;;1718     /* Enable or Disable the Output Compare Clear Bit */
;;;1719     tmpccmr1 |= TIM_OCClear;
0008d6  430a              ORRS     r2,r2,r1
;;;1720     /* Write to TIMx CCMR1 register */
;;;1721     TIMx->CCMR1 = tmpccmr1;
0008d8  8302              STRH     r2,[r0,#0x18]
;;;1722   }
0008da  e7b4              B        |L1.2118|
;;;1723   
                          ENDP

                  TIM_ClearOC2Ref PROC
;;;1732     */
;;;1733   void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
0008dc  8b02              LDRH     r2,[r0,#0x18]
;;;1734   {
;;;1735     uint16_t tmpccmr1 = 0;
;;;1736     /* Check the parameters */
;;;1737     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1738     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1739     tmpccmr1 = TIMx->CCMR1;
;;;1740     /* Reset the OC2CE Bit */
;;;1741     tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
;;;1742     /* Enable or Disable the Output Compare Clear Bit */
;;;1743     tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
0008de  f64f73ff          MOV      r3,#0xffff
0008e2  f3c2020e          UBFX     r2,r2,#0,#15          ;1741
0008e6  ea032101          AND      r1,r3,r1,LSL #8
0008ea  4311              ORRS     r1,r1,r2
;;;1744     /* Write to TIMx CCMR1 register */
;;;1745     TIMx->CCMR1 = tmpccmr1;
0008ec  8301              STRH     r1,[r0,#0x18]
;;;1746   }
0008ee  e7aa              B        |L1.2118|
;;;1747   
                          ENDP

                  TIM_ClearOC3Ref PROC
;;;1756     */
;;;1757   void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
0008f0  8b82              LDRH     r2,[r0,#0x1c]
;;;1758   {
;;;1759     uint16_t tmpccmr2 = 0;
;;;1760     /* Check the parameters */
;;;1761     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1762     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1763     tmpccmr2 = TIMx->CCMR2;
;;;1764     /* Reset the OC3CE Bit */
;;;1765     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
0008f2  f0220280          BIC      r2,r2,#0x80
;;;1766     /* Enable or Disable the Output Compare Clear Bit */
;;;1767     tmpccmr2 |= TIM_OCClear;
0008f6  430a              ORRS     r2,r2,r1
;;;1768     /* Write to TIMx CCMR2 register */
;;;1769     TIMx->CCMR2 = tmpccmr2;
0008f8  8382              STRH     r2,[r0,#0x1c]
;;;1770   }
0008fa  e7a4              B        |L1.2118|
;;;1771   
                          ENDP

                  TIM_ClearOC4Ref PROC
;;;1780     */
;;;1781   void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
0008fc  8b82              LDRH     r2,[r0,#0x1c]
;;;1782   {
;;;1783     uint16_t tmpccmr2 = 0;
;;;1784     /* Check the parameters */
;;;1785     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1786     assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
;;;1787     tmpccmr2 = TIMx->CCMR2;
;;;1788     /* Reset the OC4CE Bit */
;;;1789     tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
;;;1790     /* Enable or Disable the Output Compare Clear Bit */
;;;1791     tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
0008fe  f64f73ff          MOV      r3,#0xffff
000902  f3c2020e          UBFX     r2,r2,#0,#15          ;1789
000906  ea032101          AND      r1,r3,r1,LSL #8
00090a  4311              ORRS     r1,r1,r2
;;;1792     /* Write to TIMx CCMR2 register */
;;;1793     TIMx->CCMR2 = tmpccmr2;
00090c  8381              STRH     r1,[r0,#0x1c]
;;;1794   }
00090e  e79a              B        |L1.2118|
;;;1795   
                          ENDP

                  TIM_OC1PolarityConfig PROC
;;;1804     */
;;;1805   void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000910  8c02              LDRH     r2,[r0,#0x20]
;;;1806   {
;;;1807     uint16_t tmpccer = 0;
;;;1808     /* Check the parameters */
;;;1809     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1810     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1811     tmpccer = TIMx->CCER;
;;;1812     /* Set or Reset the CC1P Bit */
;;;1813     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
000912  f0220202          BIC      r2,r2,#2
;;;1814     tmpccer |= TIM_OCPolarity;
000916  430a              ORRS     r2,r2,r1
;;;1815     /* Write to TIMx CCER register */
;;;1816     TIMx->CCER = tmpccer;
000918  8402              STRH     r2,[r0,#0x20]
;;;1817   }
00091a  e794              B        |L1.2118|
;;;1818   
                          ENDP

                  TIM_OC1NPolarityConfig PROC
;;;1827     */
;;;1828   void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
00091c  8c02              LDRH     r2,[r0,#0x20]
;;;1829   {
;;;1830     uint16_t tmpccer = 0;
;;;1831     /* Check the parameters */
;;;1832     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;1833     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1834      
;;;1835     tmpccer = TIMx->CCER;
;;;1836     /* Set or Reset the CC1NP Bit */
;;;1837     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
00091e  f0220208          BIC      r2,r2,#8
;;;1838     tmpccer |= TIM_OCNPolarity;
000922  430a              ORRS     r2,r2,r1
;;;1839     /* Write to TIMx CCER register */
;;;1840     TIMx->CCER = tmpccer;
000924  8402              STRH     r2,[r0,#0x20]
;;;1841   }
000926  e78e              B        |L1.2118|
;;;1842   
                          ENDP

                  TIM_OC2PolarityConfig PROC
;;;1851     */
;;;1852   void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000928  8c02              LDRH     r2,[r0,#0x20]
;;;1853   {
;;;1854     uint16_t tmpccer = 0;
;;;1855     /* Check the parameters */
;;;1856     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;1857     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1858     tmpccer = TIMx->CCER;
;;;1859     /* Set or Reset the CC2P Bit */
;;;1860     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
;;;1861     tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
00092a  f64f73ff          MOV      r3,#0xffff
00092e  f0220220          BIC      r2,r2,#0x20           ;1860
000932  ea031101          AND      r1,r3,r1,LSL #4
000936  4311              ORRS     r1,r1,r2
;;;1862     /* Write to TIMx CCER register */
;;;1863     TIMx->CCER = tmpccer;
000938  8401              STRH     r1,[r0,#0x20]
;;;1864   }
00093a  e784              B        |L1.2118|
;;;1865   
                          ENDP

                  TIM_OC2NPolarityConfig PROC
;;;1874     */
;;;1875   void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
00093c  8c02              LDRH     r2,[r0,#0x20]
;;;1876   {
;;;1877     uint16_t tmpccer = 0;
;;;1878     /* Check the parameters */
;;;1879     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
;;;1880     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1881     
;;;1882     tmpccer = TIMx->CCER;
;;;1883     /* Set or Reset the CC2NP Bit */
;;;1884     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
;;;1885     tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
00093e  f64f73ff          MOV      r3,#0xffff
000942  f0220280          BIC      r2,r2,#0x80           ;1884
000946  ea031101          AND      r1,r3,r1,LSL #4
00094a  4311              ORRS     r1,r1,r2
;;;1886     /* Write to TIMx CCER register */
;;;1887     TIMx->CCER = tmpccer;
00094c  8401              STRH     r1,[r0,#0x20]
;;;1888   }
00094e  e77a              B        |L1.2118|
;;;1889   
                          ENDP

                  TIM_OC3PolarityConfig PROC
;;;1898     */
;;;1899   void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000950  8c02              LDRH     r2,[r0,#0x20]
;;;1900   {
;;;1901     uint16_t tmpccer = 0;
;;;1902     /* Check the parameters */
;;;1903     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1904     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1905     tmpccer = TIMx->CCER;
;;;1906     /* Set or Reset the CC3P Bit */
;;;1907     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
;;;1908     tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
000952  f64f73ff          MOV      r3,#0xffff
000956  f4227200          BIC      r2,r2,#0x200          ;1907
00095a  ea032101          AND      r1,r3,r1,LSL #8
00095e  4311              ORRS     r1,r1,r2
;;;1909     /* Write to TIMx CCER register */
;;;1910     TIMx->CCER = tmpccer;
000960  8401              STRH     r1,[r0,#0x20]
;;;1911   }
000962  e770              B        |L1.2118|
;;;1912   
                          ENDP

                  TIM_OC3NPolarityConfig PROC
;;;1921     */
;;;1922   void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
000964  8c02              LDRH     r2,[r0,#0x20]
;;;1923   {
;;;1924     uint16_t tmpccer = 0;
;;;1925    
;;;1926     /* Check the parameters */
;;;1927     assert_param(IS_TIM_LIST1_PERIPH(TIMx));
;;;1928     assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
;;;1929       
;;;1930     tmpccer = TIMx->CCER;
;;;1931     /* Set or Reset the CC3NP Bit */
;;;1932     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
;;;1933     tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
000966  f64f73ff          MOV      r3,#0xffff
00096a  f4226200          BIC      r2,r2,#0x800          ;1932
00096e  ea032101          AND      r1,r3,r1,LSL #8
000972  4311              ORRS     r1,r1,r2
;;;1934     /* Write to TIMx CCER register */
;;;1935     TIMx->CCER = tmpccer;
000974  8401              STRH     r1,[r0,#0x20]
;;;1936   }
000976  e766              B        |L1.2118|
;;;1937   
                          ENDP

                  TIM_OC4PolarityConfig PROC
;;;1946     */
;;;1947   void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
000978  8c02              LDRH     r2,[r0,#0x20]
;;;1948   {
;;;1949     uint16_t tmpccer = 0;
;;;1950     /* Check the parameters */
;;;1951     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;1952     assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
;;;1953     tmpccer = TIMx->CCER;
;;;1954     /* Set or Reset the CC4P Bit */
;;;1955     tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
;;;1956     tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
00097a  f64f73ff          MOV      r3,#0xffff
00097e  f4225200          BIC      r2,r2,#0x2000         ;1955
000982  ea033101          AND      r1,r3,r1,LSL #12
000986  4311              ORRS     r1,r1,r2
;;;1957     /* Write to TIMx CCER register */
;;;1958     TIMx->CCER = tmpccer;
000988  8401              STRH     r1,[r0,#0x20]
;;;1959   }
00098a  e75c              B        |L1.2118|
;;;1960   
                          ENDP

                  TIM_CCxCmd PROC
;;;1973     */
;;;1974   void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
00098c  b510              PUSH     {r4,lr}
;;;1975   {
;;;1976     uint16_t tmp = 0;
;;;1977   
;;;1978     /* Check the parameters */
;;;1979     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;1980     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;1981     assert_param(IS_TIM_CCX(TIM_CCx));
;;;1982   
;;;1983     tmp = CCER_CCE_Set << TIM_Channel;
00098e  2301              MOVS     r3,#1
;;;1984   
;;;1985     /* Reset the CCxE Bit */
;;;1986     TIMx->CCER &= (uint16_t)~ tmp;
000990  8c04              LDRH     r4,[r0,#0x20]
000992  408b              LSLS     r3,r3,r1              ;1983
000994  439c              BICS     r4,r4,r3
000996  8404              STRH     r4,[r0,#0x20]
;;;1987   
;;;1988     /* Set or reset the CCxE Bit */ 
;;;1989     TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
000998  8c03              LDRH     r3,[r0,#0x20]
00099a  408a              LSLS     r2,r2,r1
00099c  4313              ORRS     r3,r3,r2
00099e  8403              STRH     r3,[r0,#0x20]
;;;1990   }
0009a0  bd10              POP      {r4,pc}
;;;1991   
                          ENDP

                  TIM_CCxNCmd PROC
;;;2003     */
;;;2004   void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
0009a2  b510              PUSH     {r4,lr}
;;;2005   {
;;;2006     uint16_t tmp = 0;
;;;2007   
;;;2008     /* Check the parameters */
;;;2009     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
;;;2010     assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
;;;2011     assert_param(IS_TIM_CCXN(TIM_CCxN));
;;;2012   
;;;2013     tmp = CCER_CCNE_Set << TIM_Channel;
0009a4  2304              MOVS     r3,#4
;;;2014   
;;;2015     /* Reset the CCxNE Bit */
;;;2016     TIMx->CCER &= (uint16_t) ~tmp;
0009a6  8c04              LDRH     r4,[r0,#0x20]
0009a8  408b              LSLS     r3,r3,r1              ;2013
0009aa  439c              BICS     r4,r4,r3
0009ac  8404              STRH     r4,[r0,#0x20]
;;;2017   
;;;2018     /* Set or reset the CCxNE Bit */ 
;;;2019     TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
0009ae  8c03              LDRH     r3,[r0,#0x20]
0009b0  408a              LSLS     r2,r2,r1
0009b2  4313              ORRS     r3,r3,r2
0009b4  8403              STRH     r3,[r0,#0x20]
;;;2020   }
0009b6  bd10              POP      {r4,pc}
;;;2021   
                          ENDP

                  TIM_SelectOCxM PROC
;;;2044     */
;;;2045   void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
0009b8  b530              PUSH     {r4,r5,lr}
;;;2046   {
;;;2047     uint32_t tmp = 0;
;;;2048     uint16_t tmp1 = 0;
;;;2049   
;;;2050     /* Check the parameters */
;;;2051     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2052     assert_param(IS_TIM_CHANNEL(TIM_Channel));
;;;2053     assert_param(IS_TIM_OCM(TIM_OCMode));
;;;2054   
;;;2055     tmp = (uint32_t) TIMx;
;;;2056     tmp += CCMR_Offset;
;;;2057   
;;;2058     tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
0009ba  2401              MOVS     r4,#1
;;;2059   
;;;2060     /* Disable the Channel: Reset the CCxE Bit */
;;;2061     TIMx->CCER &= (uint16_t) ~tmp1;
0009bc  8c05              LDRH     r5,[r0,#0x20]
0009be  f1000318          ADD      r3,r0,#0x18           ;2056
0009c2  408c              LSLS     r4,r4,r1              ;2058
0009c4  43a5              BICS     r5,r5,r4
0009c6  8405              STRH     r5,[r0,#0x20]
0009c8  b189              CBZ      r1,|L1.2542|
;;;2062   
;;;2063     if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
0009ca  2908              CMP      r1,#8
0009cc  d00f              BEQ      |L1.2542|
0009ce  1f09              SUBS     r1,r1,#4
;;;2064     {
;;;2065       tmp += (TIM_Channel>>1);
;;;2066   
;;;2067       /* Reset the OCxM bits in the CCMRx register */
;;;2068       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
;;;2069      
;;;2070       /* Configure the OCxM bits in the CCMRx register */
;;;2071       *(__IO uint32_t *) tmp |= TIM_OCMode;
;;;2072     }
;;;2073     else
;;;2074     {
;;;2075       tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
0009d0  f3c1004e          UBFX     r0,r1,#1,#15
0009d4  4418              ADD      r0,r0,r3
;;;2076   
;;;2077       /* Reset the OCxM bits in the CCMRx register */
;;;2078       *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
0009d6  6801              LDR      r1,[r0,#0]
0009d8  f42141e0          BIC      r1,r1,#0x7000
0009dc  6001              STR      r1,[r0,#0]
;;;2079       
;;;2080       /* Configure the OCxM bits in the CCMRx register */
;;;2081       *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
0009de  6801              LDR      r1,[r0,#0]
0009e0  f64f73ff          MOV      r3,#0xffff
0009e4  ea032202          AND      r2,r3,r2,LSL #8
                  |L1.2536|
0009e8  4311              ORRS     r1,r1,r2              ;2071
0009ea  6001              STR      r1,[r0,#0]            ;2071
;;;2082     }
;;;2083   }
0009ec  bd30              POP      {r4,r5,pc}
                  |L1.2542|
0009ee  eb030051          ADD      r0,r3,r1,LSR #1       ;2065
0009f2  6801              LDR      r1,[r0,#0]            ;2068
0009f4  f0210170          BIC      r1,r1,#0x70           ;2068
0009f8  6001              STR      r1,[r0,#0]            ;2068
0009fa  6801              LDR      r1,[r0,#0]            ;2071
0009fc  e7f4              B        |L1.2536|
;;;2084   
                          ENDP

                  TIM_UpdateDisableConfig PROC
;;;2091     */
;;;2092   void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
0009fe  2900              CMP      r1,#0
;;;2093   {
;;;2094     /* Check the parameters */
;;;2095     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2096     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2097     if (NewState != DISABLE)
;;;2098     {
;;;2099       /* Set the Update Disable Bit */
;;;2100       TIMx->CR1 |= TIM_CR1_UDIS;
;;;2101     }
;;;2102     else
;;;2103     {
;;;2104       /* Reset the Update Disable Bit */
;;;2105       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
000a00  8801              LDRH     r1,[r0,#0]
000a02  d002              BEQ      |L1.2570|
000a04  f0410102          ORR      r1,r1,#2              ;2100
000a08  e001              B        |L1.2574|
                  |L1.2570|
000a0a  f0210102          BIC      r1,r1,#2
                  |L1.2574|
000a0e  8001              STRH     r1,[r0,#0]            ;2100
;;;2106     }
;;;2107   }
000a10  e719              B        |L1.2118|
;;;2108   
                          ENDP

                  TIM_UpdateRequestConfig PROC
;;;2119     */
;;;2120   void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
000a12  2900              CMP      r1,#0
;;;2121   {
;;;2122     /* Check the parameters */
;;;2123     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2124     assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
;;;2125     if (TIM_UpdateSource != TIM_UpdateSource_Global)
;;;2126     {
;;;2127       /* Set the URS Bit */
;;;2128       TIMx->CR1 |= TIM_CR1_URS;
;;;2129     }
;;;2130     else
;;;2131     {
;;;2132       /* Reset the URS Bit */
;;;2133       TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
000a14  8801              LDRH     r1,[r0,#0]
000a16  d002              BEQ      |L1.2590|
000a18  f0410104          ORR      r1,r1,#4              ;2128
000a1c  e001              B        |L1.2594|
                  |L1.2590|
000a1e  f0210104          BIC      r1,r1,#4
                  |L1.2594|
000a22  8001              STRH     r1,[r0,#0]            ;2128
;;;2134     }
;;;2135   }
000a24  e70f              B        |L1.2118|
;;;2136   
                          ENDP

                  TIM_SelectHallSensor PROC
;;;2143     */
;;;2144   void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
000a26  2900              CMP      r1,#0
;;;2145   {
;;;2146     /* Check the parameters */
;;;2147     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2148     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2149     if (NewState != DISABLE)
;;;2150     {
;;;2151       /* Set the TI1S Bit */
;;;2152       TIMx->CR2 |= TIM_CR2_TI1S;
;;;2153     }
;;;2154     else
;;;2155     {
;;;2156       /* Reset the TI1S Bit */
;;;2157       TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
000a28  8881              LDRH     r1,[r0,#4]
000a2a  d002              BEQ      |L1.2610|
000a2c  f0410180          ORR      r1,r1,#0x80           ;2152
000a30  e001              B        |L1.2614|
                  |L1.2610|
000a32  f0210180          BIC      r1,r1,#0x80
                  |L1.2614|
000a36  8081              STRH     r1,[r0,#4]            ;2152
;;;2158     }
;;;2159   }
000a38  e705              B        |L1.2118|
;;;2160   
                          ENDP

                  TIM_SelectOnePulseMode PROC
;;;2169     */
;;;2170   void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
000a3a  8802              LDRH     r2,[r0,#0]
;;;2171   {
;;;2172     /* Check the parameters */
;;;2173     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2174     assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
;;;2175     /* Reset the OPM Bit */
;;;2176     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
000a3c  f0220208          BIC      r2,r2,#8
000a40  8002              STRH     r2,[r0,#0]
;;;2177     /* Configure the OPM Mode */
;;;2178     TIMx->CR1 |= TIM_OPMode;
000a42  8802              LDRH     r2,[r0,#0]
000a44  430a              ORRS     r2,r2,r1
000a46  8002              STRH     r2,[r0,#0]
;;;2179   }
000a48  e6fd              B        |L1.2118|
;;;2180   
                          ENDP

                  TIM_SelectOutputTrigger PROC
;;;2201     */
;;;2202   void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
000a4a  8882              LDRH     r2,[r0,#4]
;;;2203   {
;;;2204     /* Check the parameters */
;;;2205     assert_param(IS_TIM_LIST7_PERIPH(TIMx));
;;;2206     assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
;;;2207     /* Reset the MMS Bits */
;;;2208     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
000a4c  f0220270          BIC      r2,r2,#0x70
000a50  8082              STRH     r2,[r0,#4]
;;;2209     /* Select the TRGO source */
;;;2210     TIMx->CR2 |=  TIM_TRGOSource;
000a52  8882              LDRH     r2,[r0,#4]
000a54  430a              ORRS     r2,r2,r1
000a56  8082              STRH     r2,[r0,#4]
;;;2211   }
000a58  e6f5              B        |L1.2118|
;;;2212   
                          ENDP

                  TIM_SelectSlaveMode PROC
;;;2224     */
;;;2225   void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
000a5a  8902              LDRH     r2,[r0,#8]
;;;2226   {
;;;2227     /* Check the parameters */
;;;2228     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2229     assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
;;;2230    /* Reset the SMS Bits */
;;;2231     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
000a5c  f0220207          BIC      r2,r2,#7
000a60  8102              STRH     r2,[r0,#8]
;;;2232     /* Select the Slave Mode */
;;;2233     TIMx->SMCR |= TIM_SlaveMode;
000a62  8902              LDRH     r2,[r0,#8]
000a64  430a              ORRS     r2,r2,r1
000a66  8102              STRH     r2,[r0,#8]
;;;2234   }
000a68  e6ed              B        |L1.2118|
;;;2235   
                          ENDP

                  TIM_SelectMasterSlaveMode PROC
;;;2245     */
;;;2246   void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
000a6a  8902              LDRH     r2,[r0,#8]
;;;2247   {
;;;2248     /* Check the parameters */
;;;2249     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2250     assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
;;;2251     /* Reset the MSM Bit */
;;;2252     TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
000a6c  f0220280          BIC      r2,r2,#0x80
000a70  8102              STRH     r2,[r0,#8]
;;;2253     
;;;2254     /* Set or Reset the MSM Bit */
;;;2255     TIMx->SMCR |= TIM_MasterSlaveMode;
000a72  8902              LDRH     r2,[r0,#8]
000a74  430a              ORRS     r2,r2,r1
000a76  8102              STRH     r2,[r0,#8]
;;;2256   }
000a78  e6e5              B        |L1.2118|
;;;2257   
                          ENDP

                  TIM_SetCounter PROC
;;;2263     */
;;;2264   void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
000a7a  8481              STRH     r1,[r0,#0x24]
;;;2265   {
;;;2266     /* Check the parameters */
;;;2267     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2268     /* Set the Counter Register value */
;;;2269     TIMx->CNT = Counter;
;;;2270   }
000a7c  e6e3              B        |L1.2118|
;;;2271   
                          ENDP

                  TIM_SetAutoreload PROC
;;;2277     */
;;;2278   void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
000a7e  8581              STRH     r1,[r0,#0x2c]
;;;2279   {
;;;2280     /* Check the parameters */
;;;2281     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2282     /* Set the Autoreload Register value */
;;;2283     TIMx->ARR = Autoreload;
;;;2284   }
000a80  e6e1              B        |L1.2118|
;;;2285   
                          ENDP

                  TIM_SetCompare1 PROC
;;;2291     */
;;;2292   void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
000a82  8681              STRH     r1,[r0,#0x34]
;;;2293   {
;;;2294     /* Check the parameters */
;;;2295     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2296     /* Set the Capture Compare1 Register value */
;;;2297     TIMx->CCR1 = Compare1;
;;;2298   }
000a84  e6df              B        |L1.2118|
;;;2299   
                          ENDP

                  TIM_SetCompare2 PROC
;;;2305     */
;;;2306   void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
000a86  8701              STRH     r1,[r0,#0x38]
;;;2307   {
;;;2308     /* Check the parameters */
;;;2309     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2310     /* Set the Capture Compare2 Register value */
;;;2311     TIMx->CCR2 = Compare2;
;;;2312   }
000a88  e6dd              B        |L1.2118|
;;;2313   
                          ENDP

                  TIM_SetCompare3 PROC
;;;2319     */
;;;2320   void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
000a8a  8781              STRH     r1,[r0,#0x3c]
;;;2321   {
;;;2322     /* Check the parameters */
;;;2323     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2324     /* Set the Capture Compare3 Register value */
;;;2325     TIMx->CCR3 = Compare3;
;;;2326   }
000a8c  e6db              B        |L1.2118|
;;;2327   
                          ENDP

                  TIM_SetCompare4 PROC
;;;2333     */
;;;2334   void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
000a8e  f8a01040          STRH     r1,[r0,#0x40]
;;;2335   {
;;;2336     /* Check the parameters */
;;;2337     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2338     /* Set the Capture Compare4 Register value */
;;;2339     TIMx->CCR4 = Compare4;
;;;2340   }
000a92  e6d8              B        |L1.2118|
;;;2341   
                          ENDP

                  TIM_SetClockDivision PROC
;;;2440     */
;;;2441   void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
000a94  8802              LDRH     r2,[r0,#0]
;;;2442   {
;;;2443     /* Check the parameters */
;;;2444     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2445     assert_param(IS_TIM_CKD_DIV(TIM_CKD));
;;;2446     /* Reset the CKD Bits */
;;;2447     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
000a96  f4227240          BIC      r2,r2,#0x300
000a9a  8002              STRH     r2,[r0,#0]
;;;2448     /* Set the CKD value */
;;;2449     TIMx->CR1 |= TIM_CKD;
000a9c  8802              LDRH     r2,[r0,#0]
000a9e  430a              ORRS     r2,r2,r1
000aa0  8002              STRH     r2,[r0,#0]
;;;2450   }
000aa2  e6d0              B        |L1.2118|
;;;2451   
                          ENDP

                  TIM_GetCapture1 PROC
;;;2456     */
;;;2457   uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
000aa4  8e80              LDRH     r0,[r0,#0x34]
;;;2458   {
;;;2459     /* Check the parameters */
;;;2460     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
;;;2461     /* Get the Capture 1 Register value */
;;;2462     return TIMx->CCR1;
;;;2463   }
000aa6  e6ce              B        |L1.2118|
;;;2464   
                          ENDP

                  TIM_GetCapture2 PROC
;;;2469     */
;;;2470   uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
000aa8  8f00              LDRH     r0,[r0,#0x38]
;;;2471   {
;;;2472     /* Check the parameters */
;;;2473     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
;;;2474     /* Get the Capture 2 Register value */
;;;2475     return TIMx->CCR2;
;;;2476   }
000aaa  e6cc              B        |L1.2118|
;;;2477   
                          ENDP

                  TIM_GetCapture3 PROC
;;;2482     */
;;;2483   uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
000aac  8f80              LDRH     r0,[r0,#0x3c]
;;;2484   {
;;;2485     /* Check the parameters */
;;;2486     assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
;;;2487     /* Get the Capture 3 Register value */
;;;2488     return TIMx->CCR3;
;;;2489   }
000aae  e6ca              B        |L1.2118|
;;;2490   
                          ENDP

                  TIM_GetCapture4 PROC
;;;2495     */
;;;2496   uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
000ab0  f8b00040          LDRH     r0,[r0,#0x40]
;;;2497   {
;;;2498     /* Check the parameters */
;;;2499     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
;;;2500     /* Get the Capture 4 Register value */
;;;2501     return TIMx->CCR4;
;;;2502   }
000ab4  e6c7              B        |L1.2118|
;;;2503   
                          ENDP

                  TIM_GetCounter PROC
;;;2508     */
;;;2509   uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
000ab6  8c80              LDRH     r0,[r0,#0x24]
;;;2510   {
;;;2511     /* Check the parameters */
;;;2512     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2513     /* Get the Counter Register value */
;;;2514     return TIMx->CNT;
;;;2515   }
000ab8  e6c5              B        |L1.2118|
;;;2516   
                          ENDP

                  TIM_GetPrescaler PROC
;;;2521     */
;;;2522   uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
000aba  8d00              LDRH     r0,[r0,#0x28]
;;;2523   {
;;;2524     /* Check the parameters */
;;;2525     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2526     /* Get the Prescaler Register value */
;;;2527     return TIMx->PSC;
;;;2528   }
000abc  e6c3              B        |L1.2118|
;;;2529   
                          ENDP

                  TIM_GetFlagStatus PROC
;;;2555     */
;;;2556   FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000abe  4602              MOV      r2,r0
;;;2557   { 
;;;2558     ITStatus bitstatus = RESET;  
000ac0  2000              MOVS     r0,#0
;;;2559     /* Check the parameters */
;;;2560     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2561     assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
;;;2562     
;;;2563     if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
000ac2  8a12              LDRH     r2,[r2,#0x10]
000ac4  420a              TST      r2,r1
000ac6  d000              BEQ      |L1.2762|
;;;2564     {
;;;2565       bitstatus = SET;
000ac8  2001              MOVS     r0,#1
                  |L1.2762|
;;;2566     }
;;;2567     else
;;;2568     {
;;;2569       bitstatus = RESET;
;;;2570     }
;;;2571     return bitstatus;
;;;2572   }
000aca  e6bc              B        |L1.2118|
;;;2573   
                          ENDP

                  TIM_ClearFlag PROC
;;;2599     */
;;;2600   void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
000acc  43c9              MVNS     r1,r1
;;;2601   {  
;;;2602     /* Check the parameters */
;;;2603     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2604     assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
;;;2605      
;;;2606     /* Clear the flags */
;;;2607     TIMx->SR = (uint16_t)~TIM_FLAG;
000ace  8201              STRH     r1,[r0,#0x10]
;;;2608   }
000ad0  e6b9              B        |L1.2118|
;;;2609   
                          ENDP

                  TIM_GetITStatus PROC
;;;2631     */
;;;2632   ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000ad2  4602              MOV      r2,r0
;;;2633   {
;;;2634     ITStatus bitstatus = RESET;  
000ad4  2000              MOVS     r0,#0
;;;2635     uint16_t itstatus = 0x0, itenable = 0x0;
;;;2636     /* Check the parameters */
;;;2637     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2638     assert_param(IS_TIM_GET_IT(TIM_IT));
;;;2639      
;;;2640     itstatus = TIMx->SR & TIM_IT;
000ad6  8a13              LDRH     r3,[r2,#0x10]
;;;2641     
;;;2642     itenable = TIMx->DIER & TIM_IT;
000ad8  8992              LDRH     r2,[r2,#0xc]
000ada  420b              TST      r3,r1                 ;2640
000adc  ea020201          AND      r2,r2,r1
000ae0  d002              BEQ      |L1.2792|
;;;2643     if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
000ae2  2a00              CMP      r2,#0
000ae4  d000              BEQ      |L1.2792|
;;;2644     {
;;;2645       bitstatus = SET;
000ae6  2001              MOVS     r0,#1
                  |L1.2792|
;;;2646     }
;;;2647     else
;;;2648     {
;;;2649       bitstatus = RESET;
;;;2650     }
;;;2651     return bitstatus;
;;;2652   }
000ae8  e6ad              B        |L1.2118|
;;;2653   
                          ENDP

                  TIM_ClearITPendingBit PROC
;;;2675     */
;;;2676   void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
000aea  43c9              MVNS     r1,r1
;;;2677   {
;;;2678     /* Check the parameters */
;;;2679     assert_param(IS_TIM_ALL_PERIPH(TIMx));
;;;2680     assert_param(IS_TIM_IT(TIM_IT));
;;;2681     /* Clear the IT pending Bit */
;;;2682     TIMx->SR = (uint16_t)~TIM_IT;
000aec  8201              STRH     r1,[r0,#0x10]
;;;2683   }
000aee  e6aa              B        |L1.2118|
;;;2684   
                          ENDP

