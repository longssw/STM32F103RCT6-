; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\stm32f10x_bkp.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\stm32f10x_bkp.crf ..\..\Libraries\FWlib\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BKP_DeInit PROC
;;;119      */
;;;120    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;123      RCC_BackupResetCmd(DISABLE);
000008  e8bd4010          POP      {r4,lr}
00000c  2000              MOVS     r0,#0
00000e  f7ffbffe          B.W      RCC_BackupResetCmd
;;;124    }
;;;125    
                          ENDP

                  BKP_TamperPinLevelConfig PROC
;;;133      */
;;;134    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000012  491f              LDR      r1,|L1.144|
;;;135    {
;;;136      /* Check the parameters */
;;;137      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;138      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000014  6008              STR      r0,[r1,#0]
;;;139    }
000016  4770              BX       lr
;;;140    
                          ENDP

                  BKP_TamperPinCmd PROC
;;;146      */
;;;147    void BKP_TamperPinCmd(FunctionalState NewState)
000018  491d              LDR      r1,|L1.144|
;;;148    {
;;;149      /* Check the parameters */
;;;150      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;151      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
00001a  1f09              SUBS     r1,r1,#4
00001c  6008              STR      r0,[r1,#0]
;;;152    }
00001e  4770              BX       lr
;;;153    
                          ENDP

                  BKP_ITConfig PROC
;;;159      */
;;;160    void BKP_ITConfig(FunctionalState NewState)
000020  491b              LDR      r1,|L1.144|
;;;161    {
;;;162      /* Check the parameters */
;;;163      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;164      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
000022  3184              ADDS     r1,r1,#0x84
000024  6008              STR      r0,[r1,#0]
;;;165    }
000026  4770              BX       lr
;;;166    
                          ENDP

                  BKP_RTCOutputConfig PROC
;;;179      */
;;;180    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000028  4a1a              LDR      r2,|L1.148|
;;;181    {
;;;182      uint16_t tmpreg = 0;
;;;183      /* Check the parameters */
;;;184      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;185      tmpreg = BKP->RTCCR;
00002a  8811              LDRH     r1,[r2,#0]
;;;186      /* Clear CCO, ASOE and ASOS bits */
;;;187      tmpreg &= RTCCR_MASK;
00002c  f4217160          BIC      r1,r1,#0x380
;;;188      
;;;189      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;190      tmpreg |= BKP_RTCOutputSource;
000030  4301              ORRS     r1,r1,r0
;;;191      /* Store the new value */
;;;192      BKP->RTCCR = tmpreg;
000032  8011              STRH     r1,[r2,#0]
;;;193    }
000034  4770              BX       lr
;;;194    
                          ENDP

                  BKP_SetRTCCalibrationValue PROC
;;;200      */
;;;201    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
000036  4a17              LDR      r2,|L1.148|
;;;202    {
;;;203      uint16_t tmpreg = 0;
;;;204      /* Check the parameters */
;;;205      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;206      tmpreg = BKP->RTCCR;
000038  8811              LDRH     r1,[r2,#0]
;;;207      /* Clear CAL[6:0] bits */
;;;208      tmpreg &= RTCCR_CAL_MASK;
00003a  f021017f          BIC      r1,r1,#0x7f
;;;209      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;210      tmpreg |= CalibrationValue;
00003e  4301              ORRS     r1,r1,r0
;;;211      /* Store the new value */
;;;212      BKP->RTCCR = tmpreg;
000040  8011              STRH     r1,[r2,#0]
;;;213    }
000042  4770              BX       lr
;;;214    
                          ENDP

                  BKP_WriteBackupRegister PROC
;;;221      */
;;;222    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000044  4a13              LDR      r2,|L1.148|
;;;223    {
000046  b508              PUSH     {r3,lr}
;;;224      __IO uint32_t tmp = 0;
;;;225    
;;;226      /* Check the parameters */
;;;227      assert_param(IS_BKP_DR(BKP_DR));
;;;228    
;;;229      tmp = (uint32_t)BKP_BASE; 
000048  3a2c              SUBS     r2,r2,#0x2c
;;;230      tmp += BKP_DR;
00004a  4410              ADD      r0,r0,r2
;;;231    
;;;232      *(__IO uint32_t *) tmp = Data;
00004c  9000              STR      r0,[sp,#0]
00004e  6001              STR      r1,[r0,#0]
;;;233    }
000050  bd08              POP      {r3,pc}
;;;234    
                          ENDP

                  BKP_ReadBackupRegister PROC
;;;240      */
;;;241    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000052  4910              LDR      r1,|L1.148|
;;;242    {
000054  b508              PUSH     {r3,lr}
;;;243      __IO uint32_t tmp = 0;
;;;244    
;;;245      /* Check the parameters */
;;;246      assert_param(IS_BKP_DR(BKP_DR));
;;;247    
;;;248      tmp = (uint32_t)BKP_BASE; 
000056  392c              SUBS     r1,r1,#0x2c
;;;249      tmp += BKP_DR;
000058  4408              ADD      r0,r0,r1
;;;250    
;;;251      return (*(__IO uint16_t *) tmp);
00005a  9000              STR      r0,[sp,#0]
00005c  8800              LDRH     r0,[r0,#0]
;;;252    }
00005e  bd08              POP      {r3,pc}
;;;253    
                          ENDP

                  BKP_GetFlagStatus PROC
;;;258      */
;;;259    FlagStatus BKP_GetFlagStatus(void)
000060  480b              LDR      r0,|L1.144|
;;;260    {
;;;261      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000062  309c              ADDS     r0,r0,#0x9c
000064  6800              LDR      r0,[r0,#0]
000066  b2c0              UXTB     r0,r0
;;;262    }
000068  4770              BX       lr
;;;263    
                          ENDP

                  BKP_ClearFlag PROC
;;;268      */
;;;269    void BKP_ClearFlag(void)
00006a  480a              LDR      r0,|L1.148|
;;;270    {
;;;271      /* Set CTE bit to clear Tamper Pin Event flag */
;;;272      BKP->CSR |= BKP_CSR_CTE;
00006c  3008              ADDS     r0,r0,#8
00006e  8801              LDRH     r1,[r0,#0]
000070  f0410101          ORR      r1,r1,#1
000074  8001              STRH     r1,[r0,#0]
;;;273    }
000076  4770              BX       lr
;;;274    
                          ENDP

                  BKP_GetITStatus PROC
;;;279      */
;;;280    ITStatus BKP_GetITStatus(void)
000078  4805              LDR      r0,|L1.144|
;;;281    {
;;;282      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
00007a  30a0              ADDS     r0,r0,#0xa0
00007c  6800              LDR      r0,[r0,#0]
00007e  b2c0              UXTB     r0,r0
;;;283    }
000080  4770              BX       lr
;;;284    
                          ENDP

                  BKP_ClearITPendingBit PROC
;;;289      */
;;;290    void BKP_ClearITPendingBit(void)
000082  4804              LDR      r0,|L1.148|
;;;291    {
;;;292      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;293      BKP->CSR |= BKP_CSR_CTI;
000084  3008              ADDS     r0,r0,#8
000086  8801              LDRH     r1,[r0,#0]
000088  f0410102          ORR      r1,r1,#2
00008c  8001              STRH     r1,[r0,#0]
;;;294    }
00008e  4770              BX       lr
;;;295    
                          ENDP

                  |L1.144|
                          DCD      0x420d8604
                  |L1.148|
                          DCD      0x40006c2c
