; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\event_groups.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\event_groups.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\event_groups.crf ..\..\FreeRTOS\src\event_groups.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  xEventGroupCreate PROC
;;;173    
;;;174    	EventGroupHandle_t xEventGroupCreate( void )
000000  b510              PUSH     {r4,lr}
;;;175    	{
;;;176    	EventGroup_t *pxEventBits;
;;;177    
;;;178    		/* Allocate the event group. */
;;;179    		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
000002  2018              MOVS     r0,#0x18
000004  f7fffffe          BL       pvPortMalloc
000008  0004              MOVS     r4,r0
;;;180    
;;;181    		if( pxEventBits != NULL )
00000a  d004              BEQ      |L1.22|
;;;182    		{
;;;183    			pxEventBits->uxEventBits = 0;
00000c  2000              MOVS     r0,#0
;;;184    			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
00000e  6020              STR      r0,[r4,#0]
000010  1d20              ADDS     r0,r4,#4
000012  f7fffffe          BL       vListInitialise
                  |L1.22|
;;;185    
;;;186    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;187    			{
;;;188    				/* Both static and dynamic allocation can be used, so note this
;;;189    				event group was allocated statically in case the event group is
;;;190    				later deleted. */
;;;191    				pxEventBits->ucStaticallyAllocated = pdFALSE;
;;;192    			}
;;;193    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;194    
;;;195    			traceEVENT_GROUP_CREATE( pxEventBits );
;;;196    		}
;;;197    		else
;;;198    		{
;;;199    			traceEVENT_GROUP_CREATE_FAILED();
;;;200    		}
;;;201    
;;;202    		return ( EventGroupHandle_t ) pxEventBits;
000016  4620              MOV      r0,r4
;;;203    	}
000018  bd10              POP      {r4,pc}
;;;204    
                          ENDP

                  xEventGroupSetBits PROC
;;;529    
;;;530    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
00001a  e92d41f0          PUSH     {r4-r8,lr}
;;;531    {
;;;532    ListItem_t *pxListItem, *pxNext;
;;;533    ListItem_t const *pxListEnd;
;;;534    List_t *pxList;
;;;535    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
00001e  2500              MOVS     r5,#0
000020  4688              MOV      r8,r1                 ;531
;;;536    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000022  0004              MOVS     r4,r0
000024  d105              BNE      |L1.50|
;;;537    BaseType_t xMatchFound = pdFALSE;
;;;538    
;;;539    	/* Check the user is not attempting to set the bits used by the kernel
;;;540    	itself. */
;;;541    	configASSERT( xEventGroup );
000026  f240221d          MOV      r2,#0x21d
00002a  a1b0              ADR      r1,|L1.748|
00002c  a0b8              ADR      r0,|L1.784|
00002e  f7fffffe          BL       __2printf
                  |L1.50|
;;;542    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000032  ea5f6018          LSRS     r0,r8,#24
000036  d005              BEQ      |L1.68|
000038  f240221e          MOV      r2,#0x21e
00003c  a1ab              ADR      r1,|L1.748|
00003e  a0b4              ADR      r0,|L1.784|
000040  f7fffffe          BL       __2printf
                  |L1.68|
;;;543    
;;;544    	pxList = &( pxEventBits->xTasksWaitingForBits );
000044  1d26              ADDS     r6,r4,#4
;;;545    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000046  f104070c          ADD      r7,r4,#0xc
;;;546    	vTaskSuspendAll();
00004a  f7fffffe          BL       vTaskSuspendAll
;;;547    	{
;;;548    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;549    
;;;550    		pxListItem = listGET_HEAD_ENTRY( pxList );
;;;551    
;;;552    		/* Set the bits. */
;;;553    		pxEventBits->uxEventBits |= uxBitsToSet;
00004e  6821              LDR      r1,[r4,#0]
000050  68f0              LDR      r0,[r6,#0xc]
000052  ea410108          ORR      r1,r1,r8
;;;554    
;;;555    		/* See if the new bit value should unblock any tasks. */
;;;556    		while( pxListItem != pxListEnd )
000056  6021              STR      r1,[r4,#0]
000058  e017              B        |L1.138|
                  |L1.90|
00005a  e9d01600          LDRD     r1,r6,[r0,#0]
;;;557    		{
;;;558    			pxNext = listGET_NEXT( pxListItem );
;;;559    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
;;;560    			xMatchFound = pdFALSE;
;;;561    
;;;562    			/* Split the bits waited for from the control bits. */
;;;563    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
00005e  f001427f          AND      r2,r1,#0xff000000
;;;564    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
;;;565    
;;;566    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
000062  0153              LSLS     r3,r2,#5
000064  6823              LDR      r3,[r4,#0]
000066  f021417f          BIC      r1,r1,#0xff000000     ;564
00006a  d402              BMI      |L1.114|
;;;567    			{
;;;568    				/* Just looking for single bit being set. */
;;;569    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
00006c  420b              TST      r3,r1
00006e  d103              BNE      |L1.120|
000070  e00a              B        |L1.136|
                  |L1.114|
;;;570    				{
;;;571    					xMatchFound = pdTRUE;
;;;572    				}
;;;573    				else
;;;574    				{
;;;575    					mtCOVERAGE_TEST_MARKER();
;;;576    				}
;;;577    			}
;;;578    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
000072  ea310303          BICS     r3,r1,r3
000076  d107              BNE      |L1.136|
                  |L1.120|
;;;579    			{
;;;580    				/* All bits are set. */
;;;581    				xMatchFound = pdTRUE;
;;;582    			}
;;;583    			else
;;;584    			{
;;;585    				/* Need all bits to be set, but not all the bits were set. */
;;;586    			}
;;;587    
;;;588    			if( xMatchFound != pdFALSE )
;;;589    			{
;;;590    				/* The bits match.  Should the bits be cleared on exit? */
;;;591    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
000078  01d2              LSLS     r2,r2,#7
00007a  d500              BPL      |L1.126|
;;;592    				{
;;;593    					uxBitsToClear |= uxBitsWaitedFor;
00007c  430d              ORRS     r5,r5,r1
                  |L1.126|
;;;594    				}
;;;595    				else
;;;596    				{
;;;597    					mtCOVERAGE_TEST_MARKER();
;;;598    				}
;;;599    
;;;600    				/* Store the actual event flag value in the task's event list
;;;601    				item before removing the task from the event list.  The
;;;602    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;603    				that is was unblocked due to its required bits matching, rather
;;;604    				than because it timed out. */
;;;605    				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
00007e  6821              LDR      r1,[r4,#0]
000080  f0417100          ORR      r1,r1,#0x2000000
000084  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L1.136|
;;;606    			}
;;;607    
;;;608    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;609    			used here as the list item may have been removed from the event list
;;;610    			and inserted into the ready/pending reading list. */
;;;611    			pxListItem = pxNext;
000088  4630              MOV      r0,r6
                  |L1.138|
00008a  42b8              CMP      r0,r7                 ;556
00008c  d1e5              BNE      |L1.90|
;;;612    		}
;;;613    
;;;614    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;615    		bit was set in the control word. */
;;;616    		pxEventBits->uxEventBits &= ~uxBitsToClear;
00008e  6820              LDR      r0,[r4,#0]
000090  43a8              BICS     r0,r0,r5
;;;617    	}
;;;618    	( void ) xTaskResumeAll();
000092  6020              STR      r0,[r4,#0]
000094  f7fffffe          BL       xTaskResumeAll
;;;619    
;;;620    	return pxEventBits->uxEventBits;
000098  6820              LDR      r0,[r4,#0]
                  |L1.154|
;;;621    }
00009a  e8bd81f0          POP      {r4-r8,pc}
;;;622    /*-----------------------------------------------------------*/
                          ENDP

                  xEventGroupSync PROC
;;;207    
;;;208    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
00009e  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
0000a2  4604              MOV      r4,r0
0000a4  461f              MOV      r7,r3
0000a6  4615              MOV      r5,r2
0000a8  4688              MOV      r8,r1
;;;210    EventBits_t uxOriginalBitValue, uxReturn;
;;;211    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;212    BaseType_t xAlreadyYielded;
;;;213    BaseType_t xTimeoutOccurred = pdFALSE;
;;;214    
;;;215    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
0000aa  0e10              LSRS     r0,r2,#24
0000ac  d004              BEQ      |L1.184|
0000ae  22d7              MOVS     r2,#0xd7
0000b0  a18e              ADR      r1,|L1.748|
0000b2  a097              ADR      r0,|L1.784|
0000b4  f7fffffe          BL       __2printf
                  |L1.184|
;;;216    	configASSERT( uxBitsToWaitFor != 0 );
0000b8  b925              CBNZ     r5,|L1.196|
0000ba  22d8              MOVS     r2,#0xd8
0000bc  a18b              ADR      r1,|L1.748|
0000be  a094              ADR      r0,|L1.784|
0000c0  f7fffffe          BL       __2printf
                  |L1.196|
;;;217    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;218    	{
;;;219    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
0000c4  f7fffffe          BL       xTaskGetSchedulerState
0000c8  b928              CBNZ     r0,|L1.214|
0000ca  b127              CBZ      r7,|L1.214|
0000cc  22db              MOVS     r2,#0xdb
0000ce  a187              ADR      r1,|L1.748|
0000d0  a08f              ADR      r0,|L1.784|
0000d2  f7fffffe          BL       __2printf
                  |L1.214|
;;;220    	}
;;;221    	#endif
;;;222    
;;;223    	vTaskSuspendAll();
0000d6  f7fffffe          BL       vTaskSuspendAll
;;;224    	{
;;;225    		uxOriginalBitValue = pxEventBits->uxEventBits;
0000da  4620              MOV      r0,r4
;;;226    
;;;227    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
0000dc  4641              MOV      r1,r8
0000de  6826              LDR      r6,[r4,#0]
0000e0  f7fffffe          BL       xEventGroupSetBits
;;;228    
;;;229    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
0000e4  ea460608          ORR      r6,r6,r8
0000e8  ea350006          BICS     r0,r5,r6
0000ec  d008              BEQ      |L1.256|
;;;230    		{
;;;231    			/* All the rendezvous bits are now set - no need to block. */
;;;232    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
;;;233    
;;;234    			/* Rendezvous always clear the bits.  They will have been cleared
;;;235    			already unless this is the only task in the rendezvous. */
;;;236    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
;;;237    
;;;238    			xTicksToWait = 0;
;;;239    		}
;;;240    		else
;;;241    		{
;;;242    			if( xTicksToWait != ( TickType_t ) 0 )
0000ee  b167              CBZ      r7,|L1.266|
;;;243    			{
;;;244    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;245    
;;;246    				/* Store the bits that the calling task is waiting for in the
;;;247    				task's event list item so the kernel knows when a match is
;;;248    				found.  Then enter the blocked state. */
;;;249    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
0000f0  f04561a0          ORR      r1,r5,#0x5000000
0000f4  463a              MOV      r2,r7
0000f6  1d20              ADDS     r0,r4,#4
0000f8  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;250    
;;;251    				/* This assignment is obsolete as uxReturn will get set after
;;;252    				the task unblocks, but some compilers mistakenly generate a
;;;253    				warning about uxReturn being returned without being set if the
;;;254    				assignment is omitted. */
;;;255    				uxReturn = 0;
0000fc  2600              MOVS     r6,#0
0000fe  e005              B        |L1.268|
                  |L1.256|
000100  6820              LDR      r0,[r4,#0]            ;236
000102  43a8              BICS     r0,r0,r5              ;236
000104  2700              MOVS     r7,#0                 ;238
000106  6020              STR      r0,[r4,#0]            ;238
000108  e000              B        |L1.268|
                  |L1.266|
;;;256    			}
;;;257    			else
;;;258    			{
;;;259    				/* The rendezvous bits were not set, but no block time was
;;;260    				specified - just return the current event bit value. */
;;;261    				uxReturn = pxEventBits->uxEventBits;
00010a  6826              LDR      r6,[r4,#0]
                  |L1.268|
;;;262    			}
;;;263    		}
;;;264    	}
;;;265    	xAlreadyYielded = xTaskResumeAll();
00010c  f7fffffe          BL       xTaskResumeAll
;;;266    
;;;267    	if( xTicksToWait != ( TickType_t ) 0 )
000110  b1d7              CBZ      r7,|L1.328|
;;;268    	{
;;;269    		if( xAlreadyYielded == pdFALSE )
000112  b938              CBNZ     r0,|L1.292|
;;;270    		{
;;;271    			portYIELD_WITHIN_API();
000114  4982              LDR      r1,|L1.800|
000116  f04f5080          MOV      r0,#0x10000000
00011a  6008              STR      r0,[r1,#0]
00011c  f3bf8f4f          DSB      
000120  f3bf8f6f          ISB      
                  |L1.292|
;;;272    		}
;;;273    		else
;;;274    		{
;;;275    			mtCOVERAGE_TEST_MARKER();
;;;276    		}
;;;277    
;;;278    		/* The task blocked to wait for its required bits to be set - at this
;;;279    		point either the required bits were set or the block time expired.  If
;;;280    		the required bits were set they will have been stored in the task's
;;;281    		event list item, and they should now be retrieved then cleared. */
;;;282    		uxReturn = uxTaskResetEventItemValue();
000124  f7fffffe          BL       uxTaskResetEventItemValue
000128  4606              MOV      r6,r0
;;;283    
;;;284    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
00012a  0180              LSLS     r0,r0,#6
00012c  d40a              BMI      |L1.324|
;;;285    		{
;;;286    			/* The task timed out, just return the current event bit value. */
;;;287    			taskENTER_CRITICAL();
00012e  f7fffffe          BL       vPortEnterCritical
;;;288    			{
;;;289    				uxReturn = pxEventBits->uxEventBits;
;;;290    
;;;291    				/* Although the task got here because it timed out before the
;;;292    				bits it was waiting for were set, it is possible that since it
;;;293    				unblocked another task has set the bits.  If this is the case
;;;294    				then it needs to clear the bits before exiting. */
;;;295    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
000132  6826              LDR      r6,[r4,#0]
000134  ea350006          BICS     r0,r5,r6
000138  d102              BNE      |L1.320|
;;;296    				{
;;;297    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
00013a  ea260005          BIC      r0,r6,r5
00013e  6020              STR      r0,[r4,#0]
                  |L1.320|
;;;298    				}
;;;299    				else
;;;300    				{
;;;301    					mtCOVERAGE_TEST_MARKER();
;;;302    				}
;;;303    			}
;;;304    			taskEXIT_CRITICAL();
000140  f7fffffe          BL       vPortExitCritical
                  |L1.324|
;;;305    
;;;306    			xTimeoutOccurred = pdTRUE;
;;;307    		}
;;;308    		else
;;;309    		{
;;;310    			/* The task unblocked because the bits were set. */
;;;311    		}
;;;312    
;;;313    		/* Control bits might be set as the task had blocked should not be
;;;314    		returned. */
;;;315    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
000144  f026467f          BIC      r6,r6,#0xff000000
                  |L1.328|
;;;316    	}
;;;317    
;;;318    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;319    
;;;320    	return uxReturn;
000148  4630              MOV      r0,r6
;;;321    }
00014a  e7a6              B        |L1.154|
;;;322    /*-----------------------------------------------------------*/
                          ENDP

                  xEventGroupWaitBits PROC
;;;323    
;;;324    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
00014c  e92d47f0          PUSH     {r4-r10,lr}
;;;325    {
000150  469a              MOV      r10,r3
;;;326    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000152  9f08              LDR      r7,[sp,#0x20]
000154  4691              MOV      r9,r2                 ;325
000156  460d              MOV      r5,r1                 ;325
000158  0004              MOVS     r4,r0
;;;327    EventBits_t uxReturn, uxControlBits = 0;
00015a  f04f0600          MOV      r6,#0
00015e  d105              BNE      |L1.364|
;;;328    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;329    BaseType_t xTimeoutOccurred = pdFALSE;
;;;330    
;;;331    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;332    	itself, and that at least one bit is being requested. */
;;;333    	configASSERT( xEventGroup );
000160  f240124d          MOV      r2,#0x14d
000164  a161              ADR      r1,|L1.748|
000166  a06a              ADR      r0,|L1.784|
000168  f7fffffe          BL       __2printf
                  |L1.364|
;;;334    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
00016c  0e28              LSRS     r0,r5,#24
00016e  d005              BEQ      |L1.380|
000170  f44f72a7          MOV      r2,#0x14e
000174  a15d              ADR      r1,|L1.748|
000176  a066              ADR      r0,|L1.784|
000178  f7fffffe          BL       __2printf
                  |L1.380|
;;;335    	configASSERT( uxBitsToWaitFor != 0 );
00017c  b92d              CBNZ     r5,|L1.394|
00017e  f240124f          MOV      r2,#0x14f
000182  a15a              ADR      r1,|L1.748|
000184  a062              ADR      r0,|L1.784|
000186  f7fffffe          BL       __2printf
                  |L1.394|
;;;336    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;337    	{
;;;338    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
00018a  f7fffffe          BL       xTaskGetSchedulerState
00018e  b930              CBNZ     r0,|L1.414|
000190  b12f              CBZ      r7,|L1.414|
000192  f44f72a9          MOV      r2,#0x152
000196  a155              ADR      r1,|L1.748|
000198  a05d              ADR      r0,|L1.784|
00019a  f7fffffe          BL       __2printf
                  |L1.414|
;;;339    	}
;;;340    	#endif
;;;341    
;;;342    	vTaskSuspendAll();
00019e  f7fffffe          BL       vTaskSuspendAll
;;;343    	{
;;;344    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
;;;345    
;;;346    		/* Check to see if the wait condition is already met or not. */
;;;347    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
0001a2  f8d48000          LDR      r8,[r4,#0]
0001a6  4652              MOV      r2,r10
0001a8  4629              MOV      r1,r5
0001aa  4640              MOV      r0,r8
0001ac  f7fffffe          BL       prvTestWaitCondition
;;;348    
;;;349    		if( xWaitConditionMet != pdFALSE )
0001b0  b140              CBZ      r0,|L1.452|
;;;350    		{
;;;351    			/* The wait condition has already been met so there is no need to
;;;352    			block. */
;;;353    			uxReturn = uxCurrentEventBits;
;;;354    			xTicksToWait = ( TickType_t ) 0;
0001b2  2700              MOVS     r7,#0
0001b4  4646              MOV      r6,r8                 ;353
;;;355    
;;;356    			/* Clear the wait bits if requested to do so. */
;;;357    			if( xClearOnExit != pdFALSE )
0001b6  f1b90f00          CMP      r9,#0
0001ba  d015              BEQ      |L1.488|
;;;358    			{
;;;359    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0001bc  6820              LDR      r0,[r4,#0]
0001be  43a8              BICS     r0,r0,r5
0001c0  6020              STR      r0,[r4,#0]
0001c2  e011              B        |L1.488|
                  |L1.452|
;;;360    			}
;;;361    			else
;;;362    			{
;;;363    				mtCOVERAGE_TEST_MARKER();
;;;364    			}
;;;365    		}
;;;366    		else if( xTicksToWait == ( TickType_t ) 0 )
0001c4  b1af              CBZ      r7,|L1.498|
;;;367    		{
;;;368    			/* The wait condition has not been met, but no block time was
;;;369    			specified, so just return the current value. */
;;;370    			uxReturn = uxCurrentEventBits;
;;;371    		}
;;;372    		else
;;;373    		{
;;;374    			/* The task is going to block to wait for its required bits to be
;;;375    			set.  uxControlBits are used to remember the specified behaviour of
;;;376    			this call to xEventGroupWaitBits() - for use when the event bits
;;;377    			unblock the task. */
;;;378    			if( xClearOnExit != pdFALSE )
0001c6  f1b90f00          CMP      r9,#0
0001ca  d001              BEQ      |L1.464|
;;;379    			{
;;;380    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
0001cc  f04f7680          MOV      r6,#0x1000000
                  |L1.464|
;;;381    			}
;;;382    			else
;;;383    			{
;;;384    				mtCOVERAGE_TEST_MARKER();
;;;385    			}
;;;386    
;;;387    			if( xWaitForAllBits != pdFALSE )
0001d0  f1ba0f00          CMP      r10,#0
0001d4  d001              BEQ      |L1.474|
;;;388    			{
;;;389    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
0001d6  f0466680          ORR      r6,r6,#0x4000000
                  |L1.474|
;;;390    			}
;;;391    			else
;;;392    			{
;;;393    				mtCOVERAGE_TEST_MARKER();
;;;394    			}
;;;395    
;;;396    			/* Store the bits that the calling task is waiting for in the
;;;397    			task's event list item so the kernel knows when a match is
;;;398    			found.  Then enter the blocked state. */
;;;399    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
0001da  ea450106          ORR      r1,r5,r6
0001de  463a              MOV      r2,r7
0001e0  1d20              ADDS     r0,r4,#4
0001e2  f7fffffe          BL       vTaskPlaceOnUnorderedEventList
;;;400    
;;;401    			/* This is obsolete as it will get set after the task unblocks, but
;;;402    			some compilers mistakenly generate a warning about the variable
;;;403    			being returned without being set if it is not done. */
;;;404    			uxReturn = 0;
0001e6  2600              MOVS     r6,#0
                  |L1.488|
;;;405    
;;;406    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;407    		}
;;;408    	}
;;;409    	xAlreadyYielded = xTaskResumeAll();
0001e8  f7fffffe          BL       xTaskResumeAll
;;;410    
;;;411    	if( xTicksToWait != ( TickType_t ) 0 )
0001ec  b31f              CBZ      r7,|L1.566|
;;;412    	{
;;;413    		if( xAlreadyYielded == pdFALSE )
0001ee  b110              CBZ      r0,|L1.502|
0001f0  e009              B        |L1.518|
                  |L1.498|
0001f2  4646              MOV      r6,r8                 ;370
0001f4  e7f8              B        |L1.488|
                  |L1.502|
;;;414    		{
;;;415    			portYIELD_WITHIN_API();
0001f6  494a              LDR      r1,|L1.800|
0001f8  f04f5080          MOV      r0,#0x10000000
0001fc  6008              STR      r0,[r1,#0]
0001fe  f3bf8f4f          DSB      
000202  f3bf8f6f          ISB      
                  |L1.518|
;;;416    		}
;;;417    		else
;;;418    		{
;;;419    			mtCOVERAGE_TEST_MARKER();
;;;420    		}
;;;421    
;;;422    		/* The task blocked to wait for its required bits to be set - at this
;;;423    		point either the required bits were set or the block time expired.  If
;;;424    		the required bits were set they will have been stored in the task's
;;;425    		event list item, and they should now be retrieved then cleared. */
;;;426    		uxReturn = uxTaskResetEventItemValue();
000206  f7fffffe          BL       uxTaskResetEventItemValue
00020a  4606              MOV      r6,r0
;;;427    
;;;428    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
00020c  0180              LSLS     r0,r0,#6
00020e  d410              BMI      |L1.562|
;;;429    		{
;;;430    			taskENTER_CRITICAL();
000210  f7fffffe          BL       vPortEnterCritical
;;;431    			{
;;;432    				/* The task timed out, just return the current event bit value. */
;;;433    				uxReturn = pxEventBits->uxEventBits;
;;;434    
;;;435    				/* It is possible that the event bits were updated between this
;;;436    				task leaving the Blocked state and running again. */
;;;437    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
000214  6826              LDR      r6,[r4,#0]
000216  4652              MOV      r2,r10
000218  4629              MOV      r1,r5
00021a  4630              MOV      r0,r6
00021c  f7fffffe          BL       prvTestWaitCondition
000220  b128              CBZ      r0,|L1.558|
;;;438    				{
;;;439    					if( xClearOnExit != pdFALSE )
000222  f1b90f00          CMP      r9,#0
000226  d002              BEQ      |L1.558|
;;;440    					{
;;;441    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000228  6820              LDR      r0,[r4,#0]
00022a  43a8              BICS     r0,r0,r5
00022c  6020              STR      r0,[r4,#0]
                  |L1.558|
;;;442    					}
;;;443    					else
;;;444    					{
;;;445    						mtCOVERAGE_TEST_MARKER();
;;;446    					}
;;;447    				}
;;;448    				else
;;;449    				{
;;;450    					mtCOVERAGE_TEST_MARKER();
;;;451    				}
;;;452    			}
;;;453    			taskEXIT_CRITICAL();
00022e  f7fffffe          BL       vPortExitCritical
                  |L1.562|
;;;454    
;;;455    			/* Prevent compiler warnings when trace macros are not used. */
;;;456    			xTimeoutOccurred = pdFALSE;
;;;457    		}
;;;458    		else
;;;459    		{
;;;460    			/* The task unblocked because the bits were set. */
;;;461    		}
;;;462    
;;;463    		/* The task blocked so control bits may have been set. */
;;;464    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
000232  f026467f          BIC      r6,r6,#0xff000000
                  |L1.566|
;;;465    	}
;;;466    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;467    
;;;468    	return uxReturn;
000236  4630              MOV      r0,r6
;;;469    }
000238  e8bd87f0          POP      {r4-r10,pc}
;;;470    /*-----------------------------------------------------------*/
                          ENDP

                  xEventGroupClearBits PROC
;;;471    
;;;472    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
00023c  b570              PUSH     {r4-r6,lr}
;;;473    {
00023e  460e              MOV      r6,r1
;;;474    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
000240  0004              MOVS     r4,r0
000242  d105              BNE      |L1.592|
;;;475    EventBits_t uxReturn;
;;;476    
;;;477    	/* Check the user is not attempting to clear the bits used by the kernel
;;;478    	itself. */
;;;479    	configASSERT( xEventGroup );
000244  f24012df          MOV      r2,#0x1df
000248  a128              ADR      r1,|L1.748|
00024a  a031              ADR      r0,|L1.784|
00024c  f7fffffe          BL       __2printf
                  |L1.592|
;;;480    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
000250  0e30              LSRS     r0,r6,#24
000252  d005              BEQ      |L1.608|
000254  f44f72f0          MOV      r2,#0x1e0
000258  a124              ADR      r1,|L1.748|
00025a  a02d              ADR      r0,|L1.784|
00025c  f7fffffe          BL       __2printf
                  |L1.608|
;;;481    
;;;482    	taskENTER_CRITICAL();
000260  f7fffffe          BL       vPortEnterCritical
;;;483    	{
;;;484    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;485    
;;;486    		/* The value returned is the event group value prior to the bits being
;;;487    		cleared. */
;;;488    		uxReturn = pxEventBits->uxEventBits;
;;;489    
;;;490    		/* Clear the bits. */
;;;491    		pxEventBits->uxEventBits &= ~uxBitsToClear;
000264  6825              LDR      r5,[r4,#0]
000266  ea250006          BIC      r0,r5,r6
;;;492    	}
;;;493    	taskEXIT_CRITICAL();
00026a  6020              STR      r0,[r4,#0]
00026c  f7fffffe          BL       vPortExitCritical
;;;494    
;;;495    	return uxReturn;
000270  4628              MOV      r0,r5
;;;496    }
000272  bd70              POP      {r4-r6,pc}
;;;497    /*-----------------------------------------------------------*/
                          ENDP

                  xEventGroupGetBitsFromISR PROC
;;;513    
;;;514    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000274  2250              MOVS     r2,#0x50
000276  f3ef8111          MRS      r1,BASEPRI
00027a  f3828811          MSR      BASEPRI,r2
00027e  f3bf8f4f          DSB      
000282  f3bf8f6f          ISB      
;;;515    {
;;;516    UBaseType_t uxSavedInterruptStatus;
;;;517    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;518    EventBits_t uxReturn;
;;;519    
;;;520    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;521    	{
;;;522    		uxReturn = pxEventBits->uxEventBits;
000286  6800              LDR      r0,[r0,#0]
000288  f3818811          MSR      BASEPRI,r1
;;;523    	}
;;;524    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;525    
;;;526    	return uxReturn;
;;;527    }
00028c  4770              BX       lr
;;;528    /*-----------------------------------------------------------*/
                          ENDP

                  vEventGroupDelete PROC
;;;623    
;;;624    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
00028e  e92d41f0          PUSH     {r4-r8,lr}
;;;625    {
000292  4606              MOV      r6,r0
;;;626    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;627    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000294  1d04              ADDS     r4,r0,#4
;;;628    
;;;629    	vTaskSuspendAll();
000296  f7fffffe          BL       vTaskSuspendAll
;;;630    	{
;;;631    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;632    
;;;633    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
;;;634    		{
;;;635    			/* Unblock the task, returning 0 as the event list is being deleted
;;;636    			and	cannot therefore have any bits set. */
;;;637    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
00029a  f1040508          ADD      r5,r4,#8
00029e  f240277d          MOV      r7,#0x27d
;;;638    			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
0002a2  f04f7800          MOV      r8,#0x2000000
0002a6  e00b              B        |L1.704|
                  |L1.680|
0002a8  68e0              LDR      r0,[r4,#0xc]          ;637
0002aa  42a8              CMP      r0,r5                 ;637
0002ac  d104              BNE      |L1.696|
0002ae  463a              MOV      r2,r7                 ;637
0002b0  a10e              ADR      r1,|L1.748|
0002b2  a017              ADR      r0,|L1.784|
0002b4  f7fffffe          BL       __2printf
                  |L1.696|
0002b8  4641              MOV      r1,r8
0002ba  68e0              LDR      r0,[r4,#0xc]
0002bc  f7fffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L1.704|
0002c0  6820              LDR      r0,[r4,#0]            ;633
0002c2  2800              CMP      r0,#0                 ;633
0002c4  d1f0              BNE      |L1.680|
;;;639    		}
;;;640    
;;;641    		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;642    		{
;;;643    			/* The event group can only have been allocated dynamically - free
;;;644    			it again. */
;;;645    			vPortFree( pxEventBits );
0002c6  4630              MOV      r0,r6
0002c8  f7fffffe          BL       vPortFree
;;;646    		}
;;;647    		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;648    		{
;;;649    			/* The event group could have been allocated statically or
;;;650    			dynamically, so check before attempting to free the memory. */
;;;651    			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;652    			{
;;;653    				vPortFree( pxEventBits );
;;;654    			}
;;;655    			else
;;;656    			{
;;;657    				mtCOVERAGE_TEST_MARKER();
;;;658    			}
;;;659    		}
;;;660    		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;661    	}
;;;662    	( void ) xTaskResumeAll();
0002cc  e8bd41f0          POP      {r4-r8,lr}
0002d0  f7ffbffe          B.W      xTaskResumeAll
;;;663    }
;;;664    /*-----------------------------------------------------------*/
                          ENDP

                  vEventGroupSetBitsCallback PROC
;;;667    an interrupt. */
;;;668    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
0002d4  e7fe              B        xEventGroupSetBits
;;;669    {
;;;670    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
;;;671    }
;;;672    /*-----------------------------------------------------------*/
                          ENDP

                  vEventGroupClearBitsCallback PROC
;;;675    an interrupt. */
;;;676    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
0002d6  e7fe              B        xEventGroupClearBits
;;;677    {
;;;678    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
;;;679    }
;;;680    /*-----------------------------------------------------------*/
                          ENDP

                  prvTestWaitCondition PROC
;;;681    
;;;682    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
0002d8  4603              MOV      r3,r0
;;;683    {
;;;684    BaseType_t xWaitConditionMet = pdFALSE;
0002da  2000              MOVS     r0,#0
0002dc  b112              CBZ      r2,|L1.740|
;;;685    
;;;686    	if( xWaitForAllBits == pdFALSE )
;;;687    	{
;;;688    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;689    		set.  Is one already set? */
;;;690    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
;;;691    		{
;;;692    			xWaitConditionMet = pdTRUE;
;;;693    		}
;;;694    		else
;;;695    		{
;;;696    			mtCOVERAGE_TEST_MARKER();
;;;697    		}
;;;698    	}
;;;699    	else
;;;700    	{
;;;701    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;702    		Are they set already? */
;;;703    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
0002de  4399              BICS     r1,r1,r3
0002e0  d002              BEQ      |L1.744|
                  |L1.738|
;;;704    		{
;;;705    			xWaitConditionMet = pdTRUE;
;;;706    		}
;;;707    		else
;;;708    		{
;;;709    			mtCOVERAGE_TEST_MARKER();
;;;710    		}
;;;711    	}
;;;712    
;;;713    	return xWaitConditionMet;
;;;714    }
0002e2  4770              BX       lr
                  |L1.740|
0002e4  420b              TST      r3,r1                 ;690
0002e6  d0fc              BEQ      |L1.738|
                  |L1.744|
0002e8  2001              MOVS     r0,#1                 ;692
0002ea  4770              BX       lr
;;;715    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.748|
0002ec  2e2e5c2e          DCB      "..\\..\\FreeRTOS\\src\\event_groups.c",0
0002f0  2e5c4672
0002f4  65655254
0002f8  4f535c73
0002fc  72635c65
000300  76656e74
000304  5f67726f
000308  7570732e
00030c  6300    
00030e  00                DCB      0
00030f  00                DCB      0
                  |L1.784|
000310  4572726f          DCB      "Error:%s,%d\r\n",0
000314  723a2573
000318  2c25640d
00031c  0a00    
00031e  00                DCB      0
00031f  00                DCB      0
                  |L1.800|
                          DCD      0xe000ed04
