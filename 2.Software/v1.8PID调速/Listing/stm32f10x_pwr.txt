; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\stm32f10x_pwr.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\stm32f10x_pwr.crf ..\..\Libraries\FWlib\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PWR_DeInit PROC
;;;111      */
;;;112    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  070c              LSLS     r4,r1,#28
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;115      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;116    }
;;;117    
                          ENDP

                  PWR_BackupAccessCmd PROC
;;;123      */
;;;124    void PWR_BackupAccessCmd(FunctionalState NewState)
000018  4921              LDR      r1,|L1.160|
;;;125    {
;;;126      /* Check the parameters */
;;;127      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;128      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
00001a  6208              STR      r0,[r1,#0x20]
;;;129    }
00001c  4770              BX       lr
;;;130    
                          ENDP

                  PWR_PVDCmd PROC
;;;136      */
;;;137    void PWR_PVDCmd(FunctionalState NewState)
00001e  4920              LDR      r1,|L1.160|
;;;138    {
;;;139      /* Check the parameters */
;;;140      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;141      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000020  6108              STR      r0,[r1,#0x10]
;;;142    }
000022  4770              BX       lr
;;;143    
                          ENDP

                  PWR_PVDLevelConfig PROC
;;;157      */
;;;158    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000024  4a1f              LDR      r2,|L1.164|
;;;159    {
;;;160      uint32_t tmpreg = 0;
;;;161      /* Check the parameters */
;;;162      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;163      tmpreg = PWR->CR;
000026  6811              LDR      r1,[r2,#0]
;;;164      /* Clear PLS[7:5] bits */
;;;165      tmpreg &= CR_PLS_MASK;
000028  f02101e0          BIC      r1,r1,#0xe0
;;;166      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;167      tmpreg |= PWR_PVDLevel;
00002c  4301              ORRS     r1,r1,r0
;;;168      /* Store the new value */
;;;169      PWR->CR = tmpreg;
00002e  6011              STR      r1,[r2,#0]
;;;170    }
000030  4770              BX       lr
;;;171    
                          ENDP

                  PWR_WakeUpPinCmd PROC
;;;177      */
;;;178    void PWR_WakeUpPinCmd(FunctionalState NewState)
000032  491b              LDR      r1,|L1.160|
;;;179    {
;;;180      /* Check the parameters */
;;;181      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;182      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000034  f8c100a0          STR      r0,[r1,#0xa0]
;;;183    }
000038  4770              BX       lr
;;;184    
                          ENDP

                  PWR_EnterSTOPMode PROC
;;;196      */
;;;197    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
00003a  4b1a              LDR      r3,|L1.164|
;;;198    {
;;;199      uint32_t tmpreg = 0;
;;;200      /* Check the parameters */
;;;201      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;202      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;203      
;;;204      /* Select the regulator state in STOP mode ---------------------------------*/
;;;205      tmpreg = PWR->CR;
00003c  681a              LDR      r2,[r3,#0]
;;;206      /* Clear PDDS and LPDS bits */
;;;207      tmpreg &= CR_DS_MASK;
00003e  f0220203          BIC      r2,r2,#3
;;;208      /* Set LPDS bit according to PWR_Regulator value */
;;;209      tmpreg |= PWR_Regulator;
000042  4302              ORRS     r2,r2,r0
;;;210      /* Store the new value */
;;;211      PWR->CR = tmpreg;
000044  601a              STR      r2,[r3,#0]
;;;212      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;213      SCB->SCR |= SCB_SCR_SLEEPDEEP;
000046  4818              LDR      r0,|L1.168|
000048  6802              LDR      r2,[r0,#0]
00004a  f0420204          ORR      r2,r2,#4
00004e  6002              STR      r2,[r0,#0]
;;;214      
;;;215      /* Select STOP mode entry --------------------------------------------------*/
;;;216      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
000050  2901              CMP      r1,#1
000052  d005              BEQ      |L1.96|
;;;217      {   
;;;218        /* Request Wait For Interrupt */
;;;219        __WFI();
;;;220      }
;;;221      else
;;;222      {
;;;223        /* Request Wait For Event */
;;;224        __WFE();
000054  bf20              WFE      
                  |L1.86|
;;;225      }
;;;226      
;;;227      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;228      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP);  
000056  6801              LDR      r1,[r0,#0]
000058  f0210104          BIC      r1,r1,#4
00005c  6001              STR      r1,[r0,#0]
;;;229    }
00005e  4770              BX       lr
                  |L1.96|
000060  bf30              WFI                            ;219
000062  e7f8              B        |L1.86|
;;;230    
                          ENDP

                  PWR_EnterSTANDBYMode PROC
;;;235      */
;;;236    void PWR_EnterSTANDBYMode(void)
000064  480f              LDR      r0,|L1.164|
;;;237    {
;;;238      /* Clear Wake-up flag */
;;;239      PWR->CR |= PWR_CR_CWUF;
000066  6801              LDR      r1,[r0,#0]
000068  f0410104          ORR      r1,r1,#4
00006c  6001              STR      r1,[r0,#0]
;;;240      /* Select STANDBY mode */
;;;241      PWR->CR |= PWR_CR_PDDS;
00006e  6801              LDR      r1,[r0,#0]
000070  f0410102          ORR      r1,r1,#2
000074  6001              STR      r1,[r0,#0]
;;;242      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;243      SCB->SCR |= SCB_SCR_SLEEPDEEP;
000076  480c              LDR      r0,|L1.168|
000078  6801              LDR      r1,[r0,#0]
00007a  f0410104          ORR      r1,r1,#4
00007e  6001              STR      r1,[r0,#0]
;;;244    /* This option is used to ensure that store operations are completed */
;;;245    #if defined ( __CC_ARM   )
;;;246      __force_stores();
;;;247    #endif
;;;248      /* Request Wait For Interrupt */
;;;249      __WFI();
000080  bf30              WFI      
;;;250    }
000082  4770              BX       lr
;;;251    
                          ENDP

                  PWR_GetFlagStatus PROC
;;;260      */
;;;261    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000084  4a07              LDR      r2,|L1.164|
;;;262    {
000086  4601              MOV      r1,r0
;;;263      FlagStatus bitstatus = RESET;
000088  2000              MOVS     r0,#0
;;;264      /* Check the parameters */
;;;265      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;266      
;;;267      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
00008a  6852              LDR      r2,[r2,#4]
00008c  420a              TST      r2,r1
00008e  d000              BEQ      |L1.146|
;;;268      {
;;;269        bitstatus = SET;
000090  2001              MOVS     r0,#1
                  |L1.146|
;;;270      }
;;;271      else
;;;272      {
;;;273        bitstatus = RESET;
;;;274      }
;;;275      /* Return the flag status */
;;;276      return bitstatus;
;;;277    }
000092  4770              BX       lr
;;;278    
                          ENDP

                  PWR_ClearFlag PROC
;;;286      */
;;;287    void PWR_ClearFlag(uint32_t PWR_FLAG)
000094  4903              LDR      r1,|L1.164|
;;;288    {
;;;289      /* Check the parameters */
;;;290      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;291             
;;;292      PWR->CR |=  PWR_FLAG << 2;
000096  680a              LDR      r2,[r1,#0]
000098  ea420080          ORR      r0,r2,r0,LSL #2
00009c  6008              STR      r0,[r1,#0]
;;;293    }
00009e  4770              BX       lr
;;;294    
                          ENDP

                  |L1.160|
                          DCD      0x420e0000
                  |L1.164|
                          DCD      0x40007000
                  |L1.168|
                          DCD      0xe000ed10
