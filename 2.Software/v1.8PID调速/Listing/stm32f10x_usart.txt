; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\stm32f10x_usart.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_usart.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\stm32f10x_usart.crf ..\..\Libraries\FWlib\src\stm32f10x_usart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;129      */
;;;130    void USART_DeInit(USART_TypeDef* USARTx)
000000  49c4              LDR      r1,|L1.788|
;;;131    {
000002  b510              PUSH     {r4,lr}
;;;132      /* Check the parameters */
;;;133      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;134    
;;;135      if (USARTx == USART1)
000004  4288              CMP      r0,r1
000006  d10a              BNE      |L1.30|
;;;136      {
;;;137        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
000008  2101              MOVS     r1,#1
00000a  038c              LSLS     r4,r1,#14
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;138        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000012  4620              MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  2100              MOVS     r1,#0
00001a  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.30|
;;;139      }
;;;140      else if (USARTx == USART2)
00001e  49be              LDR      r1,|L1.792|
000020  4288              CMP      r0,r1
000022  d102              BNE      |L1.42|
;;;141      {
;;;142        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
000024  2101              MOVS     r1,#1
000026  044c              LSLS     r4,r1,#17
;;;143        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
000028  e010              B        |L1.76|
                  |L1.42|
;;;144      }
;;;145      else if (USARTx == USART3)
00002a  49bc              LDR      r1,|L1.796|
00002c  4288              CMP      r0,r1
00002e  d102              BNE      |L1.54|
;;;146      {
;;;147        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
000030  2101              MOVS     r1,#1
000032  048c              LSLS     r4,r1,#18
;;;148        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
000034  e00a              B        |L1.76|
                  |L1.54|
;;;149      }    
;;;150      else if (USARTx == UART4)
000036  49ba              LDR      r1,|L1.800|
000038  4288              CMP      r0,r1
00003a  d102              BNE      |L1.66|
;;;151      {
;;;152        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  04cc              LSLS     r4,r1,#19
;;;153        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
000040  e004              B        |L1.76|
                  |L1.66|
;;;154      }    
;;;155      else
;;;156      {
;;;157        if (USARTx == UART5)
000042  49b8              LDR      r1,|L1.804|
000044  4288              CMP      r0,r1
000046  d10a              BNE      |L1.94|
;;;158        { 
;;;159          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000048  2101              MOVS     r1,#1
00004a  050c              LSLS     r4,r1,#20
                  |L1.76|
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;160          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
000052  4620              MOV      r0,r4
000054  e8bd4010          POP      {r4,lr}
000058  2100              MOVS     r1,#0
00005a  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
                  |L1.94|
;;;161        }
;;;162      }
;;;163    }
00005e  bd10              POP      {r4,pc}
;;;164    
                          ENDP

                  USART_Init PROC
;;;175      */
;;;176    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000060  b530              PUSH     {r4,r5,lr}
;;;177    {
000062  4604              MOV      r4,r0
;;;178      uint32_t tmpreg = 0x00, apbclock = 0x00;
;;;179      uint32_t integerdivider = 0x00;
;;;180      uint32_t fractionaldivider = 0x00;
;;;181      uint32_t usartxbase = 0;
;;;182      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;183      /* Check the parameters */
;;;184      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;185      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;186      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;187      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;188      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;189      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;190      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;191      /* The hardware flow control is available only for USART1, USART2 and USART3 */
;;;192      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
;;;193      {
;;;194        assert_param(IS_USART_123_PERIPH(USARTx));
;;;195      }
;;;196    
;;;197      usartxbase = (uint32_t)USARTx;
;;;198    
;;;199    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;200      tmpreg = USARTx->CR2;
000064  8a00              LDRH     r0,[r0,#0x10]
000066  b085              SUB      sp,sp,#0x14           ;177
000068  460d              MOV      r5,r1                 ;177
;;;201      /* Clear STOP[13:12] bits */
;;;202      tmpreg &= CR2_STOP_CLEAR_Mask;
00006a  f64c71ff          MOV      r1,#0xcfff
00006e  4008              ANDS     r0,r0,r1
;;;203      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
;;;204      /* Set STOP[13:12] bits according to USART_StopBits value */
;;;205      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
000070  88e9              LDRH     r1,[r5,#6]
000072  4301              ORRS     r1,r1,r0
;;;206      
;;;207      /* Write to USART CR2 */
;;;208      USARTx->CR2 = (uint16_t)tmpreg;
000074  8221              STRH     r1,[r4,#0x10]
;;;209    
;;;210    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;211      tmpreg = USARTx->CR1;
000076  89a0              LDRH     r0,[r4,#0xc]
;;;212      /* Clear M, PCE, PS, TE and RE bits */
;;;213      tmpreg &= CR1_CLEAR_Mask;
000078  f64e11f3          MOV      r1,#0xe9f3
00007c  4008              ANDS     r0,r0,r1
;;;214      /* Configure the USART Word Length, Parity and mode ----------------------- */
;;;215      /* Set the M bits according to USART_WordLength value */
;;;216      /* Set PCE and PS bits according to USART_Parity value */
;;;217      /* Set TE and RE bits according to USART_Mode value */
;;;218      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
00007e  88a9              LDRH     r1,[r5,#4]
000080  892a              LDRH     r2,[r5,#8]
000082  4311              ORRS     r1,r1,r2
000084  896a              LDRH     r2,[r5,#0xa]
000086  4302              ORRS     r2,r2,r0
000088  4311              ORRS     r1,r1,r2
;;;219                USART_InitStruct->USART_Mode;
;;;220      /* Write to USART CR1 */
;;;221      USARTx->CR1 = (uint16_t)tmpreg;
00008a  81a1              STRH     r1,[r4,#0xc]
;;;222    
;;;223    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;224      tmpreg = USARTx->CR3;
00008c  8aa0              LDRH     r0,[r4,#0x14]
;;;225      /* Clear CTSE and RTSE bits */
;;;226      tmpreg &= CR3_CLEAR_Mask;
00008e  f64f41ff          MOV      r1,#0xfcff
000092  4008              ANDS     r0,r0,r1
;;;227      /* Configure the USART HFC -------------------------------------------------*/
;;;228      /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;229      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
000094  89a9              LDRH     r1,[r5,#0xc]
000096  4301              ORRS     r1,r1,r0
;;;230      /* Write to USART CR3 */
;;;231      USARTx->CR3 = (uint16_t)tmpreg;
000098  82a1              STRH     r1,[r4,#0x14]
;;;232    
;;;233    /*---------------------------- USART BRR Configuration -----------------------*/
;;;234      /* Configure the USART Baud Rate -------------------------------------------*/
;;;235      RCC_GetClocksFreq(&RCC_ClocksStatus);
00009a  4668              MOV      r0,sp
00009c  f7fffffe          BL       RCC_GetClocksFreq
;;;236      if (usartxbase == USART1_BASE)
0000a0  489c              LDR      r0,|L1.788|
0000a2  4284              CMP      r4,r0
0000a4  d101              BNE      |L1.170|
;;;237      {
;;;238        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
0000a6  9803              LDR      r0,[sp,#0xc]
0000a8  e000              B        |L1.172|
                  |L1.170|
;;;239      }
;;;240      else
;;;241      {
;;;242        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
0000aa  9802              LDR      r0,[sp,#8]
                  |L1.172|
;;;243      }
;;;244      
;;;245      /* Determine the integer part */
;;;246      if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
0000ac  89a1              LDRH     r1,[r4,#0xc]
0000ae  0409              LSLS     r1,r1,#16
;;;247      {
;;;248        /* Integer part computing in case Oversampling mode is 8 Samples */
;;;249        integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
;;;250      }
;;;251      else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
;;;252      {
;;;253        /* Integer part computing in case Oversampling mode is 16 Samples */
;;;254        integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
0000b0  eb0001c0          ADD      r1,r0,r0,LSL #3
0000b4  eb011000          ADD      r0,r1,r0,LSL #4
0000b8  6829              LDR      r1,[r5,#0]            ;246
0000ba  d501              BPL      |L1.192|
0000bc  0049              LSLS     r1,r1,#1              ;249
0000be  e000              B        |L1.194|
                  |L1.192|
0000c0  0089              LSLS     r1,r1,#2
                  |L1.194|
0000c2  fbb0f0f1          UDIV     r0,r0,r1
;;;255      }
;;;256      tmpreg = (integerdivider / 100) << 4;
0000c6  2264              MOVS     r2,#0x64
0000c8  fbb0f1f2          UDIV     r1,r0,r2
0000cc  0109              LSLS     r1,r1,#4
;;;257    
;;;258      /* Determine the fractional part */
;;;259      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
0000ce  090b              LSRS     r3,r1,#4
0000d0  f06f0518          MVN      r5,#0x18
0000d4  436b              MULS     r3,r5,r3
0000d6  eb000083          ADD      r0,r0,r3,LSL #2
;;;260    
;;;261      /* Implement the fractional part in the register */
;;;262      if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
0000da  89a3              LDRH     r3,[r4,#0xc]
0000dc  041d              LSLS     r5,r3,#16
;;;263      {
;;;264        tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
0000de  f04f0332          MOV      r3,#0x32
0000e2  d506              BPL      |L1.242|
0000e4  eb0300c0          ADD      r0,r3,r0,LSL #3
0000e8  fbb0f0f2          UDIV     r0,r0,r2
0000ec  f0000007          AND      r0,r0,#7
0000f0  e005              B        |L1.254|
                  |L1.242|
;;;265      }
;;;266      else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
;;;267      {
;;;268        tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
0000f2  eb031000          ADD      r0,r3,r0,LSL #4
0000f6  fbb0f0f2          UDIV     r0,r0,r2
0000fa  f000000f          AND      r0,r0,#0xf
                  |L1.254|
0000fe  4308              ORRS     r0,r0,r1
;;;269      }
;;;270      
;;;271      /* Write to USART BRR */
;;;272      USARTx->BRR = (uint16_t)tmpreg;
000100  8120              STRH     r0,[r4,#8]
;;;273    }
000102  b005              ADD      sp,sp,#0x14
000104  bd30              POP      {r4,r5,pc}
;;;274    
                          ENDP

                  USART_StructInit PROC
;;;280      */
;;;281    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000106  f44f5116          MOV      r1,#0x2580
;;;282    {
;;;283      /* USART_InitStruct members default value */
;;;284      USART_InitStruct->USART_BaudRate = 9600;
;;;285      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
00010a  6001              STR      r1,[r0,#0]
00010c  2100              MOVS     r1,#0
00010e  8081              STRH     r1,[r0,#4]
;;;286      USART_InitStruct->USART_StopBits = USART_StopBits_1;
000110  80c1              STRH     r1,[r0,#6]
;;;287      USART_InitStruct->USART_Parity = USART_Parity_No ;
000112  8101              STRH     r1,[r0,#8]
;;;288      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000114  220c              MOVS     r2,#0xc
000116  8142              STRH     r2,[r0,#0xa]
;;;289      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000118  8181              STRH     r1,[r0,#0xc]
;;;290    }
00011a  4770              BX       lr
;;;291    
                          ENDP

                  USART_ClockInit PROC
;;;301      */
;;;302    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
00011c  b510              PUSH     {r4,lr}
;;;303    {
;;;304      uint32_t tmpreg = 0x00;
;;;305      /* Check the parameters */
;;;306      assert_param(IS_USART_123_PERIPH(USARTx));
;;;307      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;308      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;309      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;310      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;311      
;;;312    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;313      tmpreg = USARTx->CR2;
00011e  8a02              LDRH     r2,[r0,#0x10]
;;;314      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;315      tmpreg &= CR2_CLOCK_CLEAR_Mask;
000120  f24f03ff          MOV      r3,#0xf0ff
000124  401a              ANDS     r2,r2,r3
;;;316      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;317      /* Set CLKEN bit according to USART_Clock value */
;;;318      /* Set CPOL bit according to USART_CPOL value */
;;;319      /* Set CPHA bit according to USART_CPHA value */
;;;320      /* Set LBCL bit according to USART_LastBit value */
;;;321      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
000126  880b              LDRH     r3,[r1,#0]
000128  884c              LDRH     r4,[r1,#2]
00012a  4323              ORRS     r3,r3,r4
00012c  888c              LDRH     r4,[r1,#4]
00012e  88c9              LDRH     r1,[r1,#6]
000130  430c              ORRS     r4,r4,r1
000132  4323              ORRS     r3,r3,r4
000134  4313              ORRS     r3,r3,r2
;;;322                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;323      /* Write to USART CR2 */
;;;324      USARTx->CR2 = (uint16_t)tmpreg;
000136  8203              STRH     r3,[r0,#0x10]
;;;325    }
000138  bd10              POP      {r4,pc}
;;;326    
                          ENDP

                  USART_ClockStructInit PROC
;;;332      */
;;;333    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
00013a  2100              MOVS     r1,#0
;;;334    {
;;;335      /* USART_ClockInitStruct members default value */
;;;336      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
00013c  8001              STRH     r1,[r0,#0]
;;;337      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
00013e  8041              STRH     r1,[r0,#2]
;;;338      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000140  8081              STRH     r1,[r0,#4]
;;;339      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000142  80c1              STRH     r1,[r0,#6]
;;;340    }
000144  4770              BX       lr
;;;341    
                          ENDP

                  USART_Cmd PROC
;;;350      */
;;;351    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000146  2900              CMP      r1,#0
;;;352    {
;;;353      /* Check the parameters */
;;;354      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;355      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;356      
;;;357      if (NewState != DISABLE)
;;;358      {
;;;359        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;360        USARTx->CR1 |= CR1_UE_Set;
;;;361      }
;;;362      else
;;;363      {
;;;364        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;365        USARTx->CR1 &= CR1_UE_Reset;
000148  8981              LDRH     r1,[r0,#0xc]
00014a  d002              BEQ      |L1.338|
00014c  f4415100          ORR      r1,r1,#0x2000         ;360
000150  e001              B        |L1.342|
                  |L1.338|
000152  f4215100          BIC      r1,r1,#0x2000
                  |L1.342|
000156  8181              STRH     r1,[r0,#0xc]          ;360
;;;366      }
;;;367    }
000158  4770              BX       lr
;;;368    
                          ENDP

                  USART_ITConfig PROC
;;;387      */
;;;388    void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
00015a  b510              PUSH     {r4,lr}
;;;389    {
;;;390      uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
;;;391      uint32_t usartxbase = 0x00;
;;;392      /* Check the parameters */
;;;393      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;394      assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;395      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;396      /* The CTS interrupt is not available for UART4 and UART5 */
;;;397      if (USART_IT == USART_IT_CTS)
;;;398      {
;;;399        assert_param(IS_USART_123_PERIPH(USARTx));
;;;400      }   
;;;401      
;;;402      usartxbase = (uint32_t)USARTx;
;;;403    
;;;404      /* Get the USART register index */
;;;405      usartreg = (((uint8_t)USART_IT) >> 0x05);
00015c  f3c11342          UBFX     r3,r1,#5,#3
;;;406    
;;;407      /* Get the interrupt position */
;;;408      itpos = USART_IT & IT_Mask;
000160  f001041f          AND      r4,r1,#0x1f
;;;409      itmask = (((uint32_t)0x01) << itpos);
000164  2101              MOVS     r1,#1
000166  40a1              LSLS     r1,r1,r4
;;;410        
;;;411      if (usartreg == 0x01) /* The IT is in CR1 register */
000168  2b01              CMP      r3,#1
00016a  d007              BEQ      |L1.380|
;;;412      {
;;;413        usartxbase += 0x0C;
;;;414      }
;;;415      else if (usartreg == 0x02) /* The IT is in CR2 register */
00016c  2b02              CMP      r3,#2
00016e  d007              BEQ      |L1.384|
000170  3014              ADDS     r0,r0,#0x14
                  |L1.370|
;;;416      {
;;;417        usartxbase += 0x10;
;;;418      }
;;;419      else /* The IT is in CR3 register */
;;;420      {
;;;421        usartxbase += 0x14; 
;;;422      }
;;;423      if (NewState != DISABLE)
000172  2a00              CMP      r2,#0
;;;424      {
;;;425        *(__IO uint32_t*)usartxbase  |= itmask;
;;;426      }
;;;427      else
;;;428      {
;;;429        *(__IO uint32_t*)usartxbase &= ~itmask;
000174  6802              LDR      r2,[r0,#0]
000176  d005              BEQ      |L1.388|
000178  430a              ORRS     r2,r2,r1              ;425
00017a  e004              B        |L1.390|
                  |L1.380|
00017c  300c              ADDS     r0,r0,#0xc            ;425
00017e  e7f8              B        |L1.370|
                  |L1.384|
000180  3010              ADDS     r0,r0,#0x10           ;413
000182  e7f6              B        |L1.370|
                  |L1.388|
000184  438a              BICS     r2,r2,r1
                  |L1.390|
000186  6002              STR      r2,[r0,#0]            ;425
;;;430      }
;;;431    }
000188  bd10              POP      {r4,pc}
;;;432    
                          ENDP

                  USART_DMACmd PROC
;;;447      */
;;;448    void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
00018a  2a00              CMP      r2,#0
;;;449    {
;;;450      /* Check the parameters */
;;;451      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;452      assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;453      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;454      if (NewState != DISABLE)
;;;455      {
;;;456        /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;457           DMAR bits in the USART CR3 register */
;;;458        USARTx->CR3 |= USART_DMAReq;
;;;459      }
;;;460      else
;;;461      {
;;;462        /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;463           DMAR bits in the USART CR3 register */
;;;464        USARTx->CR3 &= (uint16_t)~USART_DMAReq;
00018c  8a82              LDRH     r2,[r0,#0x14]
00018e  d001              BEQ      |L1.404|
000190  430a              ORRS     r2,r2,r1              ;458
000192  e000              B        |L1.406|
                  |L1.404|
000194  438a              BICS     r2,r2,r1
                  |L1.406|
000196  8282              STRH     r2,[r0,#0x14]         ;458
;;;465      }
;;;466    }
000198  4770              BX       lr
;;;467    
                          ENDP

                  USART_SetAddress PROC
;;;475      */
;;;476    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
00019a  8a02              LDRH     r2,[r0,#0x10]
;;;477    {
;;;478      /* Check the parameters */
;;;479      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;480      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;481        
;;;482      /* Clear the USART address */
;;;483      USARTx->CR2 &= CR2_Address_Mask;
00019c  f022020f          BIC      r2,r2,#0xf
0001a0  8202              STRH     r2,[r0,#0x10]
;;;484      /* Set the USART address node */
;;;485      USARTx->CR2 |= USART_Address;
0001a2  8a02              LDRH     r2,[r0,#0x10]
0001a4  430a              ORRS     r2,r2,r1
0001a6  8202              STRH     r2,[r0,#0x10]
;;;486    }
0001a8  4770              BX       lr
;;;487    
                          ENDP

                  USART_WakeUpConfig PROC
;;;498      */
;;;499    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
0001aa  8982              LDRH     r2,[r0,#0xc]
;;;500    {
;;;501      /* Check the parameters */
;;;502      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;503      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;504      
;;;505      USARTx->CR1 &= CR1_WAKE_Mask;
0001ac  f4226200          BIC      r2,r2,#0x800
0001b0  8182              STRH     r2,[r0,#0xc]
;;;506      USARTx->CR1 |= USART_WakeUp;
0001b2  8982              LDRH     r2,[r0,#0xc]
0001b4  430a              ORRS     r2,r2,r1
0001b6  8182              STRH     r2,[r0,#0xc]
;;;507    }
0001b8  4770              BX       lr
;;;508    
                          ENDP

                  USART_ReceiverWakeUpCmd PROC
;;;517      */
;;;518    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0001ba  2900              CMP      r1,#0
;;;519    {
;;;520      /* Check the parameters */
;;;521      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;522      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;523      
;;;524      if (NewState != DISABLE)
;;;525      {
;;;526        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;527        USARTx->CR1 |= CR1_RWU_Set;
;;;528      }
;;;529      else
;;;530      {
;;;531        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;532        USARTx->CR1 &= CR1_RWU_Reset;
0001bc  8981              LDRH     r1,[r0,#0xc]
0001be  d002              BEQ      |L1.454|
0001c0  f0410102          ORR      r1,r1,#2              ;527
0001c4  e001              B        |L1.458|
                  |L1.454|
0001c6  f0210102          BIC      r1,r1,#2
                  |L1.458|
0001ca  8181              STRH     r1,[r0,#0xc]          ;527
;;;533      }
;;;534    }
0001cc  4770              BX       lr
;;;535    
                          ENDP

                  USART_LINBreakDetectLengthConfig PROC
;;;546      */
;;;547    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
0001ce  8a02              LDRH     r2,[r0,#0x10]
;;;548    {
;;;549      /* Check the parameters */
;;;550      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;551      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;552      
;;;553      USARTx->CR2 &= CR2_LBDL_Mask;
0001d0  f0220220          BIC      r2,r2,#0x20
0001d4  8202              STRH     r2,[r0,#0x10]
;;;554      USARTx->CR2 |= USART_LINBreakDetectLength;  
0001d6  8a02              LDRH     r2,[r0,#0x10]
0001d8  430a              ORRS     r2,r2,r1
0001da  8202              STRH     r2,[r0,#0x10]
;;;555    }
0001dc  4770              BX       lr
;;;556    
                          ENDP

                  USART_LINCmd PROC
;;;565      */
;;;566    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0001de  2900              CMP      r1,#0
;;;567    {
;;;568      /* Check the parameters */
;;;569      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;570      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;571      
;;;572      if (NewState != DISABLE)
;;;573      {
;;;574        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;575        USARTx->CR2 |= CR2_LINEN_Set;
;;;576      }
;;;577      else
;;;578      {
;;;579        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;580        USARTx->CR2 &= CR2_LINEN_Reset;
0001e0  8a01              LDRH     r1,[r0,#0x10]
0001e2  d002              BEQ      |L1.490|
0001e4  f4414180          ORR      r1,r1,#0x4000         ;575
0001e8  e001              B        |L1.494|
                  |L1.490|
0001ea  f4214180          BIC      r1,r1,#0x4000
                  |L1.494|
0001ee  8201              STRH     r1,[r0,#0x10]         ;575
;;;581      }
;;;582    }
0001f0  4770              BX       lr
;;;583    
                          ENDP

                  USART_SendData PROC
;;;591      */
;;;592    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
0001f2  f3c10108          UBFX     r1,r1,#0,#9
;;;593    {
;;;594      /* Check the parameters */
;;;595      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;596      assert_param(IS_USART_DATA(Data)); 
;;;597        
;;;598      /* Transmit Data */
;;;599      USARTx->DR = (Data & (uint16_t)0x01FF);
0001f6  8081              STRH     r1,[r0,#4]
;;;600    }
0001f8  4770              BX       lr
;;;601    
                          ENDP

                  USART_ReceiveData PROC
;;;608      */
;;;609    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
0001fa  8880              LDRH     r0,[r0,#4]
;;;610    {
;;;611      /* Check the parameters */
;;;612      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;613      
;;;614      /* Receive Data */
;;;615      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
0001fc  f3c00008          UBFX     r0,r0,#0,#9
;;;616    }
000200  4770              BX       lr
;;;617    
                          ENDP

                  USART_SendBreak PROC
;;;624      */
;;;625    void USART_SendBreak(USART_TypeDef* USARTx)
000202  8981              LDRH     r1,[r0,#0xc]
;;;626    {
;;;627      /* Check the parameters */
;;;628      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;629      
;;;630      /* Send break characters */
;;;631      USARTx->CR1 |= CR1_SBK_Set;
000204  f0410101          ORR      r1,r1,#1
000208  8181              STRH     r1,[r0,#0xc]
;;;632    }
00020a  4770              BX       lr
;;;633    
                          ENDP

                  USART_SetGuardTime PROC
;;;640      */
;;;641    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
00020c  8b02              LDRH     r2,[r0,#0x18]
;;;642    {    
;;;643      /* Check the parameters */
;;;644      assert_param(IS_USART_123_PERIPH(USARTx));
;;;645      
;;;646      /* Clear the USART Guard time */
;;;647      USARTx->GTPR &= GTPR_LSB_Mask;
00020e  b2d2              UXTB     r2,r2
000210  8302              STRH     r2,[r0,#0x18]
;;;648      /* Set the USART guard time */
;;;649      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
000212  8b02              LDRH     r2,[r0,#0x18]
000214  ea422101          ORR      r1,r2,r1,LSL #8
000218  8301              STRH     r1,[r0,#0x18]
;;;650    }
00021a  4770              BX       lr
;;;651    
                          ENDP

                  USART_SetPrescaler PROC
;;;660      */
;;;661    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
00021c  8b02              LDRH     r2,[r0,#0x18]
;;;662    { 
;;;663      /* Check the parameters */
;;;664      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;665      
;;;666      /* Clear the USART prescaler */
;;;667      USARTx->GTPR &= GTPR_MSB_Mask;
00021e  f402427f          AND      r2,r2,#0xff00
000222  8302              STRH     r2,[r0,#0x18]
;;;668      /* Set the USART prescaler */
;;;669      USARTx->GTPR |= USART_Prescaler;
000224  8b02              LDRH     r2,[r0,#0x18]
000226  430a              ORRS     r2,r2,r1
000228  8302              STRH     r2,[r0,#0x18]
;;;670    }
00022a  4770              BX       lr
;;;671    
                          ENDP

                  USART_SmartCardCmd PROC
;;;679      */
;;;680    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
00022c  2900              CMP      r1,#0
;;;681    {
;;;682      /* Check the parameters */
;;;683      assert_param(IS_USART_123_PERIPH(USARTx));
;;;684      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;685      if (NewState != DISABLE)
;;;686      {
;;;687        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;688        USARTx->CR3 |= CR3_SCEN_Set;
;;;689      }
;;;690      else
;;;691      {
;;;692        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;693        USARTx->CR3 &= CR3_SCEN_Reset;
00022e  8a81              LDRH     r1,[r0,#0x14]
000230  d002              BEQ      |L1.568|
000232  f0410120          ORR      r1,r1,#0x20           ;688
000236  e001              B        |L1.572|
                  |L1.568|
000238  f0210120          BIC      r1,r1,#0x20
                  |L1.572|
00023c  8281              STRH     r1,[r0,#0x14]         ;688
;;;694      }
;;;695    }
00023e  4770              BX       lr
;;;696    
                          ENDP

                  USART_SmartCardNACKCmd PROC
;;;704      */
;;;705    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000240  2900              CMP      r1,#0
;;;706    {
;;;707      /* Check the parameters */
;;;708      assert_param(IS_USART_123_PERIPH(USARTx));  
;;;709      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;710      if (NewState != DISABLE)
;;;711      {
;;;712        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;713        USARTx->CR3 |= CR3_NACK_Set;
;;;714      }
;;;715      else
;;;716      {
;;;717        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;718        USARTx->CR3 &= CR3_NACK_Reset;
000242  8a81              LDRH     r1,[r0,#0x14]
000244  d002              BEQ      |L1.588|
000246  f0410110          ORR      r1,r1,#0x10           ;713
00024a  e001              B        |L1.592|
                  |L1.588|
00024c  f0210110          BIC      r1,r1,#0x10
                  |L1.592|
000250  8281              STRH     r1,[r0,#0x14]         ;713
;;;719      }
;;;720    }
000252  4770              BX       lr
;;;721    
                          ENDP

                  USART_HalfDuplexCmd PROC
;;;730      */
;;;731    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000254  2900              CMP      r1,#0
;;;732    {
;;;733      /* Check the parameters */
;;;734      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;735      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;736      
;;;737      if (NewState != DISABLE)
;;;738      {
;;;739        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;740        USARTx->CR3 |= CR3_HDSEL_Set;
;;;741      }
;;;742      else
;;;743      {
;;;744        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;745        USARTx->CR3 &= CR3_HDSEL_Reset;
000256  8a81              LDRH     r1,[r0,#0x14]
000258  d002              BEQ      |L1.608|
00025a  f0410108          ORR      r1,r1,#8              ;740
00025e  e001              B        |L1.612|
                  |L1.608|
000260  f0210108          BIC      r1,r1,#8
                  |L1.612|
000264  8281              STRH     r1,[r0,#0x14]         ;740
;;;746      }
;;;747    }
000266  4770              BX       lr
;;;748    
                          ENDP

                  USART_OverSampling8Cmd PROC
;;;761      */
;;;762    void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000268  2900              CMP      r1,#0
;;;763    {
;;;764      /* Check the parameters */
;;;765      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;766      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;767      
;;;768      if (NewState != DISABLE)
;;;769      {
;;;770        /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
;;;771        USARTx->CR1 |= CR1_OVER8_Set;
;;;772      }
;;;773      else
;;;774      {
;;;775        /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
;;;776        USARTx->CR1 &= CR1_OVER8_Reset;
00026a  8981              LDRH     r1,[r0,#0xc]
00026c  d002              BEQ      |L1.628|
00026e  f4414100          ORR      r1,r1,#0x8000         ;771
000272  e001              B        |L1.632|
                  |L1.628|
000274  f3c1010e          UBFX     r1,r1,#0,#15
                  |L1.632|
000278  8181              STRH     r1,[r0,#0xc]          ;771
;;;777      }
;;;778    }
00027a  4770              BX       lr
;;;779    
                          ENDP

                  USART_OneBitMethodCmd PROC
;;;788      */
;;;789    void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
00027c  2900              CMP      r1,#0
;;;790    {
;;;791      /* Check the parameters */
;;;792      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;793      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;794      
;;;795      if (NewState != DISABLE)
;;;796      {
;;;797        /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
;;;798        USARTx->CR3 |= CR3_ONEBITE_Set;
;;;799      }
;;;800      else
;;;801      {
;;;802        /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
;;;803        USARTx->CR3 &= CR3_ONEBITE_Reset;
00027e  8a81              LDRH     r1,[r0,#0x14]
000280  d002              BEQ      |L1.648|
000282  f4416100          ORR      r1,r1,#0x800          ;798
000286  e001              B        |L1.652|
                  |L1.648|
000288  f4216100          BIC      r1,r1,#0x800
                  |L1.652|
00028c  8281              STRH     r1,[r0,#0x14]         ;798
;;;804      }
;;;805    }
00028e  4770              BX       lr
;;;806    
                          ENDP

                  USART_IrDAConfig PROC
;;;817      */
;;;818    void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
000290  8a82              LDRH     r2,[r0,#0x14]
;;;819    {
;;;820      /* Check the parameters */
;;;821      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;822      assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;823        
;;;824      USARTx->CR3 &= CR3_IRLP_Mask;
000292  f0220204          BIC      r2,r2,#4
000296  8282              STRH     r2,[r0,#0x14]
;;;825      USARTx->CR3 |= USART_IrDAMode;
000298  8a82              LDRH     r2,[r0,#0x14]
00029a  430a              ORRS     r2,r2,r1
00029c  8282              STRH     r2,[r0,#0x14]
;;;826    }
00029e  4770              BX       lr
;;;827    
                          ENDP

                  USART_IrDACmd PROC
;;;836      */
;;;837    void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
0002a0  2900              CMP      r1,#0
;;;838    {
;;;839      /* Check the parameters */
;;;840      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;841      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;842        
;;;843      if (NewState != DISABLE)
;;;844      {
;;;845        /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;846        USARTx->CR3 |= CR3_IREN_Set;
;;;847      }
;;;848      else
;;;849      {
;;;850        /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;851        USARTx->CR3 &= CR3_IREN_Reset;
0002a2  8a81              LDRH     r1,[r0,#0x14]
0002a4  d002              BEQ      |L1.684|
0002a6  f0410102          ORR      r1,r1,#2              ;846
0002aa  e001              B        |L1.688|
                  |L1.684|
0002ac  f0210102          BIC      r1,r1,#2
                  |L1.688|
0002b0  8281              STRH     r1,[r0,#0x14]         ;846
;;;852      }
;;;853    }
0002b2  4770              BX       lr
;;;854    
                          ENDP

                  USART_GetFlagStatus PROC
;;;873      */
;;;874    FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
0002b4  4602              MOV      r2,r0
;;;875    {
;;;876      FlagStatus bitstatus = RESET;
0002b6  2000              MOVS     r0,#0
;;;877      /* Check the parameters */
;;;878      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;879      assert_param(IS_USART_FLAG(USART_FLAG));
;;;880      /* The CTS flag is not available for UART4 and UART5 */
;;;881      if (USART_FLAG == USART_FLAG_CTS)
;;;882      {
;;;883        assert_param(IS_USART_123_PERIPH(USARTx));
;;;884      }  
;;;885      
;;;886      if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
0002b8  8812              LDRH     r2,[r2,#0]
0002ba  420a              TST      r2,r1
0002bc  d000              BEQ      |L1.704|
;;;887      {
;;;888        bitstatus = SET;
0002be  2001              MOVS     r0,#1
                  |L1.704|
;;;889      }
;;;890      else
;;;891      {
;;;892        bitstatus = RESET;
;;;893      }
;;;894      return bitstatus;
;;;895    }
0002c0  4770              BX       lr
;;;896    
                          ENDP

                  USART_ClearFlag PROC
;;;922      */
;;;923    void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
0002c2  43c9              MVNS     r1,r1
;;;924    {
;;;925      /* Check the parameters */
;;;926      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;927      assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;928      /* The CTS flag is not available for UART4 and UART5 */
;;;929      if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
;;;930      {
;;;931        assert_param(IS_USART_123_PERIPH(USARTx));
;;;932      } 
;;;933       
;;;934      USARTx->SR = (uint16_t)~USART_FLAG;
0002c4  8001              STRH     r1,[r0,#0]
;;;935    }
0002c6  4770              BX       lr
;;;936    
                          ENDP

                  USART_GetITStatus PROC
;;;955      */
;;;956    ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
0002c8  b570              PUSH     {r4-r6,lr}
;;;957    {
;;;958      uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
;;;959      ITStatus bitstatus = RESET;
;;;960      /* Check the parameters */
;;;961      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;962      assert_param(IS_USART_GET_IT(USART_IT));
;;;963      /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;964      if (USART_IT == USART_IT_CTS)
;;;965      {
;;;966        assert_param(IS_USART_123_PERIPH(USARTx));
;;;967      }   
;;;968      
;;;969      /* Get the USART register index */
;;;970      usartreg = (((uint8_t)USART_IT) >> 0x05);
;;;971      /* Get the interrupt position */
;;;972      itmask = USART_IT & IT_Mask;
0002ca  f001051f          AND      r5,r1,#0x1f
;;;973      itmask = (uint32_t)0x01 << itmask;
0002ce  2601              MOVS     r6,#1
0002d0  2400              MOVS     r4,#0                 ;959
0002d2  f3c11342          UBFX     r3,r1,#5,#3           ;970
0002d6  fa06f205          LSL      r2,r6,r5
;;;974      
;;;975      if (usartreg == 0x01) /* The IT  is in CR1 register */
0002da  2b01              CMP      r3,#1
0002dc  d00f              BEQ      |L1.766|
;;;976      {
;;;977        itmask &= USARTx->CR1;
;;;978      }
;;;979      else if (usartreg == 0x02) /* The IT  is in CR2 register */
0002de  2b02              CMP      r3,#2
0002e0  d00f              BEQ      |L1.770|
;;;980      {
;;;981        itmask &= USARTx->CR2;
;;;982      }
;;;983      else /* The IT  is in CR3 register */
;;;984      {
;;;985        itmask &= USARTx->CR3;
0002e2  8a83              LDRH     r3,[r0,#0x14]
                  |L1.740|
;;;986      }
;;;987      
;;;988      bitpos = USART_IT >> 0x08;
0002e4  ea4f2111          LSR      r1,r1,#8
;;;989      bitpos = (uint32_t)0x01 << bitpos;
;;;990      bitpos &= USARTx->SR;
0002e8  8800              LDRH     r0,[r0,#0]
0002ea  4213              TST      r3,r2                 ;981
0002ec  fa06f601          LSL      r6,r6,r1              ;989
0002f0  ea000006          AND      r0,r0,r6
0002f4  d001              BEQ      |L1.762|
;;;991      if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
0002f6  b100              CBZ      r0,|L1.762|
;;;992      {
;;;993        bitstatus = SET;
0002f8  2401              MOVS     r4,#1
                  |L1.762|
;;;994      }
;;;995      else
;;;996      {
;;;997        bitstatus = RESET;
;;;998      }
;;;999      
;;;1000     return bitstatus;  
0002fa  4620              MOV      r0,r4
;;;1001   }
0002fc  bd70              POP      {r4-r6,pc}
                  |L1.766|
0002fe  8983              LDRH     r3,[r0,#0xc]          ;977
000300  e7f0              B        |L1.740|
                  |L1.770|
000302  8a03              LDRH     r3,[r0,#0x10]         ;981
000304  e7ee              B        |L1.740|
;;;1002   
                          ENDP

                  USART_ClearITPendingBit PROC
;;;1029     */
;;;1030   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
000306  0a0a              LSRS     r2,r1,#8
;;;1031   {
;;;1032     uint16_t bitpos = 0x00, itmask = 0x00;
;;;1033     /* Check the parameters */
;;;1034     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1035     assert_param(IS_USART_CLEAR_IT(USART_IT));
;;;1036     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1037     if (USART_IT == USART_IT_CTS)
;;;1038     {
;;;1039       assert_param(IS_USART_123_PERIPH(USARTx));
;;;1040     }   
;;;1041     
;;;1042     bitpos = USART_IT >> 0x08;
;;;1043     itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
000308  2101              MOVS     r1,#1
00030a  4091              LSLS     r1,r1,r2
;;;1044     USARTx->SR = (uint16_t)~itmask;
00030c  43c9              MVNS     r1,r1
00030e  8001              STRH     r1,[r0,#0]
;;;1045   }
000310  4770              BX       lr
;;;1046   /**
                          ENDP

000312  0000              DCW      0x0000
                  |L1.788|
                          DCD      0x40013800
                  |L1.792|
                          DCD      0x40004400
                  |L1.796|
                          DCD      0x40004800
                  |L1.800|
                          DCD      0x40004c00
                  |L1.804|
                          DCD      0x40005000
