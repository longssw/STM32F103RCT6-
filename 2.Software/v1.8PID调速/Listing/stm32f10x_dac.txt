; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\stm32f10x_dac.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_dac.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\stm32f10x_dac.crf ..\..\Libraries\FWlib\src\stm32f10x_dac.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DAC_DeInit PROC
;;;97       */
;;;98     void DAC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;99     {
;;;100      /* Enable DAC reset state */
;;;101      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
000002  2101              MOVS     r1,#1
000004  074c              LSLS     r4,r1,#29
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;102      /* Release DAC from reset state */
;;;103      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;104    }
;;;105    
                          ENDP

                  DAC_Init PROC
;;;116      */
;;;117    void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
000018  b530              PUSH     {r4,r5,lr}
;;;118    {
;;;119      uint32_t tmpreg1 = 0, tmpreg2 = 0;
;;;120      /* Check the DAC parameters */
;;;121      assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
;;;122      assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
;;;123      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
;;;124      assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
;;;125    /*---------------------------- DAC CR Configuration --------------------------*/
;;;126      /* Get the DAC CR value */
;;;127      tmpreg1 = DAC->CR;
00001a  4c37              LDR      r4,|L1.248|
00001c  6823              LDR      r3,[r4,#0]
;;;128      /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
;;;129      tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
00001e  f64072fe          MOV      r2,#0xffe
000022  4082              LSLS     r2,r2,r0
000024  4393              BICS     r3,r3,r2
000026  e9d12500          LDRD     r2,r5,[r1,#0]
;;;130      /* Configure for the selected DAC channel: buffer output, trigger, wave generation,
;;;131         mask/amplitude for wave generation */
;;;132      /* Set TSELx and TENx bits according to DAC_Trigger value */
;;;133      /* Set WAVEx bits according to DAC_WaveGeneration value */
;;;134      /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
;;;135      /* Set BOFFx bit according to DAC_OutputBuffer value */   
;;;136      tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
00002a  432a              ORRS     r2,r2,r5
00002c  e9d15102          LDRD     r5,r1,[r1,#8]
000030  430d              ORRS     r5,r5,r1
000032  432a              ORRS     r2,r2,r5
;;;137                 DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
;;;138      /* Calculate CR register value depending on DAC_Channel */
;;;139      tmpreg1 |= tmpreg2 << DAC_Channel;
000034  4082              LSLS     r2,r2,r0
000036  431a              ORRS     r2,r2,r3
;;;140      /* Write to DAC CR */
;;;141      DAC->CR = tmpreg1;
000038  6022              STR      r2,[r4,#0]
;;;142    }
00003a  bd30              POP      {r4,r5,pc}
;;;143    
                          ENDP

                  DAC_StructInit PROC
;;;149      */
;;;150    void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
00003c  2100              MOVS     r1,#0
;;;151    {
;;;152    /*--------------- Reset DAC init structure parameters values -----------------*/
;;;153      /* Initialize the DAC_Trigger member */
;;;154      DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
;;;155      /* Initialize the DAC_WaveGeneration member */
;;;156      DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
00003e  6001              STR      r1,[r0,#0]
;;;157      /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
;;;158      DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
000040  6041              STR      r1,[r0,#4]
;;;159      /* Initialize the DAC_OutputBuffer member */
;;;160      DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
000042  6081              STR      r1,[r0,#8]
000044  60c1              STR      r1,[r0,#0xc]
;;;161    }
000046  4770              BX       lr
;;;162    
                          ENDP

                  DAC_Cmd PROC
;;;172      */
;;;173    void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
000048  4b2b              LDR      r3,|L1.248|
;;;174    {
;;;175      /* Check the parameters */
;;;176      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;177      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;178      if (NewState != DISABLE)
;;;179      {
;;;180        /* Enable the selected DAC channel */
;;;181        DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
00004a  2201              MOVS     r2,#1
00004c  4082              LSLS     r2,r2,r0
;;;182      }
;;;183      else
;;;184      {
;;;185        /* Disable the selected DAC channel */
;;;186        DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
00004e  6818              LDR      r0,[r3,#0]
000050  b109              CBZ      r1,|L1.86|
000052  4310              ORRS     r0,r0,r2              ;181
000054  e000              B        |L1.88|
                  |L1.86|
000056  4390              BICS     r0,r0,r2
                  |L1.88|
000058  6018              STR      r0,[r3,#0]            ;181
;;;187      }
;;;188    }
00005a  4770              BX       lr
;;;189    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
                          ENDP

                  DAC_DMACmd PROC
;;;232      */
;;;233    void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
00005c  4b26              LDR      r3,|L1.248|
;;;234    {
;;;235      /* Check the parameters */
;;;236      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;237      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;238      if (NewState != DISABLE)
;;;239      {
;;;240        /* Enable the selected DAC channel DMA request */
;;;241        DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
00005e  149a              ASRS     r2,r3,#18
000060  4082              LSLS     r2,r2,r0
;;;242      }
;;;243      else
;;;244      {
;;;245        /* Disable the selected DAC channel DMA request */
;;;246        DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
000062  6818              LDR      r0,[r3,#0]
000064  b109              CBZ      r1,|L1.106|
000066  4310              ORRS     r0,r0,r2              ;241
000068  e000              B        |L1.108|
                  |L1.106|
00006a  4390              BICS     r0,r0,r2
                  |L1.108|
00006c  6018              STR      r0,[r3,#0]            ;241
;;;247      }
;;;248    }
00006e  4770              BX       lr
;;;249    
                          ENDP

                  DAC_SoftwareTriggerCmd PROC
;;;259      */
;;;260    void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
000070  4b21              LDR      r3,|L1.248|
;;;261    {
;;;262      /* Check the parameters */
;;;263      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;264      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;265      if (NewState != DISABLE)
;;;266      {
;;;267        /* Enable software trigger for the selected DAC channel */
;;;268        DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
000072  1d1b              ADDS     r3,r3,#4
000074  0902              LSRS     r2,r0,#4
000076  2001              MOVS     r0,#1
000078  4090              LSLS     r0,r0,r2
00007a  2900              CMP      r1,#0                 ;265
;;;269      }
;;;270      else
;;;271      {
;;;272        /* Disable software trigger for the selected DAC channel */
;;;273        DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
00007c  6819              LDR      r1,[r3,#0]
00007e  d001              BEQ      |L1.132|
000080  4301              ORRS     r1,r1,r0              ;268
000082  e000              B        |L1.134|
                  |L1.132|
000084  4381              BICS     r1,r1,r0
                  |L1.134|
000086  6019              STR      r1,[r3,#0]            ;268
;;;274      }
;;;275    }
000088  4770              BX       lr
;;;276    
                          ENDP

                  DAC_DualSoftwareTriggerCmd PROC
;;;283      */
;;;284    void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
00008a  491b              LDR      r1,|L1.248|
;;;285    {
;;;286      /* Check the parameters */
;;;287      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;288      if (NewState != DISABLE)
;;;289      {
;;;290        /* Enable software trigger for both DAC channels */
;;;291        DAC->SWTRIGR |= DUAL_SWTRIG_SET ;
00008c  1d09              ADDS     r1,r1,#4
00008e  2800              CMP      r0,#0                 ;288
;;;292      }
;;;293      else
;;;294      {
;;;295        /* Disable software trigger for both DAC channels */
;;;296        DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
000090  6808              LDR      r0,[r1,#0]
000092  d002              BEQ      |L1.154|
000094  f0400003          ORR      r0,r0,#3              ;291
000098  e001              B        |L1.158|
                  |L1.154|
00009a  f0200003          BIC      r0,r0,#3
                  |L1.158|
00009e  6008              STR      r0,[r1,#0]            ;291
;;;297      }
;;;298    }
0000a0  4770              BX       lr
;;;299    
                          ENDP

                  DAC_WaveGenerationCmd PROC
;;;313      */
;;;314    void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
0000a2  4b15              LDR      r3,|L1.248|
;;;315    {
;;;316      /* Check the parameters */
;;;317      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;318      assert_param(IS_DAC_WAVE(DAC_Wave)); 
;;;319      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;320      if (NewState != DISABLE)
;;;321      {
;;;322        /* Enable the selected wave generation for the selected DAC channel */
;;;323        DAC->CR |= DAC_Wave << DAC_Channel;
0000a4  4081              LSLS     r1,r1,r0
;;;324      }
;;;325      else
;;;326      {
;;;327        /* Disable the selected wave generation for the selected DAC channel */
;;;328        DAC->CR &= ~(DAC_Wave << DAC_Channel);
0000a6  6818              LDR      r0,[r3,#0]
0000a8  b10a              CBZ      r2,|L1.174|
0000aa  4308              ORRS     r0,r0,r1              ;323
0000ac  e000              B        |L1.176|
                  |L1.174|
0000ae  4388              BICS     r0,r0,r1
                  |L1.176|
0000b0  6018              STR      r0,[r3,#0]            ;323
;;;329      }
;;;330    }
0000b2  4770              BX       lr
;;;331    
                          ENDP

                  DAC_SetChannel1Data PROC
;;;341      */
;;;342    void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
0000b4  4a10              LDR      r2,|L1.248|
;;;343    {  
0000b6  b508              PUSH     {r3,lr}
;;;344      __IO uint32_t tmp = 0;
;;;345      
;;;346      /* Check the parameters */
;;;347      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;348      assert_param(IS_DAC_DATA(Data));
;;;349      
;;;350      tmp = (uint32_t)DAC_BASE; 
;;;351      tmp += DHR12R1_OFFSET + DAC_Align;
0000b8  4410              ADD      r0,r0,r2
0000ba  3008              ADDS     r0,r0,#8
;;;352    
;;;353      /* Set the DAC channel1 selected data holding register */
;;;354      *(__IO uint32_t *) tmp = Data;
0000bc  9000              STR      r0,[sp,#0]
0000be  6001              STR      r1,[r0,#0]
;;;355    }
0000c0  bd08              POP      {r3,pc}
;;;356    
                          ENDP

                  DAC_SetChannel2Data PROC
;;;366      */
;;;367    void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
0000c2  4a0d              LDR      r2,|L1.248|
;;;368    {
0000c4  b508              PUSH     {r3,lr}
;;;369      __IO uint32_t tmp = 0;
;;;370    
;;;371      /* Check the parameters */
;;;372      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;373      assert_param(IS_DAC_DATA(Data));
;;;374      
;;;375      tmp = (uint32_t)DAC_BASE;
;;;376      tmp += DHR12R2_OFFSET + DAC_Align;
0000c6  4410              ADD      r0,r0,r2
0000c8  3014              ADDS     r0,r0,#0x14
;;;377    
;;;378      /* Set the DAC channel2 selected data holding register */
;;;379      *(__IO uint32_t *)tmp = Data;
0000ca  9000              STR      r0,[sp,#0]
0000cc  6001              STR      r1,[r0,#0]
;;;380    }
0000ce  bd08              POP      {r3,pc}
;;;381    
                          ENDP

                  DAC_SetDualChannelData PROC
;;;395      */
;;;396    void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
0000d0  2808              CMP      r0,#8
;;;397    {
0000d2  d005              BEQ      |L1.224|
;;;398      uint32_t data = 0, tmp = 0;
;;;399      
;;;400      /* Check the parameters */
;;;401      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;402      assert_param(IS_DAC_DATA(Data1));
;;;403      assert_param(IS_DAC_DATA(Data2));
;;;404      
;;;405      /* Calculate and set dual DAC data holding register value */
;;;406      if (DAC_Align == DAC_Align_8b_R)
;;;407      {
;;;408        data = ((uint32_t)Data2 << 8) | Data1; 
;;;409      }
;;;410      else
;;;411      {
;;;412        data = ((uint32_t)Data2 << 16) | Data1;
0000d4  ea424101          ORR      r1,r2,r1,LSL #16
                  |L1.216|
;;;413      }
;;;414      
;;;415      tmp = (uint32_t)DAC_BASE;
0000d8  4a07              LDR      r2,|L1.248|
;;;416      tmp += DHR12RD_OFFSET + DAC_Align;
0000da  4410              ADD      r0,r0,r2
;;;417    
;;;418      /* Set the dual DAC selected data holding register */
;;;419      *(__IO uint32_t *)tmp = data;
0000dc  6201              STR      r1,[r0,#0x20]
;;;420    }
0000de  4770              BX       lr
                  |L1.224|
0000e0  ea422101          ORR      r1,r2,r1,LSL #8       ;408
0000e4  e7f8              B        |L1.216|
;;;421    
                          ENDP

                  DAC_GetDataOutputValue PROC
;;;429      */
;;;430    uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
0000e6  4904              LDR      r1,|L1.248|
;;;431    {
0000e8  b508              PUSH     {r3,lr}
;;;432      __IO uint32_t tmp = 0;
;;;433      
;;;434      /* Check the parameters */
;;;435      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;436      
;;;437      tmp = (uint32_t) DAC_BASE ;
;;;438      tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
0000ea  eb010090          ADD      r0,r1,r0,LSR #2
0000ee  302c              ADDS     r0,r0,#0x2c
;;;439      
;;;440      /* Returns the DAC channel data output register value */
;;;441      return (uint16_t) (*(__IO uint32_t*) tmp);
0000f0  9000              STR      r0,[sp,#0]
0000f2  6800              LDR      r0,[r0,#0]
0000f4  b280              UXTH     r0,r0
;;;442    }
0000f6  bd08              POP      {r3,pc}
;;;443    
                          ENDP

                  |L1.248|
                          DCD      0x40007400
