; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\stm32f10x_gpio.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_gpio.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\stm32f10x_gpio.crf ..\..\Libraries\FWlib\src\stm32f10x_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;107      */
;;;108    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  498f              LDR      r1,|L1.576|
;;;109    {
000002  b510              PUSH     {r4,lr}
;;;110      /* Check the parameters */
;;;111      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;112      
;;;113      if (GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L1.22|
;;;114      {
;;;115        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2004              MOVS     r0,#4
00000c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;116        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
000010  2100              MOVS     r1,#0
000012  2004              MOVS     r0,#4
000014  e03b              B        |L1.142|
                  |L1.22|
;;;117      }
;;;118      else if (GPIOx == GPIOB)
000016  498b              LDR      r1,|L1.580|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L1.42|
;;;119      {
;;;120        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2008              MOVS     r0,#8
000020  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;121        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2008              MOVS     r0,#8
000028  e031              B        |L1.142|
                  |L1.42|
;;;122      }
;;;123      else if (GPIOx == GPIOC)
00002a  4987              LDR      r1,|L1.584|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L1.62|
;;;124      {
;;;125        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;126        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2010              MOVS     r0,#0x10
00003c  e027              B        |L1.142|
                  |L1.62|
;;;127      }
;;;128      else if (GPIOx == GPIOD)
00003e  4983              LDR      r1,|L1.588|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L1.82|
;;;129      {
;;;130        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2020              MOVS     r0,#0x20
000048  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;131        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2020              MOVS     r0,#0x20
000050  e01d              B        |L1.142|
                  |L1.82|
;;;132      }    
;;;133      else if (GPIOx == GPIOE)
000052  497f              LDR      r1,|L1.592|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L1.102|
;;;134      {
;;;135        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2040              MOVS     r0,#0x40
00005c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;136        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2040              MOVS     r0,#0x40
000064  e013              B        |L1.142|
                  |L1.102|
;;;137      } 
;;;138      else if (GPIOx == GPIOF)
000066  497b              LDR      r1,|L1.596|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L1.122|
;;;139      {
;;;140        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2080              MOVS     r0,#0x80
000070  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;141        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2080              MOVS     r0,#0x80
000078  e009              B        |L1.142|
                  |L1.122|
;;;142      }
;;;143      else
;;;144      {
;;;145        if (GPIOx == GPIOG)
00007a  4977              LDR      r1,|L1.600|
00007c  4288              CMP      r0,r1
00007e  d10a              BNE      |L1.150|
;;;146        {
;;;147          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
000080  1584              ASRS     r4,r0,#22
000082  2101              MOVS     r1,#1
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;148          RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  4620              MOV      r0,r4
                  |L1.142|
00008e  e8bd4010          POP      {r4,lr}
000092  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
                  |L1.150|
;;;149        }
;;;150      }
;;;151    }
000096  bd10              POP      {r4,pc}
;;;152    
                          ENDP

                  GPIO_AFIODeInit PROC
;;;158      */
;;;159    void GPIO_AFIODeInit(void)
000098  b510              PUSH     {r4,lr}
;;;160    {
;;;161      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  4608              MOV      r0,r1
00009e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;162      RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
0000a2  2100              MOVS     r1,#0
0000a4  e8bd4010          POP      {r4,lr}
0000a8  2001              MOVS     r0,#1
0000aa  f7ffbffe          B.W      RCC_APB2PeriphResetCmd
;;;163    }
;;;164    
                          ENDP

                  GPIO_Init PROC
;;;172      */
;;;173    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
0000ae  b5f0              PUSH     {r4-r7,lr}
;;;174    {
;;;175      uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
;;;176      uint32_t tmpreg = 0x00, pinmask = 0x00;
;;;177      /* Check the parameters */
;;;178      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;179      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;180      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
;;;181      
;;;182    /*---------------------------- GPIO Mode Configuration -----------------------*/
;;;183      currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
0000b0  78cc              LDRB     r4,[r1,#3]
0000b2  2200              MOVS     r2,#0                 ;175
0000b4  f004030f          AND      r3,r4,#0xf
;;;184      if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
0000b8  06e4              LSLS     r4,r4,#27
0000ba  d501              BPL      |L1.192|
;;;185      { 
;;;186        /* Check the parameters */
;;;187        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;188        /* Output mode */
;;;189        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
0000bc  788c              LDRB     r4,[r1,#2]
0000be  4323              ORRS     r3,r3,r4
                  |L1.192|
;;;190      }
;;;191    /*---------------------------- GPIO CRL Configuration ------------------------*/
;;;192      /* Configure the eight low port pins */
;;;193      if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
0000c0  780c              LDRB     r4,[r1,#0]
;;;194      {
;;;195        tmpreg = GPIOx->CRL;
;;;196        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
;;;197        {
;;;198          pos = ((uint32_t)0x01) << pinpos;
;;;199          /* Get the port pins position */
;;;200          currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;201          if (currentpin == pos)
;;;202          {
;;;203            pos = pinpos << 2;
;;;204            /* Clear the corresponding low control register bits */
;;;205            pinmask = ((uint32_t)0x0F) << pos;
0000c2  f04f0c0f          MOV      r12,#0xf
0000c6  f0140fff          TST      r4,#0xff              ;193
0000ca  f04f0e01          MOV      lr,#1                 ;198
0000ce  d01b              BEQ      |L1.264|
0000d0  6805              LDR      r5,[r0,#0]            ;195
                  |L1.210|
0000d2  880e              LDRH     r6,[r1,#0]            ;200
0000d4  fa0ef402          LSL      r4,lr,r2              ;198
0000d8  4026              ANDS     r6,r6,r4              ;200
0000da  42a6              CMP      r6,r4                 ;201
0000dc  d110              BNE      |L1.256|
0000de  0096              LSLS     r6,r2,#2              ;203
0000e0  fa0cf706          LSL      r7,r12,r6
;;;206            tmpreg &= ~pinmask;
0000e4  ea250707          BIC      r7,r5,r7
;;;207            /* Write the mode configuration in the corresponding bits */
;;;208            tmpreg |= (currentmode << pos);
0000e8  fa03f506          LSL      r5,r3,r6
;;;209            /* Reset the corresponding ODR bit */
;;;210            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
0000ec  78ce              LDRB     r6,[r1,#3]
0000ee  433d              ORRS     r5,r5,r7              ;208
0000f0  2e28              CMP      r6,#0x28
0000f2  d002              BEQ      |L1.250|
;;;211            {
;;;212              GPIOx->BRR = (((uint32_t)0x01) << pinpos);
;;;213            }
;;;214            else
;;;215            {
;;;216              /* Set the corresponding ODR bit */
;;;217              if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
0000f4  2e48              CMP      r6,#0x48
0000f6  d002              BEQ      |L1.254|
0000f8  e002              B        |L1.256|
                  |L1.250|
0000fa  6144              STR      r4,[r0,#0x14]         ;212
0000fc  e000              B        |L1.256|
                  |L1.254|
;;;218              {
;;;219                GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
0000fe  6104              STR      r4,[r0,#0x10]
                  |L1.256|
000100  1c52              ADDS     r2,r2,#1
000102  2a08              CMP      r2,#8                 ;196
000104  d3e5              BCC      |L1.210|
;;;220              }
;;;221            }
;;;222          }
;;;223        }
;;;224        GPIOx->CRL = tmpreg;
000106  6005              STR      r5,[r0,#0]
                  |L1.264|
;;;225      }
;;;226    /*---------------------------- GPIO CRH Configuration ------------------------*/
;;;227      /* Configure the eight high port pins */
;;;228      if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
000108  880a              LDRH     r2,[r1,#0]
00010a  2aff              CMP      r2,#0xff
00010c  d91c              BLS      |L1.328|
;;;229      {
;;;230        tmpreg = GPIOx->CRH;
00010e  6844              LDR      r4,[r0,#4]
;;;231        for (pinpos = 0x00; pinpos < 0x08; pinpos++)
000110  2200              MOVS     r2,#0
                  |L1.274|
;;;232        {
;;;233          pos = (((uint32_t)0x01) << (pinpos + 0x08));
000112  f1020608          ADD      r6,r2,#8
000116  fa0ef506          LSL      r5,lr,r6
;;;234          /* Get the port pins position */
;;;235          currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
00011a  880e              LDRH     r6,[r1,#0]
00011c  402e              ANDS     r6,r6,r5
;;;236          if (currentpin == pos)
00011e  42ae              CMP      r6,r5
000120  d10e              BNE      |L1.320|
;;;237          {
;;;238            pos = pinpos << 2;
000122  0096              LSLS     r6,r2,#2
;;;239            /* Clear the corresponding high control register bits */
;;;240            pinmask = ((uint32_t)0x0F) << pos;
000124  fa0cf706          LSL      r7,r12,r6
;;;241            tmpreg &= ~pinmask;
000128  43bc              BICS     r4,r4,r7
;;;242            /* Write the mode configuration in the corresponding bits */
;;;243            tmpreg |= (currentmode << pos);
00012a  fa03f706          LSL      r7,r3,r6
;;;244            /* Reset the corresponding ODR bit */
;;;245            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
00012e  78ce              LDRB     r6,[r1,#3]
000130  433c              ORRS     r4,r4,r7              ;243
000132  2e28              CMP      r6,#0x28
000134  d100              BNE      |L1.312|
;;;246            {
;;;247              GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
000136  6145              STR      r5,[r0,#0x14]
                  |L1.312|
;;;248            }
;;;249            /* Set the corresponding ODR bit */
;;;250            if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
000138  78ce              LDRB     r6,[r1,#3]
00013a  2e48              CMP      r6,#0x48
00013c  d100              BNE      |L1.320|
;;;251            {
;;;252              GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
00013e  6105              STR      r5,[r0,#0x10]
                  |L1.320|
000140  1c52              ADDS     r2,r2,#1
000142  2a08              CMP      r2,#8                 ;231
000144  d3e5              BCC      |L1.274|
;;;253            }
;;;254          }
;;;255        }
;;;256        GPIOx->CRH = tmpreg;
000146  6044              STR      r4,[r0,#4]
                  |L1.328|
;;;257      }
;;;258    }
000148  bdf0              POP      {r4-r7,pc}
;;;259    
                          ENDP

                  GPIO_StructInit PROC
;;;265      */
;;;266    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
00014a  f64f71ff          MOV      r1,#0xffff
;;;267    {
;;;268      /* Reset GPIO init structure parameters values */
;;;269      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
00014e  8001              STRH     r1,[r0,#0]
;;;270      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000150  2102              MOVS     r1,#2
000152  7081              STRB     r1,[r0,#2]
;;;271      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
000154  2104              MOVS     r1,#4
000156  70c1              STRB     r1,[r0,#3]
;;;272    }
000158  4770              BX       lr
;;;273    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;280      */
;;;281    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00015a  4602              MOV      r2,r0
;;;282    {
;;;283      uint8_t bitstatus = 0x00;
00015c  2000              MOVS     r0,#0
;;;284      
;;;285      /* Check the parameters */
;;;286      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;287      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;288      
;;;289      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
00015e  6892              LDR      r2,[r2,#8]
000160  420a              TST      r2,r1
000162  d000              BEQ      |L1.358|
;;;290      {
;;;291        bitstatus = (uint8_t)Bit_SET;
000164  2001              MOVS     r0,#1
                  |L1.358|
;;;292      }
;;;293      else
;;;294      {
;;;295        bitstatus = (uint8_t)Bit_RESET;
;;;296      }
;;;297      return bitstatus;
;;;298    }
000166  4770              BX       lr
;;;299    
                          ENDP

                  GPIO_ReadInputData PROC
;;;304      */
;;;305    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000168  6880              LDR      r0,[r0,#8]
;;;306    {
;;;307      /* Check the parameters */
;;;308      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;309      
;;;310      return ((uint16_t)GPIOx->IDR);
00016a  b280              UXTH     r0,r0
;;;311    }
00016c  4770              BX       lr
;;;312    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;319      */
;;;320    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00016e  4602              MOV      r2,r0
;;;321    {
;;;322      uint8_t bitstatus = 0x00;
000170  2000              MOVS     r0,#0
;;;323      /* Check the parameters */
;;;324      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;325      assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
;;;326      
;;;327      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000172  68d2              LDR      r2,[r2,#0xc]
000174  420a              TST      r2,r1
000176  d000              BEQ      |L1.378|
;;;328      {
;;;329        bitstatus = (uint8_t)Bit_SET;
000178  2001              MOVS     r0,#1
                  |L1.378|
;;;330      }
;;;331      else
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_RESET;
;;;334      }
;;;335      return bitstatus;
;;;336    }
00017a  4770              BX       lr
;;;337    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;342      */
;;;343    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
00017c  68c0              LDR      r0,[r0,#0xc]
;;;344    {
;;;345      /* Check the parameters */
;;;346      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;347        
;;;348      return ((uint16_t)GPIOx->ODR);
00017e  b280              UXTH     r0,r0
;;;349    }
000180  4770              BX       lr
;;;350    
                          ENDP

                  GPIO_SetBits PROC
;;;357      */
;;;358    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000182  6101              STR      r1,[r0,#0x10]
;;;359    {
;;;360      /* Check the parameters */
;;;361      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;362      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;363      
;;;364      GPIOx->BSRR = GPIO_Pin;
;;;365    }
000184  4770              BX       lr
;;;366    
                          ENDP

                  GPIO_ResetBits PROC
;;;373      */
;;;374    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000186  6141              STR      r1,[r0,#0x14]
;;;375    {
;;;376      /* Check the parameters */
;;;377      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;378      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;379      
;;;380      GPIOx->BRR = GPIO_Pin;
;;;381    }
000188  4770              BX       lr
;;;382    
                          ENDP

                  GPIO_WriteBit PROC
;;;393      */
;;;394    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
00018a  b10a              CBZ      r2,|L1.400|
;;;395    {
;;;396      /* Check the parameters */
;;;397      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;398      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;399      assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
;;;400      
;;;401      if (BitVal != Bit_RESET)
;;;402      {
;;;403        GPIOx->BSRR = GPIO_Pin;
00018c  6101              STR      r1,[r0,#0x10]
;;;404      }
;;;405      else
;;;406      {
;;;407        GPIOx->BRR = GPIO_Pin;
;;;408      }
;;;409    }
00018e  4770              BX       lr
                  |L1.400|
000190  6141              STR      r1,[r0,#0x14]         ;407
000192  4770              BX       lr
;;;410    
                          ENDP

                  GPIO_Write PROC
;;;416      */
;;;417    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000194  60c1              STR      r1,[r0,#0xc]
;;;418    {
;;;419      /* Check the parameters */
;;;420      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;421      
;;;422      GPIOx->ODR = PortVal;
;;;423    }
000196  4770              BX       lr
;;;424    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;431      */
;;;432    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000198  f4413280          ORR      r2,r1,#0x10000
;;;433    {
;;;434      uint32_t tmp = 0x00010000;
;;;435      
;;;436      /* Check the parameters */
;;;437      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;438      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;439      
;;;440      tmp |= GPIO_Pin;
;;;441      /* Set LCKK bit */
;;;442      GPIOx->LCKR = tmp;
00019c  6182              STR      r2,[r0,#0x18]
;;;443      /* Reset LCKK bit */
;;;444      GPIOx->LCKR =  GPIO_Pin;
00019e  6181              STR      r1,[r0,#0x18]
;;;445      /* Set LCKK bit */
;;;446      GPIOx->LCKR = tmp;
0001a0  6182              STR      r2,[r0,#0x18]
;;;447      /* Read LCKK bit*/
;;;448      tmp = GPIOx->LCKR;
0001a2  6981              LDR      r1,[r0,#0x18]
;;;449      /* Read LCKK bit*/
;;;450      tmp = GPIOx->LCKR;
0001a4  6980              LDR      r0,[r0,#0x18]
;;;451    }
0001a6  4770              BX       lr
;;;452    
                          ENDP

                  GPIO_EventOutputConfig PROC
;;;461      */
;;;462    void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
0001a8  4b2c              LDR      r3,|L1.604|
;;;463    {
0001aa  b510              PUSH     {r4,lr}
;;;464      uint32_t tmpreg = 0x00;
;;;465      /* Check the parameters */
;;;466      assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
;;;467      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;468        
;;;469      tmpreg = AFIO->EVCR;
0001ac  681a              LDR      r2,[r3,#0]
;;;470      /* Clear the PORT[6:4] and PIN[3:0] bits */
;;;471      tmpreg &= EVCR_PORTPINCONFIG_MASK;
0001ae  f64f7480          MOV      r4,#0xff80
0001b2  4022              ANDS     r2,r2,r4
;;;472      tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
0001b4  ea421000          ORR      r0,r2,r0,LSL #4
;;;473      tmpreg |= GPIO_PinSource;
0001b8  4308              ORRS     r0,r0,r1
;;;474      AFIO->EVCR = tmpreg;
0001ba  6018              STR      r0,[r3,#0]
;;;475    }
0001bc  bd10              POP      {r4,pc}
;;;476    
                          ENDP

                  GPIO_EventOutputCmd PROC
;;;482      */
;;;483    void GPIO_EventOutputCmd(FunctionalState NewState)
0001be  4928              LDR      r1,|L1.608|
;;;484    {
;;;485      /* Check the parameters */
;;;486      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;487      
;;;488      *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
0001c0  61c8              STR      r0,[r1,#0x1c]
;;;489    }
0001c2  4770              BX       lr
;;;490    
                          ENDP

                  GPIO_PinRemapConfig PROC
;;;548      */
;;;549    void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
0001c4  b5f0              PUSH     {r4-r7,lr}
;;;550    {
;;;551      uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
;;;552    
;;;553      /* Check the parameters */
;;;554      assert_param(IS_GPIO_REMAP(GPIO_Remap));
;;;555      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;556      
;;;557      if((GPIO_Remap & 0x80000000) == 0x80000000)
;;;558      {
;;;559        tmpreg = AFIO->MAPR2;
0001c6  4c25              LDR      r4,|L1.604|
0001c8  2800              CMP      r0,#0                 ;557
0001ca  da01              BGE      |L1.464|
0001cc  69e3              LDR      r3,[r4,#0x1c]
0001ce  e000              B        |L1.466|
                  |L1.464|
;;;560      }
;;;561      else
;;;562      {
;;;563        tmpreg = AFIO->MAPR;
0001d0  6863              LDR      r3,[r4,#4]
                  |L1.466|
;;;564      }
;;;565    
;;;566      tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
;;;567      tmp = GPIO_Remap & LSB_MASK;
;;;568    
;;;569      if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
;;;570      {
;;;571        tmpreg &= DBGAFR_SWJCFG_MASK;
;;;572        AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
;;;573      }
;;;574      else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
;;;575      {
;;;576        tmp1 = ((uint32_t)0x03) << tmpmask;
;;;577        tmpreg &= ~tmp1;
;;;578        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;579      }
;;;580      else
;;;581      {
;;;582        tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
0001d2  0d45              LSRS     r5,r0,#21
0001d4  012e              LSLS     r6,r5,#4
0001d6  b285              UXTH     r5,r0                 ;567
0001d8  f3c05701          UBFX     r7,r0,#20,#2          ;569
0001dc  40b5              LSLS     r5,r5,r6
0001de  f3c04203          UBFX     r2,r0,#16,#4          ;566
0001e2  2f03              CMP      r7,#3                 ;569
0001e4  d005              BEQ      |L1.498|
0001e6  02c6              LSLS     r6,r0,#11             ;574
0001e8  d50a              BPL      |L1.512|
0001ea  2603              MOVS     r6,#3                 ;576
0001ec  4096              LSLS     r6,r6,r2              ;576
0001ee  43b3              BICS     r3,r3,r6              ;577
0001f0  e007              B        |L1.514|
                  |L1.498|
0001f2  f0236270          BIC      r2,r3,#0xf000000      ;571
0001f6  6863              LDR      r3,[r4,#4]            ;572
0001f8  f0236370          BIC      r3,r3,#0xf000000      ;572
0001fc  6063              STR      r3,[r4,#4]            ;572
0001fe  e002              B        |L1.518|
                  |L1.512|
000200  43ab              BICS     r3,r3,r5
                  |L1.514|
000202  f0436270          ORR      r2,r3,#0xf000000      ;578
                  |L1.518|
;;;583        tmpreg |= ~DBGAFR_SWJCFG_MASK;
;;;584      }
;;;585    
;;;586      if (NewState != DISABLE)
000206  b101              CBZ      r1,|L1.522|
;;;587      {
;;;588        tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
000208  432a              ORRS     r2,r2,r5
                  |L1.522|
;;;589      }
;;;590    
;;;591      if((GPIO_Remap & 0x80000000) == 0x80000000)
00020a  2800              CMP      r0,#0
00020c  da01              BGE      |L1.530|
;;;592      {
;;;593        AFIO->MAPR2 = tmpreg;
00020e  61e2              STR      r2,[r4,#0x1c]
;;;594      }
;;;595      else
;;;596      {
;;;597        AFIO->MAPR = tmpreg;
;;;598      }  
;;;599    }
000210  bdf0              POP      {r4-r7,pc}
                  |L1.530|
000212  6062              STR      r2,[r4,#4]            ;597
000214  bdf0              POP      {r4-r7,pc}
;;;600    
                          ENDP

                  GPIO_EXTILineConfig PROC
;;;608      */
;;;609    void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
000216  b510              PUSH     {r4,lr}
;;;610    {
;;;611      uint32_t tmp = 0x00;
;;;612      /* Check the parameters */
;;;613      assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
;;;614      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;615      
;;;616      tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
000218  078a              LSLS     r2,r1,#30
;;;617      AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
00021a  f0210403          BIC      r4,r1,#3
00021e  490f              LDR      r1,|L1.604|
000220  0f12              LSRS     r2,r2,#28             ;616
000222  4421              ADD      r1,r1,r4
000224  230f              MOVS     r3,#0xf               ;616
000226  688c              LDR      r4,[r1,#8]
000228  4093              LSLS     r3,r3,r2              ;616
00022a  439c              BICS     r4,r4,r3
00022c  608c              STR      r4,[r1,#8]
;;;618      AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
00022e  688b              LDR      r3,[r1,#8]
000230  4090              LSLS     r0,r0,r2
000232  4303              ORRS     r3,r3,r0
000234  608b              STR      r3,[r1,#8]
;;;619    }
000236  bd10              POP      {r4,pc}
;;;620    
                          ENDP

                  GPIO_ETH_MediaInterfaceConfig PROC
;;;629      */
;;;630    void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
000238  4909              LDR      r1,|L1.608|
;;;631    { 
;;;632      assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 
;;;633    
;;;634      /* Configure MII_RMII selection bit */ 
;;;635      *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
00023a  f8c100dc          STR      r0,[r1,#0xdc]
;;;636    }
00023e  4770              BX       lr
;;;637      
                          ENDP

                  |L1.576|
                          DCD      0x40010800
                  |L1.580|
                          DCD      0x40010c00
                  |L1.584|
                          DCD      0x40011000
                  |L1.588|
                          DCD      0x40011400
                  |L1.592|
                          DCD      0x40011800
                  |L1.596|
                          DCD      0x40011c00
                  |L1.600|
                          DCD      0x40012000
                  |L1.604|
                          DCD      0x40010000
                  |L1.608|
                          DCD      0x42200000
