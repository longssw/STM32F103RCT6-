; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\system_stm32f10x.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\system_stm32f10x.crf ..\..\Libraries\CMSIS\system_stm32f10x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;986      */
;;;987    static void SetSysClockTo72(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;988    {
;;;989      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2200              MOVS     r2,#0
;;;990      
;;;991      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;992      /* Enable HSE */    
;;;993      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  484c              LDR      r0,|L1.312|
000006  9200              STR      r2,[sp,#0]            ;989
000008  9201              STR      r2,[sp,#4]
00000a  6801              LDR      r1,[r0,#0]
00000c  f4413180          ORR      r1,r1,#0x10000
000010  6001              STR      r1,[r0,#0]
;;;994     
;;;995      /* Wait till HSE is ready and if Time out is reached exit */
;;;996      do
;;;997      {
;;;998        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;999        StartUpCounter++;  
;;;1000     } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f63a0          MOV      r3,#0x500
                  |L1.22|
000016  6801              LDR      r1,[r0,#0]            ;998
000018  f4013100          AND      r1,r1,#0x20000        ;998
00001c  9101              STR      r1,[sp,#4]            ;999
00001e  9900              LDR      r1,[sp,#0]            ;999
000020  1c49              ADDS     r1,r1,#1              ;999
000022  9100              STR      r1,[sp,#0]
000024  9901              LDR      r1,[sp,#4]
000026  b911              CBNZ     r1,|L1.46|
000028  9900              LDR      r1,[sp,#0]
00002a  4299              CMP      r1,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;1001   
;;;1002     if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6801              LDR      r1,[r0,#0]
000030  0389              LSLS     r1,r1,#14
000032  d533              BPL      |L1.156|
;;;1003     {
;;;1004       HSEStatus = (uint32_t)0x01;
000034  2101              MOVS     r1,#1
;;;1005     }
;;;1006     else
;;;1007     {
;;;1008       HSEStatus = (uint32_t)0x00;
;;;1009     }  
;;;1010   
;;;1011     if (HSEStatus == (uint32_t)0x01)
;;;1012     {
;;;1013       /* Enable Prefetch Buffer */
;;;1014       FLASH->ACR |= FLASH_ACR_PRFTBE;
000036  9101              STR      r1,[sp,#4]
000038  4940              LDR      r1,|L1.316|
00003a  680a              LDR      r2,[r1,#0]
00003c  f0420210          ORR      r2,r2,#0x10
000040  600a              STR      r2,[r1,#0]
;;;1015   
;;;1016       /* Flash 2 wait state */
;;;1017       FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000042  680a              LDR      r2,[r1,#0]
000044  f0220203          BIC      r2,r2,#3
000048  600a              STR      r2,[r1,#0]
;;;1018       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
00004a  680a              LDR      r2,[r1,#0]
00004c  f0420202          ORR      r2,r2,#2
000050  600a              STR      r2,[r1,#0]
;;;1019   
;;;1020    
;;;1021       /* HCLK = SYSCLK */
;;;1022       RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
000052  6841              LDR      r1,[r0,#4]
000054  6041              STR      r1,[r0,#4]
;;;1023         
;;;1024       /* PCLK2 = HCLK */
;;;1025       RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000056  6841              LDR      r1,[r0,#4]
000058  6041              STR      r1,[r0,#4]
;;;1026       
;;;1027       /* PCLK1 = HCLK/2 */
;;;1028       RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
00005a  6841              LDR      r1,[r0,#4]
00005c  f4416180          ORR      r1,r1,#0x400
000060  6041              STR      r1,[r0,#4]
;;;1029   
;;;1030   #ifdef STM32F10X_CL
;;;1031       /* Configure PLLs ------------------------------------------------------*/
;;;1032       /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;1033       /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
;;;1034           
;;;1035       RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;1036                                 RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;1037       RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;1038                                RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
;;;1039     
;;;1040       /* Enable PLL2 */
;;;1041       RCC->CR |= RCC_CR_PLL2ON;
;;;1042       /* Wait till PLL2 is ready */
;;;1043       while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;1044       {
;;;1045       }
;;;1046       
;;;1047      
;;;1048       /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
;;;1049       RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;1050       RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
;;;1051                               RCC_CFGR_PLLMULL9); 
;;;1052   #else    
;;;1053       /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;1054       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000062  6841              LDR      r1,[r0,#4]
000064  f421117c          BIC      r1,r1,#0x3f0000
000068  6041              STR      r1,[r0,#4]
;;;1055                                           RCC_CFGR_PLLMULL));
;;;1056       RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
00006a  6841              LDR      r1,[r0,#4]
00006c  f44111e8          ORR      r1,r1,#0x1d0000
000070  6041              STR      r1,[r0,#4]
;;;1057   #endif /* STM32F10X_CL */
;;;1058   
;;;1059       /* Enable PLL */
;;;1060       RCC->CR |= RCC_CR_PLLON;
000072  6801              LDR      r1,[r0,#0]
000074  f0417180          ORR      r1,r1,#0x1000000
000078  6001              STR      r1,[r0,#0]
                  |L1.122|
;;;1061   
;;;1062       /* Wait till PLL is ready */
;;;1063       while((RCC->CR & RCC_CR_PLLRDY) == 0)
00007a  6801              LDR      r1,[r0,#0]
00007c  0189              LSLS     r1,r1,#6
00007e  d5fc              BPL      |L1.122|
;;;1064       {
;;;1065       }
;;;1066       
;;;1067       /* Select PLL as system clock source */
;;;1068       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000080  6841              LDR      r1,[r0,#4]
000082  f0210103          BIC      r1,r1,#3
000086  6041              STR      r1,[r0,#4]
;;;1069       RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
000088  6841              LDR      r1,[r0,#4]
00008a  f0410102          ORR      r1,r1,#2
00008e  6041              STR      r1,[r0,#4]
                  |L1.144|
;;;1070   
;;;1071       /* Wait till PLL is used as system clock source */
;;;1072       while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
000090  6841              LDR      r1,[r0,#4]
000092  f3c10181          UBFX     r1,r1,#2,#2
000096  2902              CMP      r1,#2
000098  d1fa              BNE      |L1.144|
;;;1073       {
;;;1074       }
;;;1075     }
;;;1076     else
;;;1077     { /* If HSE fails to start-up, the application will have wrong clock 
;;;1078            configuration. User can add here some code to deal with this error */
;;;1079     }
;;;1080   }
00009a  bd0c              POP      {r2,r3,pc}
                  |L1.156|
00009c  9201              STR      r2,[sp,#4]            ;1008
00009e  bd0c              POP      {r2,r3,pc}
;;;1081   #endif
                          ENDP

                  SystemInit PROC
;;;211      */
;;;212    void SystemInit (void)
0000a0  4825              LDR      r0,|L1.312|
;;;213    {
0000a2  b510              PUSH     {r4,lr}
;;;214      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;215      /* Set HSION bit */
;;;216      RCC->CR |= (uint32_t)0x00000001;
0000a4  6801              LDR      r1,[r0,#0]
0000a6  f0410101          ORR      r1,r1,#1
0000aa  6001              STR      r1,[r0,#0]
;;;217    
;;;218      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;219    #ifndef STM32F10X_CL
;;;220      RCC->CFGR &= (uint32_t)0xF8FF0000;
0000ac  6841              LDR      r1,[r0,#4]
0000ae  4a24              LDR      r2,|L1.320|
0000b0  4011              ANDS     r1,r1,r2
0000b2  6041              STR      r1,[r0,#4]
;;;221    #else
;;;222      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;223    #endif /* STM32F10X_CL */   
;;;224      
;;;225      /* Reset HSEON, CSSON and PLLON bits */
;;;226      RCC->CR &= (uint32_t)0xFEF6FFFF;
0000b4  6801              LDR      r1,[r0,#0]
0000b6  4a23              LDR      r2,|L1.324|
0000b8  4011              ANDS     r1,r1,r2
0000ba  6001              STR      r1,[r0,#0]
;;;227    
;;;228      /* Reset HSEBYP bit */
;;;229      RCC->CR &= (uint32_t)0xFFFBFFFF;
0000bc  6801              LDR      r1,[r0,#0]
0000be  f4212180          BIC      r1,r1,#0x40000
0000c2  6001              STR      r1,[r0,#0]
;;;230    
;;;231      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;232      RCC->CFGR &= (uint32_t)0xFF80FFFF;
0000c4  6841              LDR      r1,[r0,#4]
0000c6  f42101fe          BIC      r1,r1,#0x7f0000
0000ca  6041              STR      r1,[r0,#4]
;;;233    
;;;234    #ifdef STM32F10X_CL
;;;235      /* Reset PLL2ON and PLL3ON bits */
;;;236      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;237    
;;;238      /* Disable all interrupts and clear pending bits  */
;;;239      RCC->CIR = 0x00FF0000;
;;;240    
;;;241      /* Reset CFGR2 register */
;;;242      RCC->CFGR2 = 0x00000000;
;;;243    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;244      /* Disable all interrupts and clear pending bits  */
;;;245      RCC->CIR = 0x009F0000;
;;;246    
;;;247      /* Reset CFGR2 register */
;;;248      RCC->CFGR2 = 0x00000000;      
;;;249    #else
;;;250      /* Disable all interrupts and clear pending bits  */
;;;251      RCC->CIR = 0x009F0000;
0000cc  f44f011f          MOV      r1,#0x9f0000
0000d0  6081              STR      r1,[r0,#8]
0000d2  f7fffffe          BL       SetSysClockTo72
;;;252    #endif /* STM32F10X_CL */
;;;253        
;;;254    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;255      #ifdef DATA_IN_ExtSRAM
;;;256        SystemInit_ExtMemCtl(); 
;;;257      #endif /* DATA_IN_ExtSRAM */
;;;258    #endif 
;;;259    
;;;260      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;261      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;262      SetSysClock();
;;;263    
;;;264    #ifdef VECT_TAB_SRAM
;;;265      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;266    #else
;;;267      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
0000d6  491c              LDR      r1,|L1.328|
0000d8  f04f6000          MOV      r0,#0x8000000
0000dc  6008              STR      r0,[r1,#0]
;;;268    #endif 
;;;269    }
0000de  bd10              POP      {r4,pc}
;;;270    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;305      */
;;;306    void SystemCoreClockUpdate (void)
0000e0  4a15              LDR      r2,|L1.312|
;;;307    {
0000e2  b510              PUSH     {r4,lr}
;;;308      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
;;;309    
;;;310    #ifdef  STM32F10X_CL
;;;311      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;312    #endif /* STM32F10X_CL */
;;;313    
;;;314    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;315      uint32_t prediv1factor = 0;
;;;316    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;317        
;;;318      /* Get SYSCLK source -------------------------------------------------------*/
;;;319      tmp = RCC->CFGR & RCC_CFGR_SWS;
0000e4  6850              LDR      r0,[r2,#4]
;;;320      
;;;321      switch (tmp)
;;;322      {
;;;323        case 0x00:  /* HSI used as system clock */
;;;324          SystemCoreClock = HSI_VALUE;
0000e6  4b19              LDR      r3,|L1.332|
0000e8  f010010c          ANDS     r1,r0,#0xc            ;319
0000ec  4818              LDR      r0,|L1.336|
0000ee  d003              BEQ      |L1.248|
0000f0  2904              CMP      r1,#4                 ;321
0000f2  d001              BEQ      |L1.248|
0000f4  2908              CMP      r1,#8                 ;321
0000f6  d001              BEQ      |L1.252|
                  |L1.248|
;;;325          break;
0000f8  6003              STR      r3,[r0,#0]  ; SystemCoreClock
0000fa  e012              B        |L1.290|
                  |L1.252|
;;;326        case 0x04:  /* HSE used as system clock */
;;;327          SystemCoreClock = HSE_VALUE;
;;;328          break;
;;;329        case 0x08:  /* PLL used as system clock */
;;;330    
;;;331          /* Get PLL clock source and multiplication factor ----------------------*/
;;;332          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
0000fc  6851              LDR      r1,[r2,#4]
;;;333          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
0000fe  6853              LDR      r3,[r2,#4]
000100  f4011170          AND      r1,r1,#0x3c0000       ;332
;;;334          
;;;335    #ifndef STM32F10X_CL      
;;;336          pllmull = ( pllmull >> 18) + 2;
000104  f04f0402          MOV      r4,#2
000108  f4133f80          TST      r3,#0x10000           ;333
00010c  eb044191          ADD      r1,r4,r1,LSR #18
;;;337          
;;;338          if (pllsource == 0x00)
000110  d002              BEQ      |L1.280|
;;;339          {
;;;340            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;341            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;342          }
;;;343          else
;;;344          {
;;;345     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;346           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;347           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;348           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;349     #else
;;;350            /* HSE selected as PLL clock entry */
;;;351            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
000112  6853              LDR      r3,[r2,#4]
000114  039b              LSLS     r3,r3,#14
000116  d501              BPL      |L1.284|
                  |L1.280|
000118  4b0e              LDR      r3,|L1.340|
00011a  e000              B        |L1.286|
                  |L1.284|
;;;352            {/* HSE oscillator clock divided by 2 */
;;;353              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
;;;354            }
;;;355            else
;;;356            {
;;;357              SystemCoreClock = HSE_VALUE * pllmull;
00011c  4b0b              LDR      r3,|L1.332|
                  |L1.286|
00011e  4359              MULS     r1,r3,r1              ;353
000120  6001              STR      r1,[r0,#0]            ;353  ; SystemCoreClock
                  |L1.290|
;;;358            }
;;;359     #endif
;;;360          }
;;;361    #else
;;;362          pllmull = pllmull >> 18;
;;;363          
;;;364          if (pllmull != 0x0D)
;;;365          {
;;;366             pllmull += 2;
;;;367          }
;;;368          else
;;;369          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;370            pllmull = 13 / 2; 
;;;371          }
;;;372                
;;;373          if (pllsource == 0x00)
;;;374          {
;;;375            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;376            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;377          }
;;;378          else
;;;379          {/* PREDIV1 selected as PLL clock entry */
;;;380            
;;;381            /* Get PREDIV1 clock source and division factor */
;;;382            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;383            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;384            
;;;385            if (prediv1source == 0)
;;;386            { 
;;;387              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;388              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;389            }
;;;390            else
;;;391            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;392              
;;;393              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;394              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;395              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;396              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;397            }
;;;398          }
;;;399    #endif /* STM32F10X_CL */ 
;;;400          break;
;;;401    
;;;402        default:
;;;403          SystemCoreClock = HSI_VALUE;
;;;404          break;
;;;405      }
;;;406      
;;;407      /* Compute HCLK clock frequency ----------------*/
;;;408      /* Get HCLK prescaler */
;;;409      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000122  6851              LDR      r1,[r2,#4]
000124  4a0a              LDR      r2,|L1.336|
000126  f3c11103          UBFX     r1,r1,#4,#4
00012a  1d12              ADDS     r2,r2,#4
00012c  5c51              LDRB     r1,[r2,r1]
;;;410      /* HCLK clock frequency */
;;;411      SystemCoreClock >>= tmp;  
00012e  6802              LDR      r2,[r0,#0]  ; SystemCoreClock
000130  40ca              LSRS     r2,r2,r1
000132  6002              STR      r2,[r0,#0]  ; SystemCoreClock
;;;412    }
000134  bd10              POP      {r4,pc}
;;;413    
                          ENDP

000136  0000              DCW      0x0000
                  |L1.312|
                          DCD      0x40021000
                  |L1.316|
                          DCD      0x40022000
                  |L1.320|
                          DCD      0xf8ff0000
                  |L1.324|
                          DCD      0xfef6ffff
                  |L1.328|
                          DCD      0xe000ed08
                  |L1.332|
                          DCD      0x007a1200
                  |L1.336|
                          DCD      ||.data||
                  |L1.340|
                          DCD      0x003d0900

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09
