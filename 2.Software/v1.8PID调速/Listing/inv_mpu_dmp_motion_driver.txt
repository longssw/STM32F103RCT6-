; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\inv_mpu_dmp_motion_driver.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\inv_mpu_dmp_motion_driver.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\inv_mpu_dmp_motion_driver.crf ..\..\BSP\eMPL\inv_mpu_dmp_motion_driver.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  dmp_load_motion_driver_firmware PROC
;;;515     */
;;;516    int dmp_load_motion_driver_firmware(void)
000000  23c8              MOVS     r3,#0xc8
;;;517    {
;;;518        return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
000002  f44f6280          MOV      r2,#0x400
000006  49fe              LDR      r1,|L1.1024|
000008  f64030f6          MOV      r0,#0xbf6
00000c  f7ffbffe          B.W      mpu_load_firmware
;;;519            DMP_SAMPLE_RATE);
;;;520    }
;;;521    
                          ENDP

                  dmp_set_orientation PROC
;;;528     */
;;;529    int dmp_set_orientation(unsigned short orient)
000010  e92d41ff          PUSH     {r0-r8,lr}
;;;530    {
000014  4604              MOV      r4,r0
;;;531        unsigned char gyro_regs[3], accel_regs[3];
;;;532        const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
000016  a0fb              ADR      r0,|L1.1028|
;;;533        const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
;;;534        const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
;;;535        const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
;;;536    
;;;537        gyro_regs[0] = gyro_axes[orient & 3];
000018  ab02              ADD      r3,sp,#8
00001a  6800              LDR      r0,[r0,#0]            ;532
00001c  9002              STR      r0,[sp,#8]            ;533
00001e  a0fa              ADR      r0,|L1.1032|
000020  6800              LDR      r0,[r0,#0]            ;533
000022  9003              STR      r0,[sp,#0xc]          ;534
000024  a0f9              ADR      r0,|L1.1036|
000026  6806              LDR      r6,[r0,#0]            ;535
000028  a0f9              ADR      r0,|L1.1040|
00002a  6805              LDR      r5,[r0,#0]
00002c  f0040003          AND      r0,r4,#3
000030  5c19              LDRB     r1,[r3,r0]
000032  f88d1000          STRB     r1,[sp,#0]
;;;538        gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
000036  f3c401c1          UBFX     r1,r4,#3,#2
00003a  5c5a              LDRB     r2,[r3,r1]
00003c  f88d2001          STRB     r2,[sp,#1]
;;;539        gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
000040  f3c41281          UBFX     r2,r4,#6,#2
000044  5c9b              LDRB     r3,[r3,r2]
000046  f88d3002          STRB     r3,[sp,#2]
;;;540        accel_regs[0] = accel_axes[orient & 3];
00004a  ab03              ADD      r3,sp,#0xc
00004c  5c18              LDRB     r0,[r3,r0]
00004e  f88d0004          STRB     r0,[sp,#4]
;;;541        accel_regs[1] = accel_axes[(orient >> 3) & 3];
000052  5c58              LDRB     r0,[r3,r1]
000054  f88d0005          STRB     r0,[sp,#5]
;;;542        accel_regs[2] = accel_axes[(orient >> 6) & 3];
000058  5c98              LDRB     r0,[r3,r2]
00005a  f88d0006          STRB     r0,[sp,#6]
;;;543    
;;;544        /* Chip-to-body, axes only. */
;;;545        if (mpu_write_mem(FCFG_1, 3, gyro_regs))
00005e  466a              MOV      r2,sp
000060  2103              MOVS     r1,#3
000062  f2404026          MOV      r0,#0x426
000066  f7fffffe          BL       mpu_write_mem
;;;546            return -1;
00006a  f04f37ff          MOV      r7,#0xffffffff
00006e  bbe0              CBNZ     r0,|L1.234|
;;;547        if (mpu_write_mem(FCFG_2, 3, accel_regs))
000070  aa01              ADD      r2,sp,#4
000072  2103              MOVS     r1,#3
000074  f240402a          MOV      r0,#0x42a
000078  f7fffffe          BL       mpu_write_mem
00007c  bba8              CBNZ     r0,|L1.234|
;;;548            return -1;
;;;549    
;;;550        memcpy(gyro_regs, gyro_sign, 3);
;;;551        memcpy(accel_regs, accel_sign, 3);
;;;552        if (orient & 4) {
00007e  e9cd6500          STRD     r6,r5,[sp,#0]
000082  0760              LSLS     r0,r4,#29
000084  d50b              BPL      |L1.158|
;;;553            gyro_regs[0] |= 1;
000086  f89d0000          LDRB     r0,[sp,#0]
00008a  f0400001          ORR      r0,r0,#1
00008e  f88d0000          STRB     r0,[sp,#0]
;;;554            accel_regs[0] |= 1;
000092  f89d0004          LDRB     r0,[sp,#4]
000096  f0400001          ORR      r0,r0,#1
00009a  f88d0004          STRB     r0,[sp,#4]
                  |L1.158|
;;;555        }
;;;556        if (orient & 0x20) {
00009e  06a0              LSLS     r0,r4,#26
0000a0  d50b              BPL      |L1.186|
;;;557            gyro_regs[1] |= 1;
0000a2  f89d0001          LDRB     r0,[sp,#1]
0000a6  f0400001          ORR      r0,r0,#1
0000aa  f88d0001          STRB     r0,[sp,#1]
;;;558            accel_regs[1] |= 1;
0000ae  f89d0005          LDRB     r0,[sp,#5]
0000b2  f0400001          ORR      r0,r0,#1
0000b6  f88d0005          STRB     r0,[sp,#5]
                  |L1.186|
;;;559        }
;;;560        if (orient & 0x100) {
0000ba  05e0              LSLS     r0,r4,#23
0000bc  d50b              BPL      |L1.214|
;;;561            gyro_regs[2] |= 1;
0000be  f89d0002          LDRB     r0,[sp,#2]
0000c2  f0400001          ORR      r0,r0,#1
0000c6  f88d0002          STRB     r0,[sp,#2]
;;;562            accel_regs[2] |= 1;
0000ca  f89d0006          LDRB     r0,[sp,#6]
0000ce  f0400001          ORR      r0,r0,#1
0000d2  f88d0006          STRB     r0,[sp,#6]
                  |L1.214|
;;;563        }
;;;564    
;;;565        /* Chip-to-body, sign only. */
;;;566        if (mpu_write_mem(FCFG_3, 3, gyro_regs))
0000d6  466a              MOV      r2,sp
0000d8  2103              MOVS     r1,#3
0000da  f44f6088          MOV      r0,#0x440
0000de  f7fffffe          BL       mpu_write_mem
0000e2  b910              CBNZ     r0,|L1.234|
;;;567            return -1;
;;;568        if (mpu_write_mem(FCFG_7, 3, accel_regs))
0000e4  aa01              ADD      r2,sp,#4
0000e6  2103              MOVS     r1,#3
0000e8  e000              B        |L1.236|
                  |L1.234|
0000ea  e004              B        |L1.246|
                  |L1.236|
0000ec  f2404031          MOV      r0,#0x431
0000f0  f7fffffe          BL       mpu_write_mem
0000f4  b118              CBZ      r0,|L1.254|
                  |L1.246|
;;;569            return -1;
0000f6  4638              MOV      r0,r7
                  |L1.248|
;;;570        dmp.orient = orient;
;;;571        return 0;
;;;572    }
0000f8  b004              ADD      sp,sp,#0x10
0000fa  e8bd81f0          POP      {r4-r8,pc}
                  |L1.254|
0000fe  48c5              LDR      r0,|L1.1044|
000100  8104              STRH     r4,[r0,#8]            ;570
000102  2000              MOVS     r0,#0                 ;571
000104  e7f8              B        |L1.248|
;;;573    
                          ENDP

                  dmp_set_gyro_bias PROC
;;;583     */
;;;584    int dmp_set_gyro_bias(long *bias)
000106  b5f8              PUSH     {r3-r7,lr}
;;;585    {
;;;586        long gyro_bias_body[3];
;;;587        unsigned char regs[4];
;;;588    
;;;589        gyro_bias_body[0] = bias[dmp.orient & 3];
000108  49c2              LDR      r1,|L1.1044|
00010a  8909              LDRH     r1,[r1,#8]  ; dmp
00010c  f0010203          AND      r2,r1,#3
000110  f8504022          LDR      r4,[r0,r2,LSL #2]
;;;590        if (dmp.orient & 4)
000114  074a              LSLS     r2,r1,#29
000116  d500              BPL      |L1.282|
;;;591            gyro_bias_body[0] *= -1;
000118  4264              RSBS     r4,r4,#0
                  |L1.282|
;;;592        gyro_bias_body[1] = bias[(dmp.orient >> 3) & 3];
00011a  f3c102c1          UBFX     r2,r1,#3,#2
00011e  f8503022          LDR      r3,[r0,r2,LSL #2]
;;;593        if (dmp.orient & 0x20)
000122  068a              LSLS     r2,r1,#26
000124  d500              BPL      |L1.296|
;;;594            gyro_bias_body[1] *= -1;
000126  425b              RSBS     r3,r3,#0
                  |L1.296|
;;;595        gyro_bias_body[2] = bias[(dmp.orient >> 6) & 3];
000128  f3c11281          UBFX     r2,r1,#6,#2
00012c  f8502022          LDR      r2,[r0,r2,LSL #2]
;;;596        if (dmp.orient & 0x100)
000130  05c8              LSLS     r0,r1,#23
000132  d500              BPL      |L1.310|
;;;597            gyro_bias_body[2] *= -1;
000134  4252              RSBS     r2,r2,#0
                  |L1.310|
;;;598    
;;;599    #ifdef EMPL_NO_64BIT
;;;600        gyro_bias_body[0] = (long)(((float)gyro_bias_body[0] * GYRO_SF) / 1073741824.f);
;;;601        gyro_bias_body[1] = (long)(((float)gyro_bias_body[1] * GYRO_SF) / 1073741824.f);
;;;602        gyro_bias_body[2] = (long)(((float)gyro_bias_body[2] * GYRO_SF) / 1073741824.f);
;;;603    #else
;;;604        gyro_bias_body[0] = (long)(((long long)gyro_bias_body[0] * GYRO_SF) >> 30);
000136  49b8              LDR      r1,|L1.1048|
000138  fb844001          SMULL    r4,r0,r4,r1
00013c  0085              LSLS     r5,r0,#2
00013e  ea457094          ORR      r0,r5,r4,LSR #30
;;;605        gyro_bias_body[1] = (long)(((long long)gyro_bias_body[1] * GYRO_SF) >> 30);
000142  fb834301          SMULL    r4,r3,r3,r1
;;;606        gyro_bias_body[2] = (long)(((long long)gyro_bias_body[2] * GYRO_SF) >> 30);
000146  fb822101          SMULL    r2,r1,r2,r1
00014a  0f95              LSRS     r5,r2,#30
00014c  ea450581          ORR      r5,r5,r1,LSL #2
;;;607    #endif
;;;608    
;;;609        regs[0] = (unsigned char)((gyro_bias_body[0] >> 24) & 0xFF);
000150  0e01              LSRS     r1,r0,#24
000152  f88d1000          STRB     r1,[sp,#0]
;;;610        regs[1] = (unsigned char)((gyro_bias_body[0] >> 16) & 0xFF);
000156  0c01              LSRS     r1,r0,#16
000158  f88d1001          STRB     r1,[sp,#1]
;;;611        regs[2] = (unsigned char)((gyro_bias_body[0] >> 8) & 0xFF);
00015c  0a01              LSRS     r1,r0,#8
00015e  f88d1002          STRB     r1,[sp,#2]
000162  0fa4              LSRS     r4,r4,#30             ;605
;;;612        regs[3] = (unsigned char)(gyro_bias_body[0] & 0xFF);
000164  f88d0003          STRB     r0,[sp,#3]
000168  ea440483          ORR      r4,r4,r3,LSL #2       ;605
;;;613        if (mpu_write_mem(D_EXT_GYRO_BIAS_X, 4, regs))
00016c  466a              MOV      r2,sp
00016e  2104              MOVS     r1,#4
000170  f44f7074          MOV      r0,#0x3d0
000174  f7fffffe          BL       mpu_write_mem
;;;614            return -1;
000178  f04f36ff          MOV      r6,#0xffffffff
00017c  b988              CBNZ     r0,|L1.418|
;;;615    
;;;616        regs[0] = (unsigned char)((gyro_bias_body[1] >> 24) & 0xFF);
00017e  0e20              LSRS     r0,r4,#24
000180  f88d0000          STRB     r0,[sp,#0]
;;;617        regs[1] = (unsigned char)((gyro_bias_body[1] >> 16) & 0xFF);
000184  0c20              LSRS     r0,r4,#16
000186  f88d0001          STRB     r0,[sp,#1]
;;;618        regs[2] = (unsigned char)((gyro_bias_body[1] >> 8) & 0xFF);
00018a  0a20              LSRS     r0,r4,#8
00018c  f88d0002          STRB     r0,[sp,#2]
;;;619        regs[3] = (unsigned char)(gyro_bias_body[1] & 0xFF);
000190  f88d4003          STRB     r4,[sp,#3]
;;;620        if (mpu_write_mem(D_EXT_GYRO_BIAS_Y, 4, regs))
000194  466a              MOV      r2,sp
000196  2104              MOVS     r1,#4
000198  f44f7075          MOV      r0,#0x3d4
00019c  f7fffffe          BL       mpu_write_mem
0001a0  b108              CBZ      r0,|L1.422|
                  |L1.418|
;;;621            return -1;
0001a2  4630              MOV      r0,r6
;;;622    
;;;623        regs[0] = (unsigned char)((gyro_bias_body[2] >> 24) & 0xFF);
;;;624        regs[1] = (unsigned char)((gyro_bias_body[2] >> 16) & 0xFF);
;;;625        regs[2] = (unsigned char)((gyro_bias_body[2] >> 8) & 0xFF);
;;;626        regs[3] = (unsigned char)(gyro_bias_body[2] & 0xFF);
;;;627        return mpu_write_mem(D_EXT_GYRO_BIAS_Z, 4, regs);
;;;628    }
0001a4  bdf8              POP      {r3-r7,pc}
                  |L1.422|
0001a6  0e28              LSRS     r0,r5,#24             ;623
0001a8  f88d0000          STRB     r0,[sp,#0]            ;623
0001ac  0c28              LSRS     r0,r5,#16             ;624
0001ae  f88d0001          STRB     r0,[sp,#1]            ;624
0001b2  0a28              LSRS     r0,r5,#8              ;625
0001b4  f88d0002          STRB     r0,[sp,#2]            ;625
0001b8  f88d5003          STRB     r5,[sp,#3]            ;626
0001bc  466a              MOV      r2,sp                 ;627
0001be  2104              MOVS     r1,#4                 ;627
0001c0  f44f7076          MOV      r0,#0x3d8             ;627
0001c4  f7fffffe          BL       mpu_write_mem
0001c8  bdf8              POP      {r3-r7,pc}
;;;629    
                          ENDP

                  dmp_set_accel_bias PROC
;;;635     */
;;;636    int dmp_set_accel_bias(long *bias)
0001ca  e92d41ff          PUSH     {r0-r8,lr}
;;;637    {
0001ce  4604              MOV      r4,r0
;;;638        long accel_bias_body[3];
;;;639        unsigned char regs[12];
;;;640        long long accel_sf;
;;;641        unsigned short accel_sens;
;;;642    
;;;643        mpu_get_accel_sens(&accel_sens);
0001d0  a803              ADD      r0,sp,#0xc
0001d2  f7fffffe          BL       mpu_get_accel_sens
;;;644        accel_sf = (long long)accel_sens << 15;
0001d6  f8bd000c          LDRH     r0,[sp,#0xc]
0001da  0c42              LSRS     r2,r0,#17
0001dc  03c3              LSLS     r3,r0,#15
;;;645        //__no_operation();
;;;646    
;;;647        accel_bias_body[0] = bias[dmp.orient & 3];
0001de  488d              LDR      r0,|L1.1044|
0001e0  8901              LDRH     r1,[r0,#8]  ; dmp
0001e2  f0010003          AND      r0,r1,#3
;;;648        if (dmp.orient & 4)
0001e6  074d              LSLS     r5,r1,#29
0001e8  f8540020          LDR      r0,[r4,r0,LSL #2]     ;647
0001ec  d500              BPL      |L1.496|
;;;649            accel_bias_body[0] *= -1;
0001ee  4240              RSBS     r0,r0,#0
                  |L1.496|
;;;650        accel_bias_body[1] = bias[(dmp.orient >> 3) & 3];
0001f0  f3c105c1          UBFX     r5,r1,#3,#2
;;;651        if (dmp.orient & 0x20)
0001f4  068e              LSLS     r6,r1,#26
0001f6  f8545025          LDR      r5,[r4,r5,LSL #2]     ;650
0001fa  d500              BPL      |L1.510|
;;;652            accel_bias_body[1] *= -1;
0001fc  426d              RSBS     r5,r5,#0
                  |L1.510|
;;;653        accel_bias_body[2] = bias[(dmp.orient >> 6) & 3];
0001fe  f3c11681          UBFX     r6,r1,#6,#2
;;;654        if (dmp.orient & 0x100)
000202  05c9              LSLS     r1,r1,#23
000204  f8544026          LDR      r4,[r4,r6,LSL #2]     ;653
000208  d500              BPL      |L1.524|
;;;655            accel_bias_body[2] *= -1;
00020a  4264              RSBS     r4,r4,#0
                  |L1.524|
;;;656    
;;;657    #ifdef EMPL_NO_64BIT
;;;658        accel_bias_body[0] = (long)(((float)accel_bias_body[0] * accel_sf) / 1073741824.f);
;;;659        accel_bias_body[1] = (long)(((float)accel_bias_body[1] * accel_sf) / 1073741824.f);
;;;660        accel_bias_body[2] = (long)(((float)accel_bias_body[2] * accel_sf) / 1073741824.f);
;;;661    #else
;;;662        accel_bias_body[0] = (long)(((long long)accel_bias_body[0] * accel_sf) >> 30);
00020c  fba06703          UMULL    r6,r7,r0,r3
000210  17c1              ASRS     r1,r0,#31
000212  fb017103          MLA      r1,r1,r3,r7
000216  fb001002          MLA      r0,r0,r2,r1
00021a  0081              LSLS     r1,r0,#2
00021c  ea417096          ORR      r0,r1,r6,LSR #30
;;;663        accel_bias_body[1] = (long)(((long long)accel_bias_body[1] * accel_sf) >> 30);
000220  fba56703          UMULL    r6,r7,r5,r3
000224  17e9              ASRS     r1,r5,#31
000226  fb017103          MLA      r1,r1,r3,r7
00022a  fb051102          MLA      r1,r5,r2,r1
00022e  008d              LSLS     r5,r1,#2
000230  ea457196          ORR      r1,r5,r6,LSR #30
;;;664        accel_bias_body[2] = (long)(((long long)accel_bias_body[2] * accel_sf) >> 30);
000234  fba46703          UMULL    r6,r7,r4,r3
000238  17e5              ASRS     r5,r4,#31
00023a  fb057303          MLA      r3,r5,r3,r7
00023e  fb043202          MLA      r2,r4,r2,r3
000242  0093              LSLS     r3,r2,#2
000244  ea437296          ORR      r2,r3,r6,LSR #30
;;;665    #endif
;;;666    
;;;667        regs[0] = (unsigned char)((accel_bias_body[0] >> 24) & 0xFF);
000248  0e03              LSRS     r3,r0,#24
00024a  f88d3000          STRB     r3,[sp,#0]
;;;668        regs[1] = (unsigned char)((accel_bias_body[0] >> 16) & 0xFF);
00024e  0c03              LSRS     r3,r0,#16
000250  f88d3001          STRB     r3,[sp,#1]
;;;669        regs[2] = (unsigned char)((accel_bias_body[0] >> 8) & 0xFF);
000254  0a03              LSRS     r3,r0,#8
000256  f88d3002          STRB     r3,[sp,#2]
;;;670        regs[3] = (unsigned char)(accel_bias_body[0] & 0xFF);
00025a  f88d0003          STRB     r0,[sp,#3]
;;;671        regs[4] = (unsigned char)((accel_bias_body[1] >> 24) & 0xFF);
00025e  0e08              LSRS     r0,r1,#24
000260  f88d0004          STRB     r0,[sp,#4]
;;;672        regs[5] = (unsigned char)((accel_bias_body[1] >> 16) & 0xFF);
000264  0c08              LSRS     r0,r1,#16
000266  f88d0005          STRB     r0,[sp,#5]
;;;673        regs[6] = (unsigned char)((accel_bias_body[1] >> 8) & 0xFF);
00026a  0a08              LSRS     r0,r1,#8
00026c  f88d0006          STRB     r0,[sp,#6]
;;;674        regs[7] = (unsigned char)(accel_bias_body[1] & 0xFF);
;;;675        regs[8] = (unsigned char)((accel_bias_body[2] >> 24) & 0xFF);
000270  0e10              LSRS     r0,r2,#24
000272  f88d0008          STRB     r0,[sp,#8]
;;;676        regs[9] = (unsigned char)((accel_bias_body[2] >> 16) & 0xFF);
000276  0c10              LSRS     r0,r2,#16
000278  f88d0009          STRB     r0,[sp,#9]
;;;677        regs[10] = (unsigned char)((accel_bias_body[2] >> 8) & 0xFF);
00027c  0a10              LSRS     r0,r2,#8
00027e  f88d000a          STRB     r0,[sp,#0xa]
000282  f88d1007          STRB     r1,[sp,#7]            ;674
;;;678        regs[11] = (unsigned char)(accel_bias_body[2] & 0xFF);
000286  f88d200b          STRB     r2,[sp,#0xb]
;;;679        return mpu_write_mem(D_ACCEL_BIAS, 12, regs);
00028a  466a              MOV      r2,sp
00028c  210c              MOVS     r1,#0xc
00028e  f44f7025          MOV      r0,#0x294
000292  f7fffffe          BL       mpu_write_mem
;;;680    }
000296  e72f              B        |L1.248|
;;;681    
                          ENDP

                  dmp_set_fifo_rate PROC
;;;687     */
;;;688    int dmp_set_fifo_rate(unsigned short rate)
000298  b530              PUSH     {r4,r5,lr}
;;;689    {
00029a  4604              MOV      r4,r0
;;;690        const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
00029c  a15f              ADR      r1,|L1.1052|
00029e  b085              SUB      sp,sp,#0x14           ;689
0002a0  c907              LDM      r1,{r0-r2}
;;;691            0xc4, DINAAA, DINAF1, DINADF, DINADF, 0xBB, 0xAF, DINADF, DINADF};
;;;692        unsigned short div;
;;;693        unsigned char tmp[8];
;;;694    
;;;695        if (rate > DMP_SAMPLE_RATE)
0002a2  e88d0007          STM      sp,{r0-r2}
;;;696            return -1;
0002a6  f04f35ff          MOV      r5,#0xffffffff
0002aa  2cc8              CMP      r4,#0xc8              ;695
0002ac  d816              BHI      |L1.732|
;;;697        div = DMP_SAMPLE_RATE / rate - 1;
0002ae  20c8              MOVS     r0,#0xc8
0002b0  fbb0f1f4          UDIV     r1,r0,r4
0002b4  1e49              SUBS     r1,r1,#1
;;;698        tmp[0] = (unsigned char)((div >> 8) & 0xFF);
0002b6  0a08              LSRS     r0,r1,#8
0002b8  f88d000c          STRB     r0,[sp,#0xc]
;;;699        tmp[1] = (unsigned char)(div & 0xFF);
0002bc  f88d100d          STRB     r1,[sp,#0xd]
;;;700        if (mpu_write_mem(D_0_22, 2, tmp))
0002c0  aa03              ADD      r2,sp,#0xc
0002c2  2102              MOVS     r1,#2
0002c4  f2402016          MOV      r0,#0x216
0002c8  f7fffffe          BL       mpu_write_mem
0002cc  b930              CBNZ     r0,|L1.732|
;;;701            return -1;
;;;702        if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
0002ce  466a              MOV      r2,sp
0002d0  210c              MOVS     r1,#0xc
0002d2  f64020c1          MOV      r0,#0xac1
0002d6  f7fffffe          BL       mpu_write_mem
0002da  b110              CBZ      r0,|L1.738|
                  |L1.732|
;;;703            return -1;
0002dc  4628              MOV      r0,r5
                  |L1.734|
;;;704    
;;;705        dmp.fifo_rate = rate;
;;;706        return 0;
;;;707    }
0002de  b005              ADD      sp,sp,#0x14
0002e0  bd30              POP      {r4,r5,pc}
                  |L1.738|
0002e2  484c              LDR      r0,|L1.1044|
0002e4  8184              STRH     r4,[r0,#0xc]          ;705
0002e6  2000              MOVS     r0,#0                 ;706
0002e8  e7f9              B        |L1.734|
;;;708    
                          ENDP

                  dmp_get_fifo_rate PROC
;;;713     */
;;;714    int dmp_get_fifo_rate(unsigned short *rate)
0002ea  494a              LDR      r1,|L1.1044|
;;;715    {
;;;716        rate[0] = dmp.fifo_rate;
0002ec  8989              LDRH     r1,[r1,#0xc]  ; dmp
0002ee  8001              STRH     r1,[r0,#0]
;;;717        return 0;
0002f0  2000              MOVS     r0,#0
;;;718    }
0002f2  4770              BX       lr
;;;719    
                          ENDP

                  dmp_set_tap_thresh PROC
;;;725     */
;;;726    int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
0002f4  e92d41fc          PUSH     {r2-r8,lr}
;;;727    {
0002f8  4605              MOV      r5,r0
;;;728        unsigned char tmp[4], accel_fsr;
;;;729        float scaled_thresh;
;;;730        unsigned short dmp_thresh, dmp_thresh_2;
;;;731        if (!(axis & TAP_XYZ) || thresh > 1600)
0002fa  0740              LSLS     r0,r0,#29
;;;732            return -1;
0002fc  f04f36ff          MOV      r6,#0xffffffff
000300  d07c              BEQ      |L1.1020|
000302  f5b16fc8          CMP      r1,#0x640             ;731
000306  d879              BHI      |L1.1020|
;;;733    
;;;734        scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
000308  4608              MOV      r0,r1
00030a  f7fffffe          BL       __aeabi_ui2f
00030e  4946              LDR      r1,|L1.1064|
000310  f7fffffe          BL       __aeabi_fdiv
000314  4607              MOV      r7,r0
;;;735    
;;;736        mpu_get_accel_fsr(&accel_fsr);
000316  a801              ADD      r0,sp,#4
000318  f7fffffe          BL       mpu_get_accel_fsr
;;;737        switch (accel_fsr) {
00031c  f89d0004          LDRB     r0,[sp,#4]
000320  2802              CMP      r0,#2
000322  d006              BEQ      |L1.818|
000324  2804              CMP      r0,#4
000326  d00d              BEQ      |L1.836|
000328  2808              CMP      r0,#8
00032a  d02e              BEQ      |L1.906|
00032c  2810              CMP      r0,#0x10
00032e  d165              BNE      |L1.1020|
000330  e034              B        |L1.924|
                  |L1.818|
;;;738        case 2:
;;;739            dmp_thresh = (unsigned short)(scaled_thresh * 16384);
000332  210e              MOVS     r1,#0xe
000334  4638              MOV      r0,r7
000336  f7fffffe          BL       __ARM_scalbnf
00033a  f7fffffe          BL       __aeabi_f2uiz
00033e  b284              UXTH     r4,r0
;;;740            /* dmp_thresh * 0.75 */
;;;741            dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
000340  493a              LDR      r1,|L1.1068|
;;;742            break;
000342  e007              B        |L1.852|
                  |L1.836|
;;;743        case 4:
;;;744            dmp_thresh = (unsigned short)(scaled_thresh * 8192);
000344  210d              MOVS     r1,#0xd
000346  4638              MOV      r0,r7
000348  f7fffffe          BL       __ARM_scalbnf
00034c  f7fffffe          BL       __aeabi_f2uiz
;;;745            /* dmp_thresh * 0.75 */
;;;746            dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
000350  4937              LDR      r1,|L1.1072|
000352  b284              UXTH     r4,r0                 ;744
                  |L1.852|
000354  4638              MOV      r0,r7                 ;741
000356  f7fffffe          BL       __aeabi_fmul
00035a  f7fffffe          BL       __aeabi_f2uiz
;;;747            break;
;;;748        case 8:
;;;749            dmp_thresh = (unsigned short)(scaled_thresh * 4096);
;;;750            /* dmp_thresh * 0.75 */
;;;751            dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
;;;752            break;
;;;753        case 16:
;;;754            dmp_thresh = (unsigned short)(scaled_thresh * 2048);
;;;755            /* dmp_thresh * 0.75 */
;;;756            dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
;;;757            break;
;;;758        default:
;;;759            return -1;
;;;760        }
;;;761        tmp[0] = (unsigned char)(dmp_thresh >> 8);
00035e  0a21              LSRS     r1,r4,#8
000360  f88d1000          STRB     r1,[sp,#0]
000364  b280              UXTH     r0,r0                 ;741
;;;762        tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
000366  f88d4001          STRB     r4,[sp,#1]
;;;763        tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
00036a  0a01              LSRS     r1,r0,#8
00036c  f88d1002          STRB     r1,[sp,#2]
;;;764        tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
000370  f88d0003          STRB     r0,[sp,#3]
;;;765    
;;;766        if (axis & TAP_X) {
000374  07e8              LSLS     r0,r5,#31
000376  466c              MOV      r4,sp                 ;728
000378  d020              BEQ      |L1.956|
;;;767            if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
00037a  4622              MOV      r2,r4
00037c  2102              MOVS     r1,#2
00037e  f44f70ea          MOV      r0,#0x1d4
000382  f7fffffe          BL       mpu_write_mem
000386  bbc8              CBNZ     r0,|L1.1020|
000388  e011              B        |L1.942|
                  |L1.906|
00038a  210c              MOVS     r1,#0xc               ;749
00038c  4638              MOV      r0,r7                 ;749
00038e  f7fffffe          BL       __ARM_scalbnf
000392  f7fffffe          BL       __aeabi_f2uiz
000396  b284              UXTH     r4,r0                 ;749
000398  4926              LDR      r1,|L1.1076|
00039a  e7db              B        |L1.852|
                  |L1.924|
00039c  210b              MOVS     r1,#0xb               ;754
00039e  4638              MOV      r0,r7                 ;754
0003a0  f7fffffe          BL       __ARM_scalbnf
0003a4  f7fffffe          BL       __aeabi_f2uiz
0003a8  b284              UXTH     r4,r0                 ;754
0003aa  4923              LDR      r1,|L1.1080|
0003ac  e7d2              B        |L1.852|
                  |L1.942|
;;;768                return -1;
;;;769            if (mpu_write_mem(D_1_36, 2, tmp+2))
0003ae  1ca2              ADDS     r2,r4,#2
0003b0  2102              MOVS     r1,#2
0003b2  f44f7092          MOV      r0,#0x124
0003b6  f7fffffe          BL       mpu_write_mem
0003ba  b9f8              CBNZ     r0,|L1.1020|
                  |L1.956|
;;;770                return -1;
;;;771        }
;;;772        if (axis & TAP_Y) {
0003bc  07a8              LSLS     r0,r5,#30
0003be  d50d              BPL      |L1.988|
;;;773            if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
0003c0  466a              MOV      r2,sp
0003c2  2102              MOVS     r1,#2
0003c4  f44f70ec          MOV      r0,#0x1d8
0003c8  f7fffffe          BL       mpu_write_mem
0003cc  b9b0              CBNZ     r0,|L1.1020|
;;;774                return -1;
;;;775            if (mpu_write_mem(D_1_40, 2, tmp+2))
0003ce  1ca2              ADDS     r2,r4,#2
0003d0  2102              MOVS     r1,#2
0003d2  f44f7094          MOV      r0,#0x128
0003d6  f7fffffe          BL       mpu_write_mem
0003da  b978              CBNZ     r0,|L1.1020|
                  |L1.988|
;;;776                return -1;
;;;777        }
;;;778        if (axis & TAP_Z) {
0003dc  0768              LSLS     r0,r5,#29
0003de  d531              BPL      |L1.1092|
;;;779            if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
0003e0  466a              MOV      r2,sp
0003e2  2102              MOVS     r1,#2
0003e4  f44f70ee          MOV      r0,#0x1dc
0003e8  f7fffffe          BL       mpu_write_mem
0003ec  b930              CBNZ     r0,|L1.1020|
;;;780                return -1;
;;;781            if (mpu_write_mem(D_1_44, 2, tmp+2))
0003ee  1ca2              ADDS     r2,r4,#2
0003f0  2102              MOVS     r1,#2
0003f2  f44f7096          MOV      r0,#0x12c
0003f6  f7fffffe          BL       mpu_write_mem
0003fa  e01f              B        |L1.1084|
                  |L1.1020|
0003fc  e01f              B        |L1.1086|
0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      ||.constdata||
                  |L1.1028|
000404  4ccd6c00          DCB      "L",205,"l",0
                  |L1.1032|
000408  0cc92c00          DCB      "\f",201,",",0
                  |L1.1036|
00040c  36567600          DCB      "6Vv",0
                  |L1.1040|
000410  26466600          DCB      "&Ff",0
                  |L1.1044|
                          DCD      ||.bss||
                  |L1.1048|
                          DCD      0x02cae309
                  |L1.1052|
00041c  fef2abc4          DCB      254,242,171,196,170,241,223,223,187,175,223,223
000420  aaf1dfdf
000424  bbafdfdf
                  |L1.1064|
                          DCD      0x43480000
                  |L1.1068|
                          DCD      0x46400000
                  |L1.1072|
                          DCD      0x45c00000
                  |L1.1076|
                          DCD      0x45400000
                  |L1.1080|
                          DCD      0x44c00000
                  |L1.1084|
00043c  b110              CBZ      r0,|L1.1092|
                  |L1.1086|
;;;782                return -1;
00043e  4630              MOV      r0,r6
                  |L1.1088|
;;;783        }
;;;784        return 0;
;;;785    }
000440  e8bd81fc          POP      {r2-r8,pc}
                  |L1.1092|
000444  2000              MOVS     r0,#0                 ;784
000446  e7fb              B        |L1.1088|
;;;786    
                          ENDP

                  dmp_set_tap_axes PROC
;;;791     */
;;;792    int dmp_set_tap_axes(unsigned char axis)
000448  b508              PUSH     {r3,lr}
;;;793    {
;;;794        unsigned char tmp = 0;
00044a  2100              MOVS     r1,#0
00044c  f88d1000          STRB     r1,[sp,#0]
;;;795    
;;;796        if (axis & TAP_X)
000450  07c1              LSLS     r1,r0,#31
000452  d002              BEQ      |L1.1114|
;;;797            tmp |= 0x30;
000454  2130              MOVS     r1,#0x30
000456  f88d1000          STRB     r1,[sp,#0]
                  |L1.1114|
;;;798        if (axis & TAP_Y)
00045a  0781              LSLS     r1,r0,#30
00045c  d505              BPL      |L1.1130|
;;;799            tmp |= 0x0C;
00045e  f89d1000          LDRB     r1,[sp,#0]
000462  f041010c          ORR      r1,r1,#0xc
000466  f88d1000          STRB     r1,[sp,#0]
                  |L1.1130|
;;;800        if (axis & TAP_Z)
00046a  0740              LSLS     r0,r0,#29
00046c  d505              BPL      |L1.1146|
;;;801            tmp |= 0x03;
00046e  f89d0000          LDRB     r0,[sp,#0]
000472  f0400003          ORR      r0,r0,#3
000476  f88d0000          STRB     r0,[sp,#0]
                  |L1.1146|
;;;802        return mpu_write_mem(D_1_72, 1, &tmp);
00047a  466a              MOV      r2,sp
00047c  2101              MOVS     r1,#1
00047e  f44f70a4          MOV      r0,#0x148
000482  f7fffffe          BL       mpu_write_mem
;;;803    }
000486  bd08              POP      {r3,pc}
;;;804    
                          ENDP

                  dmp_set_tap_count PROC
;;;809     */
;;;810    int dmp_set_tap_count(unsigned char min_taps)
000488  b508              PUSH     {r3,lr}
;;;811    {
00048a  b160              CBZ      r0,|L1.1190|
;;;812        unsigned char tmp;
;;;813    
;;;814        if (min_taps < 1)
;;;815            min_taps = 1;
;;;816        else if (min_taps > 4)
00048c  2804              CMP      r0,#4
00048e  d900              BLS      |L1.1170|
;;;817            min_taps = 4;
000490  2004              MOVS     r0,#4
                  |L1.1170|
000492  1e40              SUBS     r0,r0,#1
;;;818    
;;;819        tmp = min_taps - 1;
000494  f88d0000          STRB     r0,[sp,#0]
;;;820        return mpu_write_mem(D_1_79, 1, &tmp);
000498  466a              MOV      r2,sp
00049a  2101              MOVS     r1,#1
00049c  f240104f          MOV      r0,#0x14f
0004a0  f7fffffe          BL       mpu_write_mem
;;;821    }
0004a4  bd08              POP      {r3,pc}
                  |L1.1190|
0004a6  2001              MOVS     r0,#1                 ;815
0004a8  e7f3              B        |L1.1170|
;;;822    
                          ENDP

                  dmp_set_tap_time PROC
;;;827     */
;;;828    int dmp_set_tap_time(unsigned short time)
0004aa  2105              MOVS     r1,#5
;;;829    {
;;;830        unsigned short dmp_time;
;;;831        unsigned char tmp[2];
;;;832    
;;;833        dmp_time = time / (1000 / DMP_SAMPLE_RATE);
0004ac  fbb0f0f1          UDIV     r0,r0,r1
0004b0  b508              PUSH     {r3,lr}               ;829
;;;834        tmp[0] = (unsigned char)(dmp_time >> 8);
0004b2  0a01              LSRS     r1,r0,#8
0004b4  f88d1000          STRB     r1,[sp,#0]
;;;835        tmp[1] = (unsigned char)(dmp_time & 0xFF);
0004b8  f88d0001          STRB     r0,[sp,#1]
;;;836        return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
0004bc  466a              MOV      r2,sp
0004be  2102              MOVS     r1,#2
0004c0  f44f70ef          MOV      r0,#0x1de
0004c4  f7fffffe          BL       mpu_write_mem
;;;837    }
0004c8  bd08              POP      {r3,pc}
;;;838    
                          ENDP

                  dmp_set_tap_time_multi PROC
;;;843     */
;;;844    int dmp_set_tap_time_multi(unsigned short time)
0004ca  2105              MOVS     r1,#5
;;;845    {
;;;846        unsigned short dmp_time;
;;;847        unsigned char tmp[2];
;;;848    
;;;849        dmp_time = time / (1000 / DMP_SAMPLE_RATE);
0004cc  fbb0f0f1          UDIV     r0,r0,r1
0004d0  b508              PUSH     {r3,lr}               ;845
;;;850        tmp[0] = (unsigned char)(dmp_time >> 8);
0004d2  0a01              LSRS     r1,r0,#8
0004d4  f88d1000          STRB     r1,[sp,#0]
;;;851        tmp[1] = (unsigned char)(dmp_time & 0xFF);
0004d8  f88d0001          STRB     r0,[sp,#1]
;;;852        return mpu_write_mem(D_1_218, 2, tmp);
0004dc  466a              MOV      r2,sp
0004de  2102              MOVS     r1,#2
0004e0  f44f70ed          MOV      r0,#0x1da
0004e4  f7fffffe          BL       mpu_write_mem
;;;853    }
0004e8  bd08              POP      {r3,pc}
;;;854    
                          ENDP

                  dmp_set_shake_reject_thresh PROC
;;;861     */
;;;862    int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
0004ea  f44f727a          MOV      r2,#0x3e8
;;;863    {
;;;864        unsigned char tmp[4];
;;;865        long thresh_scaled = sf / 1000 * thresh;
0004ee  fb90f0f2          SDIV     r0,r0,r2
0004f2  b508              PUSH     {r3,lr}               ;863
0004f4  4348              MULS     r0,r1,r0
;;;866        tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
0004f6  0e01              LSRS     r1,r0,#24
0004f8  f88d1000          STRB     r1,[sp,#0]
;;;867        tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
0004fc  0c01              LSRS     r1,r0,#16
0004fe  f88d1001          STRB     r1,[sp,#1]
;;;868        tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
000502  0a01              LSRS     r1,r0,#8
000504  f88d1002          STRB     r1,[sp,#2]
;;;869        tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
000508  f88d0003          STRB     r0,[sp,#3]
;;;870        return mpu_write_mem(D_1_92, 4, tmp);
00050c  466a              MOV      r2,sp
00050e  2104              MOVS     r1,#4
000510  f44f70ae          MOV      r0,#0x15c
000514  f7fffffe          BL       mpu_write_mem
;;;871    }
000518  bd08              POP      {r3,pc}
;;;872    
                          ENDP

                  dmp_set_shake_reject_time PROC
;;;880     */
;;;881    int dmp_set_shake_reject_time(unsigned short time)
00051a  2105              MOVS     r1,#5
;;;882    {
;;;883        unsigned char tmp[2];
;;;884    
;;;885        time /= (1000 / DMP_SAMPLE_RATE);
00051c  fbb0f0f1          UDIV     r0,r0,r1
000520  b508              PUSH     {r3,lr}               ;882
;;;886        tmp[0] = time >> 8;
000522  0a01              LSRS     r1,r0,#8
000524  f88d1000          STRB     r1,[sp,#0]
;;;887        tmp[1] = time & 0xFF;
000528  f88d0001          STRB     r0,[sp,#1]
;;;888        return mpu_write_mem(D_1_90,2,tmp);
00052c  466a              MOV      r2,sp
00052e  2102              MOVS     r1,#2
000530  f44f70ad          MOV      r0,#0x15a
000534  f7fffffe          BL       mpu_write_mem
;;;889    }
000538  bd08              POP      {r3,pc}
;;;890    
                          ENDP

                  dmp_set_shake_reject_timeout PROC
;;;898     */
;;;899    int dmp_set_shake_reject_timeout(unsigned short time)
00053a  2105              MOVS     r1,#5
;;;900    {
;;;901        unsigned char tmp[2];
;;;902    
;;;903        time /= (1000 / DMP_SAMPLE_RATE);
00053c  fbb0f0f1          UDIV     r0,r0,r1
000540  b508              PUSH     {r3,lr}               ;900
;;;904        tmp[0] = time >> 8;
000542  0a01              LSRS     r1,r0,#8
000544  f88d1000          STRB     r1,[sp,#0]
;;;905        tmp[1] = time & 0xFF;
000548  f88d0001          STRB     r0,[sp,#1]
;;;906        return mpu_write_mem(D_1_88,2,tmp);
00054c  466a              MOV      r2,sp
00054e  2102              MOVS     r1,#2
000550  f44f70ac          MOV      r0,#0x158
000554  f7fffffe          BL       mpu_write_mem
;;;907    }
000558  bd08              POP      {r3,pc}
;;;908    
                          ENDP

                  dmp_get_pedometer_step_count PROC
;;;913     */
;;;914    int dmp_get_pedometer_step_count(unsigned long *count)
00055a  b538              PUSH     {r3-r5,lr}
;;;915    {
00055c  0004              MOVS     r4,r0
;;;916        unsigned char tmp[4];
;;;917        if (!count)
;;;918            return -1;
00055e  f04f35ff          MOV      r5,#0xffffffff
000562  d006              BEQ      |L1.1394|
;;;919    
;;;920        if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
000564  466a              MOV      r2,sp
000566  2104              MOVS     r1,#4
000568  f44f7058          MOV      r0,#0x360
00056c  f7fffffe          BL       mpu_read_mem
000570  b108              CBZ      r0,|L1.1398|
                  |L1.1394|
;;;921            return -1;
000572  4628              MOV      r0,r5
;;;922    
;;;923        count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
;;;924            ((unsigned long)tmp[2] << 8) | tmp[3];
;;;925        return 0;
;;;926    }
000574  bd38              POP      {r3-r5,pc}
                  |L1.1398|
000576  9800              LDR      r0,[sp,#0]            ;923
000578  f89d1003          LDRB     r1,[sp,#3]            ;923
00057c  ba00              REV      r0,r0                 ;923
00057e  f02000ff          BIC      r0,r0,#0xff           ;923
000582  4308              ORRS     r0,r0,r1              ;923
000584  6020              STR      r0,[r4,#0]            ;925
000586  2000              MOVS     r0,#0                 ;925
000588  bd38              POP      {r3-r5,pc}
;;;927    
                          ENDP

                  dmp_set_pedometer_step_count PROC
;;;934     */
;;;935    int dmp_set_pedometer_step_count(unsigned long count)
00058a  b508              PUSH     {r3,lr}
;;;936    {
;;;937        unsigned char tmp[4];
;;;938    
;;;939        tmp[0] = (unsigned char)((count >> 24) & 0xFF);
00058c  0e01              LSRS     r1,r0,#24
00058e  f88d1000          STRB     r1,[sp,#0]
;;;940        tmp[1] = (unsigned char)((count >> 16) & 0xFF);
000592  0c01              LSRS     r1,r0,#16
000594  f88d1001          STRB     r1,[sp,#1]
;;;941        tmp[2] = (unsigned char)((count >> 8) & 0xFF);
000598  0a01              LSRS     r1,r0,#8
00059a  f88d1002          STRB     r1,[sp,#2]
;;;942        tmp[3] = (unsigned char)(count & 0xFF);
00059e  f88d0003          STRB     r0,[sp,#3]
;;;943        return mpu_write_mem(D_PEDSTD_STEPCTR, 4, tmp);
0005a2  466a              MOV      r2,sp
0005a4  2104              MOVS     r1,#4
0005a6  f44f7058          MOV      r0,#0x360
0005aa  f7fffffe          BL       mpu_write_mem
;;;944    }
0005ae  bd08              POP      {r3,pc}
;;;945    
                          ENDP

                  dmp_get_pedometer_walk_time PROC
;;;950     */
;;;951    int dmp_get_pedometer_walk_time(unsigned long *time)
0005b0  b538              PUSH     {r3-r5,lr}
;;;952    {
0005b2  0004              MOVS     r4,r0
;;;953        unsigned char tmp[4];
;;;954        if (!time)
;;;955            return -1;
0005b4  f04f35ff          MOV      r5,#0xffffffff
0005b8  d006              BEQ      |L1.1480|
;;;956    
;;;957        if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
0005ba  466a              MOV      r2,sp
0005bc  2104              MOVS     r1,#4
0005be  f44f7071          MOV      r0,#0x3c4
0005c2  f7fffffe          BL       mpu_read_mem
0005c6  b108              CBZ      r0,|L1.1484|
                  |L1.1480|
;;;958            return -1;
0005c8  4628              MOV      r0,r5
;;;959    
;;;960        time[0] = (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) |
;;;961            ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
;;;962        return 0;
;;;963    }
0005ca  bd38              POP      {r3-r5,pc}
                  |L1.1484|
0005cc  9800              LDR      r0,[sp,#0]            ;960
0005ce  ba00              REV      r0,r0                 ;960
0005d0  f02001ff          BIC      r1,r0,#0xff           ;960
0005d4  f89d0003          LDRB     r0,[sp,#3]            ;960
0005d8  4301              ORRS     r1,r1,r0              ;960
0005da  eb010081          ADD      r0,r1,r1,LSL #2       ;960
0005de  0080              LSLS     r0,r0,#2              ;960
0005e0  6020              STR      r0,[r4,#0]            ;962
0005e2  2000              MOVS     r0,#0                 ;962
0005e4  bd38              POP      {r3-r5,pc}
;;;964    
                          ENDP

                  dmp_set_pedometer_walk_time PROC
;;;970     */
;;;971    int dmp_set_pedometer_walk_time(unsigned long time)
0005e6  2114              MOVS     r1,#0x14
;;;972    {
;;;973        unsigned char tmp[4];
;;;974    
;;;975        time /= 20;
0005e8  fbb0f0f1          UDIV     r0,r0,r1
0005ec  b508              PUSH     {r3,lr}               ;972
;;;976    
;;;977        tmp[0] = (unsigned char)((time >> 24) & 0xFF);
0005ee  0e01              LSRS     r1,r0,#24
0005f0  f88d1000          STRB     r1,[sp,#0]
;;;978        tmp[1] = (unsigned char)((time >> 16) & 0xFF);
0005f4  0c01              LSRS     r1,r0,#16
0005f6  f88d1001          STRB     r1,[sp,#1]
;;;979        tmp[2] = (unsigned char)((time >> 8) & 0xFF);
0005fa  0a01              LSRS     r1,r0,#8
0005fc  f88d1002          STRB     r1,[sp,#2]
;;;980        tmp[3] = (unsigned char)(time & 0xFF);
000600  f88d0003          STRB     r0,[sp,#3]
;;;981        return mpu_write_mem(D_PEDSTD_TIMECTR, 4, tmp);
000604  466a              MOV      r2,sp
000606  2104              MOVS     r1,#4
000608  f44f7071          MOV      r0,#0x3c4
00060c  f7fffffe          BL       mpu_write_mem
;;;982    }
000610  bd08              POP      {r3,pc}
;;;983    
                          ENDP

                  dmp_enable_6x_lp_quat PROC
;;;1179    */
;;;1180   int dmp_enable_6x_lp_quat(unsigned char enable)
000612  b508              PUSH     {r3,lr}
;;;1181   {
000614  b160              CBZ      r0,|L1.1584|
;;;1182       unsigned char regs[4];
;;;1183       if (enable) {
;;;1184           regs[0] = DINA20;
000616  2020              MOVS     r0,#0x20
000618  f88d0000          STRB     r0,[sp,#0]
;;;1185           regs[1] = DINA28;
00061c  2028              MOVS     r0,#0x28
00061e  f88d0001          STRB     r0,[sp,#1]
;;;1186           regs[2] = DINA30;
000622  2030              MOVS     r0,#0x30
000624  f88d0002          STRB     r0,[sp,#2]
;;;1187           regs[3] = DINA38;
000628  2038              MOVS     r0,#0x38
00062a  f88d0003          STRB     r0,[sp,#3]
00062e  e004              B        |L1.1594|
                  |L1.1584|
;;;1188       } else
;;;1189           memset(regs, 0xA3, 4);
000630  22a3              MOVS     r2,#0xa3
000632  2104              MOVS     r1,#4
000634  4668              MOV      r0,sp
000636  f7fffffe          BL       __aeabi_memset
                  |L1.1594|
;;;1190   
;;;1191       mpu_write_mem(CFG_8, 4, regs);
00063a  466a              MOV      r2,sp
00063c  2104              MOVS     r1,#4
00063e  f640209e          MOV      r0,#0xa9e
000642  f7fffffe          BL       mpu_write_mem
;;;1192   
;;;1193       return mpu_reset_fifo();
000646  f7fffffe          BL       mpu_reset_fifo
;;;1194   }
00064a  bd08              POP      {r3,pc}
;;;1195   
                          ENDP

                  dmp_enable_lp_quat PROC
;;;1155    */
;;;1156   int dmp_enable_lp_quat(unsigned char enable)
00064c  b508              PUSH     {r3,lr}
;;;1157   {
00064e  b160              CBZ      r0,|L1.1642|
;;;1158       unsigned char regs[4];
;;;1159       if (enable) {
;;;1160           regs[0] = DINBC0;
000650  20c0              MOVS     r0,#0xc0
000652  f88d0000          STRB     r0,[sp,#0]
;;;1161           regs[1] = DINBC2;
000656  20c2              MOVS     r0,#0xc2
000658  f88d0001          STRB     r0,[sp,#1]
;;;1162           regs[2] = DINBC4;
00065c  20c4              MOVS     r0,#0xc4
00065e  f88d0002          STRB     r0,[sp,#2]
;;;1163           regs[3] = DINBC6;
000662  20c6              MOVS     r0,#0xc6
000664  f88d0003          STRB     r0,[sp,#3]
000668  e004              B        |L1.1652|
                  |L1.1642|
;;;1164       }
;;;1165       else
;;;1166           memset(regs, 0x8B, 4);
00066a  228b              MOVS     r2,#0x8b
00066c  2104              MOVS     r1,#4
00066e  4668              MOV      r0,sp
000670  f7fffffe          BL       __aeabi_memset
                  |L1.1652|
;;;1167   
;;;1168       mpu_write_mem(CFG_LP_QUAT, 4, regs);
000674  466a              MOV      r2,sp
000676  2104              MOVS     r1,#4
000678  f6402098          MOV      r0,#0xa98
00067c  f7fffffe          BL       mpu_write_mem
;;;1169   
;;;1170       return mpu_reset_fifo();
000680  f7fffffe          BL       mpu_reset_fifo
;;;1171   }
000684  bd08              POP      {r3,pc}
;;;1172   
                          ENDP

                  dmp_enable_gyro_cal PROC
;;;1137    */
;;;1138   int dmp_enable_gyro_cal(unsigned char enable)
000686  b50e              PUSH     {r1-r3,lr}
;;;1139   {
;;;1140       if (enable) {
;;;1141           unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
;;;1142           return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
000688  f44f6397          MOV      r3,#0x4b8
00068c  b108              CBZ      r0,|L1.1682|
00068e  a0e1              ADR      r0,|L1.2580|
000690  e000              B        |L1.1684|
                  |L1.1682|
;;;1143       } else {
;;;1144           unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
000692  a0e3              ADR      r0,|L1.2592|
                  |L1.1684|
000694  c807              LDM      r0,{r0-r2}
000696  e88d0007          STM      sp,{r0-r2}
;;;1145           return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
00069a  466a              MOV      r2,sp
00069c  2109              MOVS     r1,#9
00069e  4618              MOV      r0,r3
0006a0  f7fffffe          BL       mpu_write_mem
;;;1146       }
;;;1147   }
0006a4  bd0e              POP      {r1-r3,pc}
;;;1148   
                          ENDP

                  dmp_enable_feature PROC
;;;1000    */
;;;1001   int dmp_enable_feature(unsigned short mask)
0006a6  b53e              PUSH     {r1-r5,lr}
;;;1002   {
0006a8  4604              MOV      r4,r0
;;;1003       unsigned char tmp[10];
;;;1004   
;;;1005       /* TODO: All of these settings can probably be integrated into the default
;;;1006        * DMP image.
;;;1007        */
;;;1008       /* Set integration scale factor. */
;;;1009       tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
0006aa  2002              MOVS     r0,#2
0006ac  f88d0000          STRB     r0,[sp,#0]
;;;1010       tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
0006b0  20ca              MOVS     r0,#0xca
0006b2  f88d0001          STRB     r0,[sp,#1]
;;;1011       tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
0006b6  20e3              MOVS     r0,#0xe3
0006b8  f88d0002          STRB     r0,[sp,#2]
;;;1012       tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
0006bc  2009              MOVS     r0,#9
0006be  f88d0003          STRB     r0,[sp,#3]
;;;1013       mpu_write_mem(D_0_104, 4, tmp);
0006c2  466a              MOV      r2,sp
0006c4  2104              MOVS     r1,#4
0006c6  2068              MOVS     r0,#0x68
0006c8  f7fffffe          BL       mpu_write_mem
;;;1014   
;;;1015       /* Send sensor data to the FIFO. */
;;;1016       tmp[0] = 0xA3;
0006cc  20a3              MOVS     r0,#0xa3
0006ce  f88d0000          STRB     r0,[sp,#0]
;;;1017       if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
0006d2  0661              LSLS     r1,r4,#25
0006d4  d509              BPL      |L1.1770|
;;;1018           tmp[1] = 0xC0;
0006d6  21c0              MOVS     r1,#0xc0
0006d8  f88d1001          STRB     r1,[sp,#1]
;;;1019           tmp[2] = 0xC8;
0006dc  21c8              MOVS     r1,#0xc8
0006de  f88d1002          STRB     r1,[sp,#2]
;;;1020           tmp[3] = 0xC2;
0006e2  21c2              MOVS     r1,#0xc2
0006e4  f88d1003          STRB     r1,[sp,#3]
0006e8  e005              B        |L1.1782|
                  |L1.1770|
;;;1021       } else {
;;;1022           tmp[1] = 0xA3;
0006ea  f88d0001          STRB     r0,[sp,#1]
;;;1023           tmp[2] = 0xA3;
0006ee  f88d0002          STRB     r0,[sp,#2]
;;;1024           tmp[3] = 0xA3;
0006f2  f88d0003          STRB     r0,[sp,#3]
                  |L1.1782|
;;;1025       }
;;;1026       if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
0006f6  f4147fc0          TST      r4,#0x180
0006fa  d009              BEQ      |L1.1808|
;;;1027           tmp[4] = 0xC4;
0006fc  21c4              MOVS     r1,#0xc4
0006fe  f88d1004          STRB     r1,[sp,#4]
;;;1028           tmp[5] = 0xCC;
000702  21cc              MOVS     r1,#0xcc
000704  f88d1005          STRB     r1,[sp,#5]
;;;1029           tmp[6] = 0xC6;
000708  21c6              MOVS     r1,#0xc6
00070a  f88d1006          STRB     r1,[sp,#6]
00070e  e005              B        |L1.1820|
                  |L1.1808|
;;;1030       } else {
;;;1031           tmp[4] = 0xA3;
000710  f88d0004          STRB     r0,[sp,#4]
;;;1032           tmp[5] = 0xA3;
000714  f88d0005          STRB     r0,[sp,#5]
;;;1033           tmp[6] = 0xA3;
000718  f88d0006          STRB     r0,[sp,#6]
                  |L1.1820|
;;;1034       }
;;;1035       tmp[7] = 0xA3;
;;;1036       tmp[8] = 0xA3;
00071c  f88d0008          STRB     r0,[sp,#8]
000720  f88d0007          STRB     r0,[sp,#7]            ;1035
;;;1037       tmp[9] = 0xA3;
000724  f88d0009          STRB     r0,[sp,#9]
;;;1038       mpu_write_mem(CFG_15,10,tmp);
000728  466a              MOV      r2,sp
00072a  210a              MOVS     r1,#0xa
00072c  f64020a7          MOV      r0,#0xaa7
000730  f7fffffe          BL       mpu_write_mem
;;;1039   
;;;1040       /* Send gesture data to the FIFO. */
;;;1041       if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
000734  07a0              LSLS     r0,r4,#30
;;;1042           tmp[0] = DINA20;
;;;1043       else
;;;1044           tmp[0] = 0xD8;
000736  f04f05d8          MOV      r5,#0xd8
00073a  d003              BEQ      |L1.1860|
00073c  2020              MOVS     r0,#0x20              ;1042
00073e  f88d0000          STRB     r0,[sp,#0]            ;1042
000742  e001              B        |L1.1864|
                  |L1.1860|
000744  f88d5000          STRB     r5,[sp,#0]
                  |L1.1864|
;;;1045       mpu_write_mem(CFG_27,1,tmp);
000748  466a              MOV      r2,sp
00074a  2101              MOVS     r1,#1
00074c  f64020b6          MOV      r0,#0xab6
000750  f7fffffe          BL       mpu_write_mem
;;;1046   
;;;1047       if (mask & DMP_FEATURE_GYRO_CAL)
000754  06a0              LSLS     r0,r4,#26
000756  d501              BPL      |L1.1884|
;;;1048           dmp_enable_gyro_cal(1);
000758  2001              MOVS     r0,#1
00075a  e000              B        |L1.1886|
                  |L1.1884|
;;;1049       else
;;;1050           dmp_enable_gyro_cal(0);
00075c  2000              MOVS     r0,#0
                  |L1.1886|
00075e  f7fffffe          BL       dmp_enable_gyro_cal
;;;1051   
;;;1052       if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
000762  f4147fc0          TST      r4,#0x180
000766  d01e              BEQ      |L1.1958|
;;;1053           if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
000768  05e0              LSLS     r0,r4,#23
00076a  d50a              BPL      |L1.1922|
;;;1054               tmp[0] = 0xB2;
00076c  20b2              MOVS     r0,#0xb2
00076e  f88d0000          STRB     r0,[sp,#0]
;;;1055               tmp[1] = 0x8B;
000772  208b              MOVS     r0,#0x8b
000774  f88d0001          STRB     r0,[sp,#1]
;;;1056               tmp[2] = 0xB6;
000778  20b6              MOVS     r0,#0xb6
00077a  f88d0002          STRB     r0,[sp,#2]
;;;1057               tmp[3] = 0x9B;
00077e  209b              MOVS     r0,#0x9b
000780  e009              B        |L1.1942|
                  |L1.1922|
;;;1058           } else {
;;;1059               tmp[0] = DINAC0;
000782  20b0              MOVS     r0,#0xb0
000784  f88d0000          STRB     r0,[sp,#0]
;;;1060               tmp[1] = DINA80;
000788  2080              MOVS     r0,#0x80
00078a  f88d0001          STRB     r0,[sp,#1]
;;;1061               tmp[2] = DINAC2;
00078e  20b4              MOVS     r0,#0xb4
000790  f88d0002          STRB     r0,[sp,#2]
;;;1062               tmp[3] = DINA90;
000794  2090              MOVS     r0,#0x90
                  |L1.1942|
000796  f88d0003          STRB     r0,[sp,#3]
;;;1063           }
;;;1064           mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
00079a  466a              MOV      r2,sp
00079c  2104              MOVS     r1,#4
00079e  f64020a2          MOV      r0,#0xaa2
0007a2  f7fffffe          BL       mpu_write_mem
                  |L1.1958|
;;;1065       }
;;;1066   
;;;1067       if (mask & DMP_FEATURE_TAP) {
0007a6  07e0              LSLS     r0,r4,#31
;;;1068           /* Enable tap. */
;;;1069           tmp[0] = 0xF8;
;;;1070           mpu_write_mem(CFG_20, 1, tmp);
0007a8  f44f630b          MOV      r3,#0x8b0
0007ac  d023              BEQ      |L1.2038|
0007ae  20f8              MOVS     r0,#0xf8              ;1069
0007b0  f88d0000          STRB     r0,[sp,#0]            ;1069
0007b4  466a              MOV      r2,sp
0007b6  2101              MOVS     r1,#1
0007b8  4618              MOV      r0,r3
0007ba  f7fffffe          BL       mpu_write_mem
;;;1071           dmp_set_tap_thresh(TAP_XYZ, 250);
0007be  21fa              MOVS     r1,#0xfa
0007c0  2007              MOVS     r0,#7
0007c2  f7fffffe          BL       dmp_set_tap_thresh
;;;1072           dmp_set_tap_axes(TAP_XYZ);
0007c6  2007              MOVS     r0,#7
0007c8  f7fffffe          BL       dmp_set_tap_axes
;;;1073           dmp_set_tap_count(1);
0007cc  2001              MOVS     r0,#1
0007ce  f7fffffe          BL       dmp_set_tap_count
;;;1074           dmp_set_tap_time(100);
0007d2  2064              MOVS     r0,#0x64
0007d4  f7fffffe          BL       dmp_set_tap_time
;;;1075           dmp_set_tap_time_multi(500);
0007d8  f44f70fa          MOV      r0,#0x1f4
0007dc  f7fffffe          BL       dmp_set_tap_time_multi
;;;1076   
;;;1077           dmp_set_shake_reject_thresh(GYRO_SF, 200);
0007e0  21c8              MOVS     r1,#0xc8
0007e2  4892              LDR      r0,|L1.2604|
0007e4  f7fffffe          BL       dmp_set_shake_reject_thresh
;;;1078           dmp_set_shake_reject_time(40);
0007e8  2028              MOVS     r0,#0x28
0007ea  f7fffffe          BL       dmp_set_shake_reject_time
;;;1079           dmp_set_shake_reject_timeout(10);
0007ee  200a              MOVS     r0,#0xa
0007f0  f7fffffe          BL       dmp_set_shake_reject_timeout
0007f4  e006              B        |L1.2052|
                  |L1.2038|
;;;1080       } else {
;;;1081           tmp[0] = 0xD8;
0007f6  f88d5000          STRB     r5,[sp,#0]
;;;1082           mpu_write_mem(CFG_20, 1, tmp);
0007fa  466a              MOV      r2,sp
0007fc  2101              MOVS     r1,#1
0007fe  4618              MOV      r0,r3
000800  f7fffffe          BL       mpu_write_mem
                  |L1.2052|
;;;1083       }
;;;1084   
;;;1085       if (mask & DMP_FEATURE_ANDROID_ORIENT) {
000804  07a0              LSLS     r0,r4,#30
000806  d503              BPL      |L1.2064|
;;;1086           tmp[0] = 0xD9;
000808  20d9              MOVS     r0,#0xd9
00080a  f88d0000          STRB     r0,[sp,#0]
00080e  e001              B        |L1.2068|
                  |L1.2064|
;;;1087       } else
;;;1088           tmp[0] = 0xD8;
000810  f88d5000          STRB     r5,[sp,#0]
                  |L1.2068|
;;;1089       mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
000814  466a              MOV      r2,sp
000816  2101              MOVS     r1,#1
000818  f240703d          MOV      r0,#0x73d
00081c  f7fffffe          BL       mpu_write_mem
;;;1090   
;;;1091       if (mask & DMP_FEATURE_LP_QUAT)
000820  0760              LSLS     r0,r4,#29
000822  d501              BPL      |L1.2088|
;;;1092           dmp_enable_lp_quat(1);
000824  2001              MOVS     r0,#1
000826  e000              B        |L1.2090|
                  |L1.2088|
;;;1093       else
;;;1094           dmp_enable_lp_quat(0);
000828  2000              MOVS     r0,#0
                  |L1.2090|
00082a  f7fffffe          BL       dmp_enable_lp_quat
;;;1095   
;;;1096       if (mask & DMP_FEATURE_6X_LP_QUAT)
00082e  06e0              LSLS     r0,r4,#27
000830  d501              BPL      |L1.2102|
;;;1097           dmp_enable_6x_lp_quat(1);
000832  2001              MOVS     r0,#1
000834  e000              B        |L1.2104|
                  |L1.2102|
;;;1098       else
;;;1099           dmp_enable_6x_lp_quat(0);
000836  2000              MOVS     r0,#0
                  |L1.2104|
000838  f7fffffe          BL       dmp_enable_6x_lp_quat
;;;1100   
;;;1101       /* Pedometer is always enabled. */
;;;1102       dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
00083c  4d7c              LDR      r5,|L1.2608|
00083e  f0440008          ORR      r0,r4,#8
000842  8168              STRH     r0,[r5,#0xa]
;;;1103       mpu_reset_fifo();
000844  f7fffffe          BL       mpu_reset_fifo
;;;1104   
;;;1105       dmp.packet_length = 0;
000848  2000              MOVS     r0,#0
00084a  73a8              STRB     r0,[r5,#0xe]
;;;1106       if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
00084c  0660              LSLS     r0,r4,#25
00084e  d501              BPL      |L1.2132|
;;;1107           dmp.packet_length += 6;
000850  2006              MOVS     r0,#6
000852  73a8              STRB     r0,[r5,#0xe]
                  |L1.2132|
;;;1108       if (mask & DMP_FEATURE_SEND_ANY_GYRO)
000854  f4147fc0          TST      r4,#0x180
000858  d002              BEQ      |L1.2144|
;;;1109           dmp.packet_length += 6;
00085a  7ba8              LDRB     r0,[r5,#0xe]  ; dmp
00085c  1d80              ADDS     r0,r0,#6
00085e  73a8              STRB     r0,[r5,#0xe]
                  |L1.2144|
;;;1110       if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
000860  f0140f14          TST      r4,#0x14
000864  d002              BEQ      |L1.2156|
;;;1111           dmp.packet_length += 16;
000866  7ba8              LDRB     r0,[r5,#0xe]  ; dmp
000868  3010              ADDS     r0,r0,#0x10
00086a  73a8              STRB     r0,[r5,#0xe]
                  |L1.2156|
;;;1112       if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
00086c  07a0              LSLS     r0,r4,#30
00086e  d002              BEQ      |L1.2166|
;;;1113           dmp.packet_length += 4;
000870  7ba8              LDRB     r0,[r5,#0xe]  ; dmp
000872  1d00              ADDS     r0,r0,#4
000874  73a8              STRB     r0,[r5,#0xe]
                  |L1.2166|
;;;1114   
;;;1115       return 0;
000876  2000              MOVS     r0,#0
;;;1116   }
000878  bd3e              POP      {r1-r5,pc}
;;;1117   
                          ENDP

                  dmp_get_enabled_features PROC
;;;1122    */
;;;1123   int dmp_get_enabled_features(unsigned short *mask)
00087a  496d              LDR      r1,|L1.2608|
;;;1124   {
;;;1125       mask[0] = dmp.feature_mask;
00087c  8949              LDRH     r1,[r1,#0xa]  ; dmp
00087e  8001              STRH     r1,[r0,#0]
;;;1126       return 0;
000880  2000              MOVS     r0,#0
;;;1127   }
000882  4770              BX       lr
;;;1128   
                          ENDP

                  dmp_set_interrupt_mode PROC
;;;1232    */
;;;1233   int dmp_set_interrupt_mode(unsigned char mode)
000884  b500              PUSH     {lr}
;;;1234   {
;;;1235       const unsigned char regs_continuous[11] =
000886  a16b              ADR      r1,|L1.2612|
000888  b087              SUB      sp,sp,#0x1c           ;1234
00088a  c90e              LDM      r1,{r1-r3}
00088c  e88d000e          STM      sp,{r1-r3}
;;;1236           {0xd8, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0x09, 0xb4, 0xd9};
;;;1237       const unsigned char regs_gesture[11] =
000890  a16b              ADR      r1,|L1.2624|
000892  f10d0c0c          ADD      r12,sp,#0xc
000896  c90e              LDM      r1,{r1-r3}
000898  e88c000e          STM      r12,{r1-r3}
;;;1238           {0xda, 0xb1, 0xb9, 0xf3, 0x8b, 0xa3, 0x91, 0xb6, 0xda, 0xb4, 0xda};
;;;1239   
;;;1240       switch (mode) {
;;;1241       case DMP_INT_CONTINUOUS:
;;;1242           return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
00089c  f6402382          MOV      r3,#0xa82
0008a0  2801              CMP      r0,#1                 ;1240
0008a2  d007              BEQ      |L1.2228|
0008a4  2802              CMP      r0,#2                 ;1240
0008a6  d003              BEQ      |L1.2224|
;;;1243               (unsigned char*)regs_continuous);
;;;1244       case DMP_INT_GESTURE:
;;;1245           return mpu_write_mem(CFG_FIFO_ON_EVENT, 11,
;;;1246               (unsigned char*)regs_gesture);
;;;1247       default:
;;;1248           return -1;
0008a8  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2220|
;;;1249       }
;;;1250   }
0008ac  b007              ADD      sp,sp,#0x1c
0008ae  bd00              POP      {pc}
                  |L1.2224|
0008b0  466a              MOV      r2,sp                 ;1242
0008b2  e000              B        |L1.2230|
                  |L1.2228|
0008b4  aa03              ADD      r2,sp,#0xc            ;1245
                  |L1.2230|
0008b6  210b              MOVS     r1,#0xb               ;1245
0008b8  4618              MOV      r0,r3                 ;1245
0008ba  f7fffffe          BL       mpu_write_mem
0008be  e7f5              B        |L1.2220|
;;;1251   
                          ENDP

                  dmp_read_fifo PROC
;;;1271    */
;;;1272   int dmp_read_fifo(short *gyro, short *accel, long *quat,
0008c0  e92d4fff          PUSH     {r0-r11,lr}
;;;1273       unsigned long *timestamp, short *sensors, unsigned char *more)
;;;1274   {
0008c4  b089              SUB      sp,sp,#0x24
0008c6  4616              MOV      r6,r2
0008c8  e9dd5216          LDRD     r5,r2,[sp,#0x58]
;;;1275       unsigned char fifo_data[MAX_PACKET_LENGTH];
;;;1276       unsigned char ii = 0;
0008cc  2400              MOVS     r4,#0
;;;1277   
;;;1278       /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
;;;1279        * cache this value and save some cycles.
;;;1280        */
;;;1281       sensors[0] = 0;
;;;1282   
;;;1283       /* Get a packet. */
;;;1284       if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
0008ce  f8df8160          LDR      r8,|L1.2608|
0008d2  460f              MOV      r7,r1                 ;1274
0008d4  4681              MOV      r9,r0                 ;1274
0008d6  802c              STRH     r4,[r5,#0]            ;1281
0008d8  46a2              MOV      r10,r4                ;1281
0008da  f898000e          LDRB     r0,[r8,#0xe]  ; dmp
0008de  4669              MOV      r1,sp
0008e0  f7fffffe          BL       mpu_read_fifo_stream
;;;1285           return -1;
0008e4  f04f3bff          MOV      r11,#0xffffffff
0008e8  b118              CBZ      r0,|L1.2290|
                  |L1.2282|
0008ea  4658              MOV      r0,r11
                  |L1.2284|
;;;1286   
;;;1287       /* Parse DMP packet. */
;;;1288       if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
;;;1289   #ifdef FIFO_CORRUPTION_CHECK
;;;1290           long quat_q14[4], quat_mag_sq;
;;;1291   #endif
;;;1292           quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
;;;1293               ((long)fifo_data[2] << 8) | fifo_data[3];
;;;1294           quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
;;;1295               ((long)fifo_data[6] << 8) | fifo_data[7];
;;;1296           quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
;;;1297               ((long)fifo_data[10] << 8) | fifo_data[11];
;;;1298           quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
;;;1299               ((long)fifo_data[14] << 8) | fifo_data[15];
;;;1300           ii += 16;
;;;1301   #ifdef FIFO_CORRUPTION_CHECK
;;;1302           /* We can detect a corrupted FIFO by monitoring the quaternion data and
;;;1303            * ensuring that the magnitude is always normalized to one. This
;;;1304            * shouldn't happen in normal operation, but if an I2C error occurs,
;;;1305            * the FIFO reads might become misaligned.
;;;1306            *
;;;1307            * Let's start by scaling down the quaternion data to avoid long long
;;;1308            * math.
;;;1309            */
;;;1310           quat_q14[0] = quat[0] >> 16;
;;;1311           quat_q14[1] = quat[1] >> 16;
;;;1312           quat_q14[2] = quat[2] >> 16;
;;;1313           quat_q14[3] = quat[3] >> 16;
;;;1314           quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
;;;1315               quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
;;;1316           if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
;;;1317               (quat_mag_sq > QUAT_MAG_SQ_MAX)) {
;;;1318               /* Quaternion is outside of the acceptable threshold. */
;;;1319               mpu_reset_fifo();
;;;1320               sensors[0] = 0;
;;;1321               return -1;
;;;1322           }
;;;1323           sensors[0] |= INV_WXYZ_QUAT;
;;;1324   #endif
;;;1325       }
;;;1326   
;;;1327       if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
;;;1328           accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
;;;1329           accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
;;;1330           accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
;;;1331           ii += 6;
;;;1332           sensors[0] |= INV_XYZ_ACCEL;
;;;1333       }
;;;1334   
;;;1335       if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
;;;1336           gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
;;;1337           gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
;;;1338           gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
;;;1339           ii += 6;
;;;1340           sensors[0] |= INV_XYZ_GYRO;
;;;1341       }
;;;1342   
;;;1343       /* Gesture data is at the end of the DMP packet. Parse it and call
;;;1344        * the gesture callbacks (if registered).
;;;1345        */
;;;1346       if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
;;;1347           decode_gesture(fifo_data + ii);
;;;1348   
;;;1349       get_ms(timestamp);
;;;1350       return 0;
;;;1351   }
0008ec  b00d              ADD      sp,sp,#0x34
0008ee  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2290|
0008f2  f8b8000a          LDRH     r0,[r8,#0xa]          ;1288  ; dmp
0008f6  f0100f14          TST      r0,#0x14              ;1288
0008fa  d03c              BEQ      |L1.2422|
0008fc  9900              LDR      r1,[sp,#0]            ;1292
0008fe  ba09              REV      r1,r1                 ;1292
000900  f0210cff          BIC      r12,r1,#0xff          ;1292
000904  f89d1003          LDRB     r1,[sp,#3]            ;1292
000908  ea4c0c01          ORR      r12,r12,r1            ;1292
00090c  f8c6c000          STR      r12,[r6,#0]           ;1294
000910  9901              LDR      r1,[sp,#4]            ;1294
000912  ba09              REV      r1,r1                 ;1294
000914  f02103ff          BIC      r3,r1,#0xff           ;1294
000918  f89d1007          LDRB     r1,[sp,#7]            ;1294
00091c  430b              ORRS     r3,r3,r1              ;1294
00091e  6073              STR      r3,[r6,#4]            ;1296
000920  9902              LDR      r1,[sp,#8]            ;1296
000922  f89d200b          LDRB     r2,[sp,#0xb]          ;1296
000926  ba09              REV      r1,r1                 ;1296
000928  f02101ff          BIC      r1,r1,#0xff           ;1296
00092c  4311              ORRS     r1,r1,r2              ;1296
00092e  60b1              STR      r1,[r6,#8]            ;1298
000930  9a03              LDR      r2,[sp,#0xc]          ;1298
000932  f89d400f          LDRB     r4,[sp,#0xf]          ;1298
000936  ba12              REV      r2,r2                 ;1298
000938  f02202ff          BIC      r2,r2,#0xff           ;1298
00093c  4322              ORRS     r2,r2,r4              ;1298
00093e  60f2              STR      r2,[r6,#0xc]          ;1310
000940  ea4f462c          ASR      r6,r12,#16            ;1310
000944  1409              ASRS     r1,r1,#16             ;1312
000946  141b              ASRS     r3,r3,#16             ;1311
000948  1412              ASRS     r2,r2,#16             ;1313
00094a  4376              MULS     r6,r6,r6              ;1314
00094c  4349              MULS     r1,r1,r1              ;1314
00094e  fb036303          MLA      r3,r3,r3,r6           ;1314
000952  fb021102          MLA      r1,r2,r2,r1           ;1314
000956  4419              ADD      r1,r1,r3              ;1314
000958  2410              MOVS     r4,#0x10              ;1300
00095a  f1a16170          SUB      r1,r1,#0xf000000      ;1314
00095e  f1b17f00          CMP      r1,#0x2000000         ;1316
000962  d904              BLS      |L1.2414|
000964  f7fffffe          BL       mpu_reset_fifo
000968  f8a5a000          STRH     r10,[r5,#0]           ;1320
00096c  e7bd              B        |L1.2282|
                  |L1.2414|
00096e  8829              LDRH     r1,[r5,#0]            ;1323
000970  f4417180          ORR      r1,r1,#0x100          ;1323
000974  8029              STRH     r1,[r5,#0]            ;1323
                  |L1.2422|
000976  0641              LSLS     r1,r0,#25             ;1327
000978  466a              MOV      r2,sp                 ;1275
00097a  d50e              BPL      |L1.2458|
00097c  1911              ADDS     r1,r2,r4              ;1328
00097e  1da4              ADDS     r4,r4,#6              ;1332
000980  880b              LDRH     r3,[r1,#0]            ;1328
000982  ba5b              REV16    r3,r3                 ;1328
000984  803b              STRH     r3,[r7,#0]            ;1328
000986  884b              LDRH     r3,[r1,#2]            ;1329
000988  ba5b              REV16    r3,r3                 ;1329
00098a  807b              STRH     r3,[r7,#2]            ;1329
00098c  8889              LDRH     r1,[r1,#4]            ;1330
00098e  ba49              REV16    r1,r1                 ;1330
000990  80b9              STRH     r1,[r7,#4]            ;1330
000992  8829              LDRH     r1,[r5,#0]            ;1332
000994  f0410108          ORR      r1,r1,#8              ;1332
000998  8029              STRH     r1,[r5,#0]            ;1332
                  |L1.2458|
00099a  f4107fc0          TST      r0,#0x180             ;1335
00099e  d011              BEQ      |L1.2500|
0009a0  1911              ADDS     r1,r2,r4              ;1336
0009a2  1da4              ADDS     r4,r4,#6              ;1340
0009a4  880b              LDRH     r3,[r1,#0]            ;1336
0009a6  ba5b              REV16    r3,r3                 ;1336
0009a8  f8a93000          STRH     r3,[r9,#0]            ;1336
0009ac  884b              LDRH     r3,[r1,#2]            ;1337
0009ae  ba5b              REV16    r3,r3                 ;1337
0009b0  f8a93002          STRH     r3,[r9,#2]            ;1337
0009b4  8889              LDRH     r1,[r1,#4]            ;1338
0009b6  ba49              REV16    r1,r1                 ;1338
0009b8  f8a91004          STRH     r1,[r9,#4]            ;1338
0009bc  8829              LDRH     r1,[r5,#0]            ;1340
0009be  f0410170          ORR      r1,r1,#0x70           ;1340
0009c2  8029              STRH     r1,[r5,#0]            ;1340
                  |L1.2500|
0009c4  0780              LSLS     r0,r0,#30             ;1346
0009c6  d018              BEQ      |L1.2554|
0009c8  4414              ADD      r4,r4,r2              ;1347
0009ca  78e0              LDRB     r0,[r4,#3]            ;1347
0009cc  f00005c0          AND      r5,r0,#0xc0           ;1347
0009d0  f000013f          AND      r1,r0,#0x3f           ;1347
0009d4  7860              LDRB     r0,[r4,#1]            ;1347
0009d6  07c0              LSLS     r0,r0,#31             ;1347
0009d8  d007              BEQ      |L1.2538|
0009da  08c8              LSRS     r0,r1,#3              ;1347
0009dc  f0010107          AND      r1,r1,#7              ;1347
0009e0  f8d82000          LDR      r2,[r8,#0]            ;1347  ; dmp
0009e4  1c49              ADDS     r1,r1,#1              ;1347
0009e6  b102              CBZ      r2,|L1.2538|
0009e8  4790              BLX      r2                    ;1347
                  |L1.2538|
0009ea  7860              LDRB     r0,[r4,#1]            ;1347
0009ec  0700              LSLS     r0,r0,#28             ;1347
0009ee  d504              BPL      |L1.2554|
0009f0  f8d81004          LDR      r1,[r8,#4]            ;1347  ; dmp
0009f4  b109              CBZ      r1,|L1.2554|
0009f6  09a8              LSRS     r0,r5,#6              ;1347
0009f8  4788              BLX      r1                    ;1347
                  |L1.2554|
0009fa  980c              LDR      r0,[sp,#0x30]         ;1349
0009fc  f7fffffe          BL       mget_ms
000a00  2000              MOVS     r0,#0                 ;1350
000a02  e773              B        |L1.2284|
;;;1352   
                          ENDP

                  dmp_register_tap_cb PROC
;;;1364    */
;;;1365   int dmp_register_tap_cb(void (*func)(unsigned char, unsigned char))
000a04  490a              LDR      r1,|L1.2608|
;;;1366   {
;;;1367       dmp.tap_cb = func;
;;;1368       return 0;
000a06  6008              STR      r0,[r1,#0]  ; dmp
000a08  2000              MOVS     r0,#0
;;;1369   }
000a0a  4770              BX       lr
;;;1370   
                          ENDP

                  dmp_register_android_orient_cb PROC
;;;1375    */
;;;1376   int dmp_register_android_orient_cb(void (*func)(unsigned char))
000a0c  4908              LDR      r1,|L1.2608|
;;;1377   {
;;;1378       dmp.android_orient_cb = func;
;;;1379       return 0;
000a0e  6048              STR      r0,[r1,#4]  ; dmp
000a10  2000              MOVS     r0,#0
;;;1380   }
000a12  4770              BX       lr
;;;1381   
                          ENDP

                  |L1.2580|
000a14  b8aab38d          DCB      184,170,179,141,180,152,"\r5]",0
000a18  b4980d35
000a1c  5d00    
000a1e  00                DCB      0
000a1f  00                DCB      0
                  |L1.2592|
000a20  b8aaaaaa          DCB      184,170,170,170,176,136,195,197,199,0
000a24  b088c3c5
000a28  c700    
000a2a  00                DCB      0
000a2b  00                DCB      0
                  |L1.2604|
                          DCD      0x02cae309
                  |L1.2608|
                          DCD      ||.bss||
                  |L1.2612|
000a34  d8b1b9f3          DCB      216,177,185,243,139,163,145,182,"\t",180,217,0
000a38  8ba391b6
000a3c  09b4d900
                  |L1.2624|
000a40  dab1b9f3          DCB      218,177,185,243,139,163,145,182,218,180,218,0
000a44  8ba391b6
000a48  dab4da00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||dmp||
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  dmp_memory
000000  00007000          DCB      0x00,0x00,0x70,0x00
000004  00000024          DCB      0x00,0x00,0x00,0x24
000008  00000002          DCB      0x00,0x00,0x00,0x02
00000c  00030000          DCB      0x00,0x03,0x00,0x00
000010  00650054          DCB      0x00,0x65,0x00,0x54
000014  ffef0000          DCB      0xff,0xef,0x00,0x00
000018  fa80000b          DCB      0xfa,0x80,0x00,0x0b
00001c  12820001          DCB      0x12,0x82,0x00,0x01
000020  030c30c3          DCB      0x03,0x0c,0x30,0xc3
000024  0e8c8ce9          DCB      0x0e,0x8c,0x8c,0xe9
000028  14d54002          DCB      0x14,0xd5,0x40,0x02
00002c  13710f8e          DCB      0x13,0x71,0x0f,0x8e
000030  3883f883          DCB      0x38,0x83,0xf8,0x83
000034  3000f883          DCB      0x30,0x00,0xf8,0x83
000038  258ef883          DCB      0x25,0x8e,0xf8,0x83
00003c  3000f883          DCB      0x30,0x00,0xf8,0x83
000040  ffffffff          DCB      0xff,0xff,0xff,0xff
000044  0ffea9d6          DCB      0x0f,0xfe,0xa9,0xd6
000048  24000400          DCB      0x24,0x00,0x04,0x00
00004c  1a8279a1          DCB      0x1a,0x82,0x79,0xa1
000050  0000003c          DCB      0x00,0x00,0x00,0x3c
000054  ffff0000          DCB      0xff,0xff,0x00,0x00
000058  00100000          DCB      0x00,0x10,0x00,0x00
00005c  38836fa2          DCB      0x38,0x83,0x6f,0xa2
000060  003e0330          DCB      0x00,0x3e,0x03,0x30
000064  40000000          DCB      0x40,0x00,0x00,0x00
000068  02cae309          DCB      0x02,0xca,0xe3,0x09
00006c  3e800000          DCB      0x3e,0x80,0x00,0x00
000070  20000000          DCB      0x20,0x00,0x00,0x00
000074  00000000          DCB      0x00,0x00,0x00,0x00
000078  40000000          DCB      0x40,0x00,0x00,0x00
00007c  60000000          DCB      0x60,0x00,0x00,0x00
000080  000c0000          DCB      0x00,0x0c,0x00,0x00
000084  000c186e          DCB      0x00,0x0c,0x18,0x6e
000088  00000692          DCB      0x00,0x00,0x06,0x92
00008c  0a16c0df          DCB      0x0a,0x16,0xc0,0xdf
000090  ffff0256          DCB      0xff,0xff,0x02,0x56
000094  fd8cd377          DCB      0xfd,0x8c,0xd3,0x77
000098  ffe1c496          DCB      0xff,0xe1,0xc4,0x96
00009c  e0c5beaa          DCB      0xe0,0xc5,0xbe,0xaa
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  ffff0b2b          DCB      0xff,0xff,0x0b,0x2b
0000a8  00001657          DCB      0x00,0x00,0x16,0x57
0000ac  00000359          DCB      0x00,0x00,0x03,0x59
0000b0  40000000          DCB      0x40,0x00,0x00,0x00
0000b4  00001dfa          DCB      0x00,0x00,0x1d,0xfa
0000b8  00026c1d          DCB      0x00,0x02,0x6c,0x1d
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  3fffdfeb          DCB      0x3f,0xff,0xdf,0xeb
0000c4  003eb3b6          DCB      0x00,0x3e,0xb3,0xb6
0000c8  000d2278          DCB      0x00,0x0d,0x22,0x78
0000cc  00002f3c          DCB      0x00,0x00,0x2f,0x3c
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  001942b5          DCB      0x00,0x19,0x42,0xb5
0000d8  000039a2          DCB      0x00,0x00,0x39,0xa2
0000dc  0000b365          DCB      0x00,0x00,0xb3,0x65
0000e0  d90e9fc9          DCB      0xd9,0x0e,0x9f,0xc9
0000e4  1dcf4c34          DCB      0x1d,0xcf,0x4c,0x34
0000e8  30000000          DCB      0x30,0x00,0x00,0x00
0000ec  50000000          DCB      0x50,0x00,0x00,0x00
0000f0  3bb67ae8          DCB      0x3b,0xb6,0x7a,0xe8
0000f4  00640000          DCB      0x00,0x64,0x00,0x00
0000f8  00c80000          DCB      0x00,0xc8,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
000100  10000000          DCB      0x10,0x00,0x00,0x00
000104  1000fa92          DCB      0x10,0x00,0xfa,0x92
000108  1000225e          DCB      0x10,0x00,0x22,0x5e
00010c  000d229f          DCB      0x00,0x0d,0x22,0x9f
000110  00010000          DCB      0x00,0x01,0x00,0x00
000114  00320000          DCB      0x00,0x32,0x00,0x00
000118  ff460000          DCB      0xff,0x46,0x00,0x00
00011c  63d40000          DCB      0x63,0xd4,0x00,0x00
000120  10000000          DCB      0x10,0x00,0x00,0x00
000124  04d60000          DCB      0x04,0xd6,0x00,0x00
000128  04cc0000          DCB      0x04,0xcc,0x00,0x00
00012c  04cc0000          DCB      0x04,0xcc,0x00,0x00
000130  00001072          DCB      0x00,0x00,0x10,0x72
000134  00000040          DCB      0x00,0x00,0x00,0x40
000138  00000000          DCB      0x00,0x00,0x00,0x00
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  00060002          DCB      0x00,0x06,0x00,0x02
000144  00050007          DCB      0x00,0x05,0x00,0x07
000148  00000000          DCB      0x00,0x00,0x00,0x00
00014c  00640000          DCB      0x00,0x64,0x00,0x00
000150  00000000          DCB      0x00,0x00,0x00,0x00
000154  00000005          DCB      0x00,0x00,0x00,0x05
000158  00050064          DCB      0x00,0x05,0x00,0x64
00015c  00200000          DCB      0x00,0x20,0x00,0x00
000160  00000000          DCB      0x00,0x00,0x00,0x00
000164  00000000          DCB      0x00,0x00,0x00,0x00
000168  00004000          DCB      0x00,0x00,0x40,0x00
00016c  00000300          DCB      0x00,0x00,0x03,0x00
000170  00000032          DCB      0x00,0x00,0x00,0x32
000174  f8980000          DCB      0xf8,0x98,0x00,0x00
000178  ff650000          DCB      0xff,0x65,0x00,0x00
00017c  830f0000          DCB      0x83,0x0f,0x00,0x00
000180  ff9bfc00          DCB      0xff,0x9b,0xfc,0x00
000184  00000000          DCB      0x00,0x00,0x00,0x00
000188  00000000          DCB      0x00,0x00,0x00,0x00
00018c  00000000          DCB      0x00,0x00,0x00,0x00
000190  00000000          DCB      0x00,0x00,0x00,0x00
000194  00000000          DCB      0x00,0x00,0x00,0x00
000198  00000000          DCB      0x00,0x00,0x00,0x00
00019c  00000000          DCB      0x00,0x00,0x00,0x00
0001a0  00000000          DCB      0x00,0x00,0x00,0x00
0001a4  00000000          DCB      0x00,0x00,0x00,0x00
0001a8  00000000          DCB      0x00,0x00,0x00,0x00
0001ac  00001000          DCB      0x00,0x00,0x10,0x00
0001b0  40000000          DCB      0x40,0x00,0x00,0x00
0001b4  00000006          DCB      0x00,0x00,0x00,0x06
0001b8  0000b26a          DCB      0x00,0x00,0xb2,0x6a
0001bc  00020000          DCB      0x00,0x02,0x00,0x00
0001c0  0001fb83          DCB      0x00,0x01,0xfb,0x83
0001c4  00680000          DCB      0x00,0x68,0x00,0x00
0001c8  00d9fc00          DCB      0x00,0xd9,0xfc,0x00
0001cc  7cf1ff83          DCB      0x7c,0xf1,0xff,0x83
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  00650000          DCB      0x00,0x65,0x00,0x00
0001d8  006403e8          DCB      0x00,0x64,0x03,0xe8
0001dc  00640028          DCB      0x00,0x64,0x00,0x28
0001e0  00000025          DCB      0x00,0x00,0x00,0x25
0001e4  00000000          DCB      0x00,0x00,0x00,0x00
0001e8  16a00000          DCB      0x16,0xa0,0x00,0x00
0001ec  00001000          DCB      0x00,0x00,0x10,0x00
0001f0  00001000          DCB      0x00,0x00,0x10,0x00
0001f4  002f0000          DCB      0x00,0x2f,0x00,0x00
0001f8  000001f4          DCB      0x00,0x00,0x01,0xf4
0001fc  00001000          DCB      0x00,0x00,0x10,0x00
000200  00280000          DCB      0x00,0x28,0x00,0x00
000204  ffff4581          DCB      0xff,0xff,0x45,0x81
000208  fffffa72          DCB      0xff,0xff,0xfa,0x72
00020c  00000000          DCB      0x00,0x00,0x00,0x00
000210  00000000          DCB      0x00,0x00,0x00,0x00
000214  00440005          DCB      0x00,0x44,0x00,0x05
000218  0005bac6          DCB      0x00,0x05,0xba,0xc6
00021c  004778a2          DCB      0x00,0x47,0x78,0xa2
000220  00000001          DCB      0x00,0x00,0x00,0x01
000224  00000000          DCB      0x00,0x00,0x00,0x00
000228  00000600          DCB      0x00,0x00,0x06,0x00
00022c  00000014          DCB      0x00,0x00,0x00,0x14
000230  0000254d          DCB      0x00,0x00,0x25,0x4d
000234  002f706d          DCB      0x00,0x2f,0x70,0x6d
000238  000005ae          DCB      0x00,0x00,0x05,0xae
00023c  000c02d0          DCB      0x00,0x0c,0x02,0xd0
000240  00000000          DCB      0x00,0x00,0x00,0x00
000244  00000000          DCB      0x00,0x00,0x00,0x00
000248  00000000          DCB      0x00,0x00,0x00,0x00
00024c  00000000          DCB      0x00,0x00,0x00,0x00
000250  001b0000          DCB      0x00,0x1b,0x00,0x00
000254  00000000          DCB      0x00,0x00,0x00,0x00
000258  00000000          DCB      0x00,0x00,0x00,0x00
00025c  00000000          DCB      0x00,0x00,0x00,0x00
000260  00640000          DCB      0x00,0x64,0x00,0x00
000264  00080000          DCB      0x00,0x08,0x00,0x00
000268  00000000          DCB      0x00,0x00,0x00,0x00
00026c  00000000          DCB      0x00,0x00,0x00,0x00
000270  00000000          DCB      0x00,0x00,0x00,0x00
000274  00000000          DCB      0x00,0x00,0x00,0x00
000278  00000000          DCB      0x00,0x00,0x00,0x00
00027c  00000000          DCB      0x00,0x00,0x00,0x00
000280  00000000          DCB      0x00,0x00,0x00,0x00
000284  00000000          DCB      0x00,0x00,0x00,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  00000000          DCB      0x00,0x00,0x00,0x00
000290  00000000          DCB      0x00,0x00,0x00,0x00
000294  00000000          DCB      0x00,0x00,0x00,0x00
000298  00000000          DCB      0x00,0x00,0x00,0x00
00029c  00000000          DCB      0x00,0x00,0x00,0x00
0002a0  00000000          DCB      0x00,0x00,0x00,0x00
0002a4  00000000          DCB      0x00,0x00,0x00,0x00
0002a8  00000000          DCB      0x00,0x00,0x00,0x00
0002ac  00000000          DCB      0x00,0x00,0x00,0x00
0002b0  00000000          DCB      0x00,0x00,0x00,0x00
0002b4  00000000          DCB      0x00,0x00,0x00,0x00
0002b8  00000000          DCB      0x00,0x00,0x00,0x00
0002bc  00000000          DCB      0x00,0x00,0x00,0x00
0002c0  001b0000          DCB      0x00,0x1b,0x00,0x00
0002c4  00000000          DCB      0x00,0x00,0x00,0x00
0002c8  00000000          DCB      0x00,0x00,0x00,0x00
0002cc  000e000e          DCB      0x00,0x0e,0x00,0x0e
0002d0  00000ac7          DCB      0x00,0x00,0x0a,0xc7
0002d4  00040000          DCB      0x00,0x04,0x00,0x00
0002d8  00000032          DCB      0x00,0x00,0x00,0x32
0002dc  ffffff9c          DCB      0xff,0xff,0xff,0x9c
0002e0  00000b2b          DCB      0x00,0x00,0x0b,0x2b
0002e4  00000002          DCB      0x00,0x00,0x00,0x02
0002e8  00000001          DCB      0x00,0x00,0x00,0x01
0002ec  00000064          DCB      0x00,0x00,0x00,0x64
0002f0  ffe50000          DCB      0xff,0xe5,0x00,0x00
0002f4  00000000          DCB      0x00,0x00,0x00,0x00
0002f8  00000000          DCB      0x00,0x00,0x00,0x00
0002fc  00000000          DCB      0x00,0x00,0x00,0x00
000300  00000001          DCB      0x00,0x00,0x00,0x01
000304  00000000          DCB      0x00,0x00,0x00,0x00
000308  00010000          DCB      0x00,0x01,0x00,0x00
00030c  00000000          DCB      0x00,0x00,0x00,0x00
000310  00018000          DCB      0x00,0x01,0x80,0x00
000314  00018000          DCB      0x00,0x01,0x80,0x00
000318  00018000          DCB      0x00,0x01,0x80,0x00
00031c  002426d3          DCB      0x00,0x24,0x26,0xd3
000320  00000000          DCB      0x00,0x00,0x00,0x00
000324  00000000          DCB      0x00,0x00,0x00,0x00
000328  00060010          DCB      0x00,0x06,0x00,0x10
00032c  0096003c          DCB      0x00,0x96,0x00,0x3c
000330  00000000          DCB      0x00,0x00,0x00,0x00
000334  00000000          DCB      0x00,0x00,0x00,0x00
000338  00000000          DCB      0x00,0x00,0x00,0x00
00033c  00000000          DCB      0x00,0x00,0x00,0x00
000340  0c0a4e68          DCB      0x0c,0x0a,0x4e,0x68
000344  cdcf7709          DCB      0xcd,0xcf,0x77,0x09
000348  50166759          DCB      0x50,0x16,0x67,0x59
00034c  c619ce82          DCB      0xc6,0x19,0xce,0x82
000350  00000000          DCB      0x00,0x00,0x00,0x00
000354  00000000          DCB      0x00,0x00,0x00,0x00
000358  00000000          DCB      0x00,0x00,0x00,0x00
00035c  00000000          DCB      0x00,0x00,0x00,0x00
000360  00000000          DCB      0x00,0x00,0x00,0x00
000364  00000000          DCB      0x00,0x00,0x00,0x00
000368  17d78400          DCB      0x17,0xd7,0x84,0x00
00036c  03000000          DCB      0x03,0x00,0x00,0x00
000370  00000000          DCB      0x00,0x00,0x00,0x00
000374  00000000          DCB      0x00,0x00,0x00,0x00
000378  c7938f9d          DCB      0xc7,0x93,0x8f,0x9d
00037c  1e1b1c19          DCB      0x1e,0x1b,0x1c,0x19
000380  00000000          DCB      0x00,0x00,0x00,0x00
000384  00000000          DCB      0x00,0x00,0x00,0x00
000388  00000000          DCB      0x00,0x00,0x00,0x00
00038c  00000000          DCB      0x00,0x00,0x00,0x00
000390  00000000          DCB      0x00,0x00,0x00,0x00
000394  00000000          DCB      0x00,0x00,0x00,0x00
000398  02031885          DCB      0x02,0x03,0x18,0x85
00039c  00004000          DCB      0x00,0x00,0x40,0x00
0003a0  00000003          DCB      0x00,0x00,0x00,0x03
0003a4  00000003          DCB      0x00,0x00,0x00,0x03
0003a8  00000000          DCB      0x00,0x00,0x00,0x00
0003ac  00000000          DCB      0x00,0x00,0x00,0x00
0003b0  40000000          DCB      0x40,0x00,0x00,0x00
0003b4  00000000          DCB      0x00,0x00,0x00,0x00
0003b8  00000000          DCB      0x00,0x00,0x00,0x00
0003bc  00000000          DCB      0x00,0x00,0x00,0x00
0003c0  00000000          DCB      0x00,0x00,0x00,0x00
0003c4  00000000          DCB      0x00,0x00,0x00,0x00
0003c8  00000000          DCB      0x00,0x00,0x00,0x00
0003cc  00000000          DCB      0x00,0x00,0x00,0x00
0003d0  00000000          DCB      0x00,0x00,0x00,0x00
0003d4  00000000          DCB      0x00,0x00,0x00,0x00
0003d8  00000000          DCB      0x00,0x00,0x00,0x00
0003dc  00000000          DCB      0x00,0x00,0x00,0x00
0003e0  00000000          DCB      0x00,0x00,0x00,0x00
0003e4  677ddf7e          DCB      0x67,0x7d,0xdf,0x7e
0003e8  72902e55          DCB      0x72,0x90,0x2e,0x55
0003ec  4cf6e688          DCB      0x4c,0xf6,0xe6,0x88
0003f0  00000000          DCB      0x00,0x00,0x00,0x00
0003f4  00000000          DCB      0x00,0x00,0x00,0x00
0003f8  00000000          DCB      0x00,0x00,0x00,0x00
0003fc  00000000          DCB      0x00,0x00,0x00,0x00
000400  d8dcb4b8          DCB      0xd8,0xdc,0xb4,0xb8
000404  b0d8b9ab          DCB      0xb0,0xd8,0xb9,0xab
000408  f3f8fab3          DCB      0xf3,0xf8,0xfa,0xb3
00040c  b7bb8e9e          DCB      0xb7,0xbb,0x8e,0x9e
000410  aef132f5          DCB      0xae,0xf1,0x32,0xf5
000414  1bf1b4b8          DCB      0x1b,0xf1,0xb4,0xb8
000418  b08097f1          DCB      0xb0,0x80,0x97,0xf1
00041c  a9dfdfdf          DCB      0xa9,0xdf,0xdf,0xdf
000420  aadfdfdf          DCB      0xaa,0xdf,0xdf,0xdf
000424  f2aac5cd          DCB      0xf2,0xaa,0xc5,0xcd
000428  c7a90cc9          DCB      0xc7,0xa9,0x0c,0xc9
00042c  2c97f1a9          DCB      0x2c,0x97,0xf1,0xa9
000430  89264666          DCB      0x89,0x26,0x46,0x66
000434  b28999a9          DCB      0xb2,0x89,0x99,0xa9
000438  2d557db0          DCB      0x2d,0x55,0x7d,0xb0
00043c  b08aa896          DCB      0xb0,0x8a,0xa8,0x96
000440  365676f1          DCB      0x36,0x56,0x76,0xf1
000444  baa3b4b2          DCB      0xba,0xa3,0xb4,0xb2
000448  80c0b8a8          DCB      0x80,0xc0,0xb8,0xa8
00044c  9711b283          DCB      0x97,0x11,0xb2,0x83
000450  98baa3f0          DCB      0x98,0xba,0xa3,0xf0
000454  24084410          DCB      0x24,0x08,0x44,0x10
000458  6418b2b9          DCB      0x64,0x18,0xb2,0xb9
00045c  b49883f1          DCB      0xb4,0x98,0x83,0xf1
000460  a329557d          DCB      0xa3,0x29,0x55,0x7d
000464  bab5b1a3          DCB      0xba,0xb5,0xb1,0xa3
000468  8393f000          DCB      0x83,0x93,0xf0,0x00
00046c  2850f5b2          DCB      0x28,0x50,0xf5,0xb2
000470  b6aa8393          DCB      0xb6,0xaa,0x83,0x93
000474  28547cf1          DCB      0x28,0x54,0x7c,0xf1
000478  b9a38293          DCB      0xb9,0xa3,0x82,0x93
00047c  61baa2da          DCB      0x61,0xba,0xa2,0xda
000480  dedfdb81          DCB      0xde,0xdf,0xdb,0x81
000484  9ab9aef5          DCB      0x9a,0xb9,0xae,0xf5
000488  606870f1          DCB      0x60,0x68,0x70,0xf1
00048c  dabaa2df          DCB      0xda,0xba,0xa2,0xdf
000490  d9baa2fa          DCB      0xd9,0xba,0xa2,0xfa
000494  b9a38292          DCB      0xb9,0xa3,0x82,0x92
000498  db31baa2          DCB      0xdb,0x31,0xba,0xa2
00049c  d9baa2f8          DCB      0xd9,0xba,0xa2,0xf8
0004a0  df85a4d0          DCB      0xdf,0x85,0xa4,0xd0
0004a4  c1bbad83          DCB      0xc1,0xbb,0xad,0x83
0004a8  c2c5c7b8          DCB      0xc2,0xc5,0xc7,0xb8
0004ac  a2dfdfdf          DCB      0xa2,0xdf,0xdf,0xdf
0004b0  baa0dfdf          DCB      0xba,0xa0,0xdf,0xdf
0004b4  dfd8d8f1          DCB      0xdf,0xd8,0xd8,0xf1
0004b8  b8aab38d          DCB      0xb8,0xaa,0xb3,0x8d
0004bc  b4980d35          DCB      0xb4,0x98,0x0d,0x35
0004c0  5db2b6ba          DCB      0x5d,0xb2,0xb6,0xba
0004c4  af8c9619          DCB      0xaf,0x8c,0x96,0x19
0004c8  8f9fa70e          DCB      0x8f,0x9f,0xa7,0x0e
0004cc  161eb49a          DCB      0x16,0x1e,0xb4,0x9a
0004d0  b8aa872c          DCB      0xb8,0xaa,0x87,0x2c
0004d4  547cbaa4          DCB      0x54,0x7c,0xba,0xa4
0004d8  b08ab691          DCB      0xb0,0x8a,0xb6,0x91
0004dc  325676b2          DCB      0x32,0x56,0x76,0xb2
0004e0  8494a4c8          DCB      0x84,0x94,0xa4,0xc8
0004e4  08cdd8b8          DCB      0x08,0xcd,0xd8,0xb8
0004e8  b4b0f199          DCB      0xb4,0xb0,0xf1,0x99
0004ec  82a82d55          DCB      0x82,0xa8,0x2d,0x55
0004f0  7d98a80e          DCB      0x7d,0x98,0xa8,0x0e
0004f4  161ea22c          DCB      0x16,0x1e,0xa2,0x2c
0004f8  547c92a4          DCB      0x54,0x7c,0x92,0xa4
0004fc  f02c5078          DCB      0xf0,0x2c,0x50,0x78
000500  f184a898          DCB      0xf1,0x84,0xa8,0x98
000504  c4cdfcd8          DCB      0xc4,0xcd,0xfc,0xd8
000508  0ddba8fc          DCB      0x0d,0xdb,0xa8,0xfc
00050c  2df3d9ba          DCB      0x2d,0xf3,0xd9,0xba
000510  a6f8daba          DCB      0xa6,0xf8,0xda,0xba
000514  a6ded8ba          DCB      0xa6,0xde,0xd8,0xba
000518  b2b68696          DCB      0xb2,0xb6,0x86,0x96
00051c  a6d0f3c8          DCB      0xa6,0xd0,0xf3,0xc8
000520  41daa6c8          DCB      0x41,0xda,0xa6,0xc8
000524  f8d8b0b4          DCB      0xf8,0xd8,0xb0,0xb4
000528  b882a892          DCB      0xb8,0x82,0xa8,0x92
00052c  f52c5488          DCB      0xf5,0x2c,0x54,0x88
000530  98f135d9          DCB      0x98,0xf1,0x35,0xd9
000534  f418d8f1          DCB      0xf4,0x18,0xd8,0xf1
000538  a2d0f8f9          DCB      0xa2,0xd0,0xf8,0xf9
00053c  a884d9c7          DCB      0xa8,0x84,0xd9,0xc7
000540  dff8f883          DCB      0xdf,0xf8,0xf8,0x83
000544  c5dadf69          DCB      0xc5,0xda,0xdf,0x69
000548  df83c1d8          DCB      0xdf,0x83,0xc1,0xd8
00054c  f40114f1          DCB      0xf4,0x01,0x14,0xf1
000550  a8824ea8          DCB      0xa8,0x82,0x4e,0xa8
000554  84f311d1          DCB      0x84,0xf3,0x11,0xd1
000558  82f5d992          DCB      0x82,0xf5,0xd9,0x92
00055c  289788f1          DCB      0x28,0x97,0x88,0xf1
000560  09f41c1c          DCB      0x09,0xf4,0x1c,0x1c
000564  d884a8f3          DCB      0xd8,0x84,0xa8,0xf3
000568  c0f9d1d9          DCB      0xc0,0xf9,0xd1,0xd9
00056c  9782f129          DCB      0x97,0x82,0xf1,0x29
000570  f40dd8f3          DCB      0xf4,0x0d,0xd8,0xf3
000574  f9f9d1d9          DCB      0xf9,0xf9,0xd1,0xd9
000578  82f4c203          DCB      0x82,0xf4,0xc2,0x03
00057c  d8dedf1a          DCB      0xd8,0xde,0xdf,0x1a
000580  d8f1a2fa          DCB      0xd8,0xf1,0xa2,0xfa
000584  f9a88498          DCB      0xf9,0xa8,0x84,0x98
000588  d9c7dff8          DCB      0xd9,0xc7,0xdf,0xf8
00058c  f8f883c7          DCB      0xf8,0xf8,0x83,0xc7
000590  dadf69df          DCB      0xda,0xdf,0x69,0xdf
000594  f883c3d8          DCB      0xf8,0x83,0xc3,0xd8
000598  f40114f1          DCB      0xf4,0x01,0x14,0xf1
00059c  98a8822e          DCB      0x98,0xa8,0x82,0x2e
0005a0  a884f311          DCB      0xa8,0x84,0xf3,0x11
0005a4  d182f5d9          DCB      0xd1,0x82,0xf5,0xd9
0005a8  92509788          DCB      0x92,0x50,0x97,0x88
0005ac  f109f41c          DCB      0xf1,0x09,0xf4,0x1c
0005b0  d884a8f3          DCB      0xd8,0x84,0xa8,0xf3
0005b4  c0f8f9d1          DCB      0xc0,0xf8,0xf9,0xd1
0005b8  d99782f1          DCB      0xd9,0x97,0x82,0xf1
0005bc  49f40dd8          DCB      0x49,0xf4,0x0d,0xd8
0005c0  f3f9f9d1          DCB      0xf3,0xf9,0xf9,0xd1
0005c4  d982f4c4          DCB      0xd9,0x82,0xf4,0xc4
0005c8  03d8dedf          DCB      0x03,0xd8,0xde,0xdf
0005cc  d8f1ad88          DCB      0xd8,0xf1,0xad,0x88
0005d0  98cca809          DCB      0x98,0xcc,0xa8,0x09
0005d4  f9d98292          DCB      0xf9,0xd9,0x82,0x92
0005d8  a8f57cf1          DCB      0xa8,0xf5,0x7c,0xf1
0005dc  883acf94          DCB      0x88,0x3a,0xcf,0x94
0005e0  4a6e98db          DCB      0x4a,0x6e,0x98,0xdb
0005e4  6931daad          DCB      0x69,0x31,0xda,0xad
0005e8  f2def9d8          DCB      0xf2,0xde,0xf9,0xd8
0005ec  8795a8f2          DCB      0x87,0x95,0xa8,0xf2
0005f0  21d1daa5          DCB      0x21,0xd1,0xda,0xa5
0005f4  f9f417d9          DCB      0xf9,0xf4,0x17,0xd9
0005f8  f1ae8ed0          DCB      0xf1,0xae,0x8e,0xd0
0005fc  c0c3ae82          DCB      0xc0,0xc3,0xae,0x82
000600  c684c3a8          DCB      0xc6,0x84,0xc3,0xa8
000604  8595c8a5          DCB      0x85,0x95,0xc8,0xa5
000608  88f2c0f1          DCB      0x88,0xf2,0xc0,0xf1
00060c  f4010ef1          DCB      0xf4,0x01,0x0e,0xf1
000610  8e9ea8c6          DCB      0x8e,0x9e,0xa8,0xc6
000614  3e56f554          DCB      0x3e,0x56,0xf5,0x54
000618  f18872f4          DCB      0xf1,0x88,0x72,0xf4
00061c  0115f198          DCB      0x01,0x15,0xf1,0x98
000620  45856ef5          DCB      0x45,0x85,0x6e,0xf5
000624  8e9e0488          DCB      0x8e,0x9e,0x04,0x88
000628  f142985a          DCB      0xf1,0x42,0x98,0x5a
00062c  8e9e0688          DCB      0x8e,0x9e,0x06,0x88
000630  69f4011c          DCB      0x69,0xf4,0x01,0x1c
000634  f1981e11          DCB      0xf1,0x98,0x1e,0x11
000638  08d0f504          DCB      0x08,0xd0,0xf5,0x04
00063c  f11e9702          DCB      0xf1,0x1e,0x97,0x02
000640  02983625          DCB      0x02,0x98,0x36,0x25
000644  dbf9d985          DCB      0xdb,0xf9,0xd9,0x85
000648  a5f3c1da          DCB      0xa5,0xf3,0xc1,0xda
00064c  85a5f3df          DCB      0x85,0xa5,0xf3,0xdf
000650  d88595a8          DCB      0xd8,0x85,0x95,0xa8
000654  f309daa5          DCB      0xf3,0x09,0xda,0xa5
000658  fad88292          DCB      0xfa,0xd8,0x82,0x92
00065c  a8f578f1          DCB      0xa8,0xf5,0x78,0xf1
000660  881a849f          DCB      0x88,0x1a,0x84,0x9f
000664  26889821          DCB      0x26,0x88,0x98,0x21
000668  daf41df3          DCB      0xda,0xf4,0x1d,0xf3
00066c  d8879f39          DCB      0xd8,0x87,0x9f,0x39
000670  d1afd9df          DCB      0xd1,0xaf,0xd9,0xdf
000674  dffbf9f4          DCB      0xdf,0xfb,0xf9,0xf4
000678  0cf3d8fa          DCB      0x0c,0xf3,0xd8,0xfa
00067c  d0f8daf9          DCB      0xd0,0xf8,0xda,0xf9
000680  f9d0dfd9          DCB      0xf9,0xd0,0xdf,0xd9
000684  f9d8f40b          DCB      0xf9,0xd8,0xf4,0x0b
000688  d8f3879f          DCB      0xd8,0xf3,0x87,0x9f
00068c  39d1afd9          DCB      0x39,0xd1,0xaf,0xd9
000690  dfdff41d          DCB      0xdf,0xdf,0xf4,0x1d
000694  f3d8fafc          DCB      0xf3,0xd8,0xfa,0xfc
000698  a869f9f9          DCB      0xa8,0x69,0xf9,0xf9
00069c  afd0dade          DCB      0xaf,0xd0,0xda,0xde
0006a0  fad9f88f          DCB      0xfa,0xd9,0xf8,0x8f
0006a4  9fa8f1cc          DCB      0x9f,0xa8,0xf1,0xcc
0006a8  f398db45          DCB      0xf3,0x98,0xdb,0x45
0006ac  d9afdfd0          DCB      0xd9,0xaf,0xdf,0xd0
0006b0  f8d8f18f          DCB      0xf8,0xd8,0xf1,0x8f
0006b4  9fa8caf3          DCB      0x9f,0xa8,0xca,0xf3
0006b8  8809daaf          DCB      0x88,0x09,0xda,0xaf
0006bc  8fcbf8d8          DCB      0x8f,0xcb,0xf8,0xd8
0006c0  f2ad978d          DCB      0xf2,0xad,0x97,0x8d
0006c4  0cd9a5df          DCB      0x0c,0xd9,0xa5,0xdf
0006c8  f9baa6f3          DCB      0xf9,0xba,0xa6,0xf3
0006cc  faf412f2          DCB      0xfa,0xf4,0x12,0xf2
0006d0  d8950dd1          DCB      0xd8,0x95,0x0d,0xd1
0006d4  d9baa6f3          DCB      0xd9,0xba,0xa6,0xf3
0006d8  fadaa5f2          DCB      0xfa,0xda,0xa5,0xf2
0006dc  c1baa6f3          DCB      0xc1,0xba,0xa6,0xf3
0006e0  dfd8f1ba          DCB      0xdf,0xd8,0xf1,0xba
0006e4  b2b68696          DCB      0xb2,0xb6,0x86,0x96
0006e8  a6d0caf3          DCB      0xa6,0xd0,0xca,0xf3
0006ec  49daa6cb          DCB      0x49,0xda,0xa6,0xcb
0006f0  f8d8b0b4          DCB      0xf8,0xd8,0xb0,0xb4
0006f4  b8d8ad84          DCB      0xb8,0xd8,0xad,0x84
0006f8  f2c0dff1          DCB      0xf2,0xc0,0xdf,0xf1
0006fc  8fcbc3a8          DCB      0x8f,0xcb,0xc3,0xa8
000700  b2b68696          DCB      0xb2,0xb6,0x86,0x96
000704  c8c1cbc3          DCB      0xc8,0xc1,0xcb,0xc3
000708  f3b0b488          DCB      0xf3,0xb0,0xb4,0x88
00070c  98a821db          DCB      0x98,0xa8,0x21,0xdb
000710  718d9d71          DCB      0x71,0x8d,0x9d,0x71
000714  859521d9          DCB      0x85,0x95,0x21,0xd9
000718  adf2fad8          DCB      0xad,0xf2,0xfa,0xd8
00071c  8597a828          DCB      0x85,0x97,0xa8,0x28
000720  d9f408d8          DCB      0xd9,0xf4,0x08,0xd8
000724  f28d29da          DCB      0xf2,0x8d,0x29,0xda
000728  f405d9f2          DCB      0xf4,0x05,0xd9,0xf2
00072c  85a4c2f2          DCB      0x85,0xa4,0xc2,0xf2
000730  d8a88d94          DCB      0xd8,0xa8,0x8d,0x94
000734  01d1d9f4          DCB      0x01,0xd1,0xd9,0xf4
000738  11f2d887          DCB      0x11,0xf2,0xd8,0x87
00073c  21d8f40a          DCB      0x21,0xd8,0xf4,0x0a
000740  d8f28498          DCB      0xd8,0xf2,0x84,0x98
000744  a8c801d1          DCB      0xa8,0xc8,0x01,0xd1
000748  d9f411d8          DCB      0xd9,0xf4,0x11,0xd8
00074c  f3a4c8bb          DCB      0xf3,0xa4,0xc8,0xbb
000750  afd0f2de          DCB      0xaf,0xd0,0xf2,0xde
000754  f8f8f8f8          DCB      0xf8,0xf8,0xf8,0xf8
000758  f8f8f8f8          DCB      0xf8,0xf8,0xf8,0xf8
00075c  d8f1b8f6          DCB      0xd8,0xf1,0xb8,0xf6
000760  b5b9b08a          DCB      0xb5,0xb9,0xb0,0x8a
000764  95a3de3c          DCB      0x95,0xa3,0xde,0x3c
000768  a3d9f8d8          DCB      0xa3,0xd9,0xf8,0xd8
00076c  5ca3d9f8          DCB      0x5c,0xa3,0xd9,0xf8
000770  d87ca3d9          DCB      0xd8,0x7c,0xa3,0xd9
000774  f8d8f8f9          DCB      0xf8,0xd8,0xf8,0xf9
000778  d1a5d9df          DCB      0xd1,0xa5,0xd9,0xdf
00077c  dafad8b1          DCB      0xda,0xfa,0xd8,0xb1
000780  8530f7d9          DCB      0x85,0x30,0xf7,0xd9
000784  ded8f830          DCB      0xde,0xd8,0xf8,0x30
000788  addaded8          DCB      0xad,0xda,0xde,0xd8
00078c  f2b48c99          DCB      0xf2,0xb4,0x8c,0x99
000790  a32d557d          DCB      0xa3,0x2d,0x55,0x7d
000794  a083dfdf          DCB      0xa0,0x83,0xdf,0xdf
000798  dfb591a0          DCB      0xdf,0xb5,0x91,0xa0
00079c  f629d9fb          DCB      0xf6,0x29,0xd9,0xfb
0007a0  d8a0fc29          DCB      0xd8,0xa0,0xfc,0x29
0007a4  d9fad8a0          DCB      0xd9,0xfa,0xd8,0xa0
0007a8  d051d9f8          DCB      0xd0,0x51,0xd9,0xf8
0007ac  d8fc51d9          DCB      0xd8,0xfc,0x51,0xd9
0007b0  f9d879d9          DCB      0xf9,0xd8,0x79,0xd9
0007b4  fbd8a0d0          DCB      0xfb,0xd8,0xa0,0xd0
0007b8  fc79d9fa          DCB      0xfc,0x79,0xd9,0xfa
0007bc  d8a1f9f9          DCB      0xd8,0xa1,0xf9,0xf9
0007c0  f9f9f9a0          DCB      0xf9,0xf9,0xf9,0xa0
0007c4  dadfdfdf          DCB      0xda,0xdf,0xdf,0xdf
0007c8  d8a1f8f8          DCB      0xd8,0xa1,0xf8,0xf8
0007cc  f8f8f8ac          DCB      0xf8,0xf8,0xf8,0xac
0007d0  def8adde          DCB      0xde,0xf8,0xad,0xde
0007d4  8393ac2c          DCB      0x83,0x93,0xac,0x2c
0007d8  547cf1a8          DCB      0x54,0x7c,0xf1,0xa8
0007dc  dfdfdff6          DCB      0xdf,0xdf,0xdf,0xf6
0007e0  9d2cdaa0          DCB      0x9d,0x2c,0xda,0xa0
0007e4  dfd9fadb          DCB      0xdf,0xd9,0xfa,0xdb
0007e8  2df8d8a8          DCB      0x2d,0xf8,0xd8,0xa8
0007ec  50daa0d0          DCB      0x50,0xda,0xa0,0xd0
0007f0  ded9d0f8          DCB      0xde,0xd9,0xd0,0xf8
0007f4  f8f8db55          DCB      0xf8,0xf8,0xdb,0x55
0007f8  f8d8a878          DCB      0xf8,0xd8,0xa8,0x78
0007fc  daa0d0df          DCB      0xda,0xa0,0xd0,0xdf
000800  d9d0faf8          DCB      0xd9,0xd0,0xfa,0xf8
000804  f8f8f8db          DCB      0xf8,0xf8,0xf8,0xdb
000808  7df8d89c          DCB      0x7d,0xf8,0xd8,0x9c
00080c  a88cf530          DCB      0xa8,0x8c,0xf5,0x30
000810  db38d9d0          DCB      0xdb,0x38,0xd9,0xd0
000814  dedfa0d0          DCB      0xde,0xdf,0xa0,0xd0
000818  dedfd8a8          DCB      0xde,0xdf,0xd8,0xa8
00081c  48db58d9          DCB      0x48,0xdb,0x58,0xd9
000820  dfd0dea0          DCB      0xdf,0xd0,0xde,0xa0
000824  dfd0ded8          DCB      0xdf,0xd0,0xde,0xd8
000828  a868db70          DCB      0xa8,0x68,0xdb,0x70
00082c  d9dfdfa0          DCB      0xd9,0xdf,0xdf,0xa0
000830  dfdfd8f1          DCB      0xdf,0xdf,0xd8,0xf1
000834  a888902c          DCB      0xa8,0x88,0x90,0x2c
000838  547c98a8          DCB      0x54,0x7c,0x98,0xa8
00083c  d05c38d1          DCB      0xd0,0x5c,0x38,0xd1
000840  daf2ae8c          DCB      0xda,0xf2,0xae,0x8c
000844  dff9d8b0          DCB      0xdf,0xf9,0xd8,0xb0
000848  87a8c1c1          DCB      0x87,0xa8,0xc1,0xc1
00084c  b188a8c6          DCB      0xb1,0x88,0xa8,0xc6
000850  f9f9da36          DCB      0xf9,0xf9,0xda,0x36
000854  d8a8f9da          DCB      0xd8,0xa8,0xf9,0xda
000858  36d8a8f9          DCB      0x36,0xd8,0xa8,0xf9
00085c  da36d8a8          DCB      0xda,0x36,0xd8,0xa8
000860  f9da36d8          DCB      0xf9,0xda,0x36,0xd8
000864  a8f9da36          DCB      0xa8,0xf9,0xda,0x36
000868  d8f78d9d          DCB      0xd8,0xf7,0x8d,0x9d
00086c  adf818da          DCB      0xad,0xf8,0x18,0xda
000870  f2aedfd8          DCB      0xf2,0xae,0xdf,0xd8
000874  f7adfa30          DCB      0xf7,0xad,0xfa,0x30
000878  d9a4def9          DCB      0xd9,0xa4,0xde,0xf9
00087c  d8f2aede          DCB      0xd8,0xf2,0xae,0xde
000880  faf983a7          DCB      0xfa,0xf9,0x83,0xa7
000884  d9c3c5c7          DCB      0xd9,0xc3,0xc5,0xc7
000888  f1889ba7          DCB      0xf1,0x88,0x9b,0xa7
00088c  7aadf7de          DCB      0x7a,0xad,0xf7,0xde
000890  dfa4f884          DCB      0xdf,0xa4,0xf8,0x84
000894  9408a797          DCB      0x94,0x08,0xa7,0x97
000898  f300aef2          DCB      0xf3,0x00,0xae,0xf2
00089c  9819a488          DCB      0x98,0x19,0xa4,0x88
0008a0  c6a39488          DCB      0xc6,0xa3,0x94,0x88
0008a4  f632dff2          DCB      0xf6,0x32,0xdf,0xf2
0008a8  8393db09          DCB      0x83,0x93,0xdb,0x09
0008ac  d9f2aadf          DCB      0xd9,0xf2,0xaa,0xdf
0008b0  d8d8aef8          DCB      0xd8,0xd8,0xae,0xf8
0008b4  f9d1daf3          DCB      0xf9,0xd1,0xda,0xf3
0008b8  a4dea7f1          DCB      0xa4,0xde,0xa7,0xf1
0008bc  889b7ad8          DCB      0x88,0x9b,0x7a,0xd8
0008c0  f38494ae          DCB      0xf3,0x84,0x94,0xae
0008c4  19f9daaa          DCB      0x19,0xf9,0xda,0xaa
0008c8  f1dfd8a8          DCB      0xf1,0xdf,0xd8,0xa8
0008cc  81c0c3c5          DCB      0x81,0xc0,0xc3,0xc5
0008d0  c7a39283          DCB      0xc7,0xa3,0x92,0x83
0008d4  f628adde          DCB      0xf6,0x28,0xad,0xde
0008d8  d9f8d8a3          DCB      0xd9,0xf8,0xd8,0xa3
0008dc  50add9f8          DCB      0x50,0xad,0xd9,0xf8
0008e0  d8a378ad          DCB      0xd8,0xa3,0x78,0xad
0008e4  d9f8d8f8          DCB      0xd9,0xf8,0xd8,0xf8
0008e8  f9d1a1da          DCB      0xf9,0xd1,0xa1,0xda
0008ec  dec3c5c7          DCB      0xde,0xc3,0xc5,0xc7
0008f0  d8a18194          DCB      0xd8,0xa1,0x81,0x94
0008f4  f818f2b0          DCB      0xf8,0x18,0xf2,0xb0
0008f8  89acc3c5          DCB      0x89,0xac,0xc3,0xc5
0008fc  c7f1d8b8          DCB      0xc7,0xf1,0xd8,0xb8
000900  b4b09786          DCB      0xb4,0xb0,0x97,0x86
000904  a8319b06          DCB      0xa8,0x31,0x9b,0x06
000908  9907ab97          DCB      0x99,0x07,0xab,0x97
00090c  28889bf0          DCB      0x28,0x88,0x9b,0xf0
000910  0c201440          DCB      0x0c,0x20,0x14,0x40
000914  b0b4b8f0          DCB      0xb0,0xb4,0xb8,0xf0
000918  a88a9a28          DCB      0xa8,0x8a,0x9a,0x28
00091c  5078b79b          DCB      0x50,0x78,0xb7,0x9b
000920  a8295179          DCB      0xa8,0x29,0x51,0x79
000924  24705944          DCB      0x24,0x70,0x59,0x44
000928  69386448          DCB      0x69,0x38,0x64,0x48
00092c  31f1bbab          DCB      0x31,0xf1,0xbb,0xab
000930  88002c54          DCB      0x88,0x00,0x2c,0x54
000934  7cf0b38b          DCB      0x7c,0xf0,0xb3,0x8b
000938  b8a80428          DCB      0xb8,0xa8,0x04,0x28
00093c  5078f1b0          DCB      0x50,0x78,0xf1,0xb0
000940  88b49726          DCB      0x88,0xb4,0x97,0x26
000944  a85998bb          DCB      0xa8,0x59,0x98,0xbb
000948  abb38b02          DCB      0xab,0xb3,0x8b,0x02
00094c  264666b0          DCB      0x26,0x46,0x66,0xb0
000950  b8f08a9c          DCB      0xb8,0xf0,0x8a,0x9c
000954  a8295179          DCB      0xa8,0x29,0x51,0x79
000958  8b295179          DCB      0x8b,0x29,0x51,0x79
00095c  8a247059          DCB      0x8a,0x24,0x70,0x59
000960  8b205871          DCB      0x8b,0x20,0x58,0x71
000964  8a446938          DCB      0x8a,0x44,0x69,0x38
000968  8b394068          DCB      0x8b,0x39,0x40,0x68
00096c  8a644831          DCB      0x8a,0x64,0x48,0x31
000970  8b304960          DCB      0x8b,0x30,0x49,0x60
000974  88f1ac00          DCB      0x88,0xf1,0xac,0x00
000978  2c547cf0          DCB      0x2c,0x54,0x7c,0xf0
00097c  8ca80428          DCB      0x8c,0xa8,0x04,0x28
000980  5078f188          DCB      0x50,0x78,0xf1,0x88
000984  9726a859          DCB      0x97,0x26,0xa8,0x59
000988  98ac8c02          DCB      0x98,0xac,0x8c,0x02
00098c  264666f0          DCB      0x26,0x46,0x66,0xf0
000990  899ca829          DCB      0x89,0x9c,0xa8,0x29
000994  51792470          DCB      0x51,0x79,0x24,0x70
000998  59446938          DCB      0x59,0x44,0x69,0x38
00099c  644831a9          DCB      0x64,0x48,0x31,0xa9
0009a0  88092059          DCB      0x88,0x09,0x20,0x59
0009a4  70ab1138          DCB      0x70,0xab,0x11,0x38
0009a8  4069a819          DCB      0x40,0x69,0xa8,0x19
0009ac  3148608c          DCB      0x31,0x48,0x60,0x8c
0009b0  a83c415c          DCB      0xa8,0x3c,0x41,0x5c
0009b4  207c00f1          DCB      0x20,0x7c,0x00,0xf1
0009b8  87981986          DCB      0x87,0x98,0x19,0x86
0009bc  a86e767e          DCB      0xa8,0x6e,0x76,0x7e
0009c0  a999882d          DCB      0xa9,0x99,0x88,0x2d
0009c4  557dd8b1          DCB      0x55,0x7d,0xd8,0xb1
0009c8  b5b9a3df          DCB      0xb5,0xb9,0xa3,0xdf
0009cc  dfdfaed0          DCB      0xdf,0xdf,0xae,0xd0
0009d0  dfaad0de          DCB      0xdf,0xaa,0xd0,0xde
0009d4  f2abf8f9          DCB      0xf2,0xab,0xf8,0xf9
0009d8  d9b087c4          DCB      0xd9,0xb0,0x87,0xc4
0009dc  aaf1dfdf          DCB      0xaa,0xf1,0xdf,0xdf
0009e0  bbafdfdf          DCB      0xbb,0xaf,0xdf,0xdf
0009e4  b9d8b1f1          DCB      0xb9,0xd8,0xb1,0xf1
0009e8  a3978e60          DCB      0xa3,0x97,0x8e,0x60
0009ec  dfb084f2          DCB      0xdf,0xb0,0x84,0xf2
0009f0  c8f8f9d9          DCB      0xc8,0xf8,0xf9,0xd9
0009f4  ded89385          DCB      0xde,0xd8,0x93,0x85
0009f8  f14ab183          DCB      0xf1,0x4a,0xb1,0x83
0009fc  a308b583          DCB      0xa3,0x08,0xb5,0x83
000a00  9a0810b7          DCB      0x9a,0x08,0x10,0xb7
000a04  9f10d8f1          DCB      0x9f,0x10,0xd8,0xf1
000a08  b0baaeb0          DCB      0xb0,0xba,0xae,0xb0
000a0c  8ac2b2b6          DCB      0x8a,0xc2,0xb2,0xb6
000a10  8e9ef1fb          DCB      0x8e,0x9e,0xf1,0xfb
000a14  d9f41dd8          DCB      0xd9,0xf4,0x1d,0xd8
000a18  f9d90cf1          DCB      0xf9,0xd9,0x0c,0xf1
000a1c  d8f8f8ad          DCB      0xd8,0xf8,0xf8,0xad
000a20  61d9aefb          DCB      0x61,0xd9,0xae,0xfb
000a24  d8f40cf1          DCB      0xd8,0xf4,0x0c,0xf1
000a28  d8f8f8ad          DCB      0xd8,0xf8,0xf8,0xad
000a2c  19d9aefb          DCB      0x19,0xd9,0xae,0xfb
000a30  dfd8f416          DCB      0xdf,0xd8,0xf4,0x16
000a34  f1d8f8ad          DCB      0xf1,0xd8,0xf8,0xad
000a38  8d61d9f4          DCB      0x8d,0x61,0xd9,0xf4
000a3c  f4acf59c          DCB      0xf4,0xac,0xf5,0x9c
000a40  9c8ddf2b          DCB      0x9c,0x8d,0xdf,0x2b
000a44  bab6aefa          DCB      0xba,0xb6,0xae,0xfa
000a48  f8f40bd8          DCB      0xf8,0xf4,0x0b,0xd8
000a4c  f1aed0f8          DCB      0xf1,0xae,0xd0,0xf8
000a50  ad51daae          DCB      0xad,0x51,0xda,0xae
000a54  faf8f1d8          DCB      0xfa,0xf8,0xf1,0xd8
000a58  b9b1b6a3          DCB      0xb9,0xb1,0xb6,0xa3
000a5c  839c08b9          DCB      0x83,0x9c,0x08,0xb9
000a60  b1839ab5          DCB      0xb1,0x83,0x9a,0xb5
000a64  aac0fd30          DCB      0xaa,0xc0,0xfd,0x30
000a68  83b79f10          DCB      0x83,0xb7,0x9f,0x10
000a6c  b58b93f2          DCB      0xb5,0x8b,0x93,0xf2
000a70  0202d1ab          DCB      0x02,0x02,0xd1,0xab
000a74  daded8f1          DCB      0xda,0xde,0xd8,0xf1
000a78  b080baab          DCB      0xb0,0x80,0xba,0xab
000a7c  c0c3b284          DCB      0xc0,0xc3,0xb2,0x84
000a80  c1c3d8b1          DCB      0xc1,0xc3,0xd8,0xb1
000a84  b9f38ba3          DCB      0xb9,0xf3,0x8b,0xa3
000a88  91b609b4          DCB      0x91,0xb6,0x09,0xb4
000a8c  d9abdeb0          DCB      0xd9,0xab,0xde,0xb0
000a90  879cb9a3          DCB      0x87,0x9c,0xb9,0xa3
000a94  ddf1b38b          DCB      0xdd,0xf1,0xb3,0x8b
000a98  8b8b8b8b          DCB      0x8b,0x8b,0x8b,0x8b
000a9c  b087a3a3          DCB      0xb0,0x87,0xa3,0xa3
000aa0  a3a3b28b          DCB      0xa3,0xa3,0xb2,0x8b
000aa4  b69bf2a3          DCB      0xb6,0x9b,0xf2,0xa3
000aa8  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000aac  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ab0  a3f1b087          DCB      0xa3,0xf1,0xb0,0x87
000ab4  b59aa3f3          DCB      0xb5,0x9a,0xa3,0xf3
000ab8  9ba3a3dc          DCB      0x9b,0xa3,0xa3,0xdc
000abc  baacdfb9          DCB      0xba,0xac,0xdf,0xb9
000ac0  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ac4  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ac8  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000acc  a3a3a3a3          DCB      0xa3,0xa3,0xa3,0xa3
000ad0  d8d8d8bb          DCB      0xd8,0xd8,0xd8,0xbb
000ad4  b3b7f1aa          DCB      0xb3,0xb7,0xf1,0xaa
000ad8  f9daffd9          DCB      0xf9,0xda,0xff,0xd9
000adc  809aaa28          DCB      0x80,0x9a,0xaa,0x28
000ae0  b48098a7          DCB      0xb4,0x80,0x98,0xa7
000ae4  20b79787          DCB      0x20,0xb7,0x97,0x87
000ae8  a86688f0          DCB      0xa8,0x66,0x88,0xf0
000aec  7951f190          DCB      0x79,0x51,0xf1,0x90
000af0  2c870ca7          DCB      0x2c,0x87,0x0c,0xa7
000af4  81976293          DCB      0x81,0x97,0x62,0x93
000af8  f0717160          DCB      0xf0,0x71,0x71,0x60
000afc  85940129          DCB      0x85,0x94,0x01,0x29
000b00  517990a5          DCB      0x51,0x79,0x90,0xa5
000b04  f1284c6c          DCB      0xf1,0x28,0x4c,0x6c
000b08  870c9518          DCB      0x87,0x0c,0x95,0x18
000b0c  8578a383          DCB      0x85,0x78,0xa3,0x83
000b10  90284c6c          DCB      0x90,0x28,0x4c,0x6c
000b14  886cd8f3          DCB      0x88,0x6c,0xd8,0xf3
000b18  a28200f2          DCB      0xa2,0x82,0x00,0xf2
000b1c  10a89219          DCB      0x10,0xa8,0x92,0x19
000b20  80a2f2d9          DCB      0x80,0xa2,0xf2,0xd9
000b24  26d8f188          DCB      0x26,0xd8,0xf1,0x88
000b28  a84dd948          DCB      0xa8,0x4d,0xd9,0x48
000b2c  d896a839          DCB      0xd8,0x96,0xa8,0x39
000b30  80d93cd8          DCB      0x80,0xd9,0x3c,0xd8
000b34  9580a839          DCB      0x95,0x80,0xa8,0x39
000b38  a68698d9          DCB      0xa6,0x86,0x98,0xd9
000b3c  2cda87a7          DCB      0x2c,0xda,0x87,0xa7
000b40  2cd8a889          DCB      0x2c,0xd8,0xa8,0x89
000b44  9519a980          DCB      0x95,0x19,0xa9,0x80
000b48  d938d8a8          DCB      0xd9,0x38,0xd8,0xa8
000b4c  8939a980          DCB      0x89,0x39,0xa9,0x80
000b50  da3cd8a8          DCB      0xda,0x3c,0xd8,0xa8
000b54  2ea83990          DCB      0x2e,0xa8,0x39,0x90
000b58  d90cd8a8          DCB      0xd9,0x0c,0xd8,0xa8
000b5c  953198d9          DCB      0x95,0x31,0x98,0xd9
000b60  0cd8a809          DCB      0x0c,0xd8,0xa8,0x09
000b64  d9ffd801          DCB      0xd9,0xff,0xd8,0x01
000b68  daffd895          DCB      0xda,0xff,0xd8,0x95
000b6c  39a9da26          DCB      0x39,0xa9,0xda,0x26
000b70  ffd890a8          DCB      0xff,0xd8,0x90,0xa8
000b74  0d8999a8          DCB      0x0d,0x89,0x99,0xa8
000b78  10809821          DCB      0x10,0x80,0x98,0x21
000b7c  da2ed889          DCB      0xda,0x2e,0xd8,0x89
000b80  99a83180          DCB      0x99,0xa8,0x31,0x80
000b84  da2ed8a8          DCB      0xda,0x2e,0xd8,0xa8
000b88  86963180          DCB      0x86,0x96,0x31,0x80
000b8c  da2ed8a8          DCB      0xda,0x2e,0xd8,0xa8
000b90  873180da          DCB      0x87,0x31,0x80,0xda
000b94  2ed8a882          DCB      0x2e,0xd8,0xa8,0x82
000b98  92f34180          DCB      0x92,0xf3,0x41,0x80
000b9c  f1d92ed8          DCB      0xf1,0xd9,0x2e,0xd8
000ba0  a882f319          DCB      0xa8,0x82,0xf3,0x19
000ba4  80f1d92e          DCB      0x80,0xf1,0xd9,0x2e
000ba8  d882acf3          DCB      0xd8,0x82,0xac,0xf3
000bac  c0a28022          DCB      0xc0,0xa2,0x80,0x22
000bb0  f1a62ea7          DCB      0xf1,0xa6,0x2e,0xa7
000bb4  2ea92298          DCB      0x2e,0xa9,0x22,0x98
000bb8  a829daac          DCB      0xa8,0x29,0xda,0xac
000bbc  deffd8a2          DCB      0xde,0xff,0xd8,0xa2
000bc0  f22af1a9          DCB      0xf2,0x2a,0xf1,0xa9
000bc4  2e8292a8          DCB      0x2e,0x82,0x92,0xa8
000bc8  f23180a6          DCB      0xf2,0x31,0x80,0xa6
000bcc  96f1d900          DCB      0x96,0xf1,0xd9,0x00
000bd0  ac8c9c0c          DCB      0xac,0x8c,0x9c,0x0c
000bd4  30acded0          DCB      0x30,0xac,0xde,0xd0
000bd8  deffd88c          DCB      0xde,0xff,0xd8,0x8c
000bdc  9cacd010          DCB      0x9c,0xac,0xd0,0x10
000be0  acde8092          DCB      0xac,0xde,0x80,0x92
000be4  a2f24c82          DCB      0xa2,0xf2,0x4c,0x82
000be8  a8f1caf2          DCB      0xa8,0xf1,0xca,0xf2
000bec  35f19688          DCB      0x35,0xf1,0x96,0x88
000bf0  a6d900d8          DCB      0xa6,0xd9,0x00,0xd8
000bf4  f1ff              DCB      0xf1,0xff
