; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o..\..\output\stm32f10x_sdio.o --asm_dir=..\..\Listing\ --list_dir=..\..\Listing\ --depend=..\..\output\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork --diag_suppress=9931 -I..\..\Libraries\CMSIS -I..\..\User -I..\..\Libraries\FWlib\inc -I..\..\User\led -I..\..\FreeRTOS\include -I..\..\FreeRTOS\port\RVDS\ARM_CM3 -I..\..\User\key -I..\..\User\uart -I..\..\Application -I..\..\BSP -I..\..\BSP\easylogger\inc -I..\..\BSP\easylogger\port -I..\..\BSP\easylogger\src -I..\..\BSP\eMPL -ID:\01-stm32单片机\04-当前项目\ROS小车\Project\Project\RTOS\v1.3TB6612电机驱动\Project\RVMDK（uv5）\RTE -ID:\00-Software\keil\ARM\PACK\Keil\STM32F1xx_DFP\1.0.5\Device\Include -ID:\00-Software\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\..\output\stm32f10x_sdio.crf ..\..\Libraries\FWlib\src\stm32f10x_sdio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;160      */
;;;161    void SDIO_DeInit(void)
000000  4866              LDR      r0,|L1.412|
;;;162    {
;;;163      SDIO->POWER = 0x00000000;
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]
;;;164      SDIO->CLKCR = 0x00000000;
000006  6041              STR      r1,[r0,#4]
;;;165      SDIO->ARG = 0x00000000;
000008  6081              STR      r1,[r0,#8]
;;;166      SDIO->CMD = 0x00000000;
00000a  60c1              STR      r1,[r0,#0xc]
;;;167      SDIO->DTIMER = 0x00000000;
00000c  6241              STR      r1,[r0,#0x24]
;;;168      SDIO->DLEN = 0x00000000;
00000e  6281              STR      r1,[r0,#0x28]
;;;169      SDIO->DCTRL = 0x00000000;
000010  62c1              STR      r1,[r0,#0x2c]
;;;170      SDIO->ICR = 0x00C007FF;
000012  4a63              LDR      r2,|L1.416|
000014  6382              STR      r2,[r0,#0x38]
;;;171      SDIO->MASK = 0x00000000;
000016  63c1              STR      r1,[r0,#0x3c]
;;;172    }
000018  4770              BX       lr
;;;173    
                          ENDP

                  SDIO_Init PROC
;;;180      */
;;;181    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
00001a  b530              PUSH     {r4,r5,lr}
;;;182    {
;;;183      uint32_t tmpreg = 0;
;;;184        
;;;185      /* Check the parameters */
;;;186      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;187      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;188      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;189      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;190      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;191       
;;;192    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;193      /* Get the SDIO CLKCR value */
;;;194      tmpreg = SDIO->CLKCR;
00001c  4b5f              LDR      r3,|L1.412|
00001e  685a              LDR      r2,[r3,#4]
;;;195      
;;;196      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;197      tmpreg &= CLKCR_CLEAR_MASK;
000020  f64761ff          MOV      r1,#0x7eff
000024  438a              BICS     r2,r2,r1
;;;198      
;;;199      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;200      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;201      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;202      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;203      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;204      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;205      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
000026  7d01              LDRB     r1,[r0,#0x14]
000028  6884              LDR      r4,[r0,#8]
00002a  68c5              LDR      r5,[r0,#0xc]
00002c  4321              ORRS     r1,r1,r4
00002e  6844              LDR      r4,[r0,#4]
000030  432c              ORRS     r4,r4,r5
000032  4321              ORRS     r1,r1,r4
000034  6804              LDR      r4,[r0,#0]
000036  6900              LDR      r0,[r0,#0x10]
000038  4321              ORRS     r1,r1,r4
00003a  4301              ORRS     r1,r1,r0
00003c  4311              ORRS     r1,r1,r2
;;;206                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;207                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;208      
;;;209      /* Write to SDIO CLKCR */
;;;210      SDIO->CLKCR = tmpreg;
00003e  6059              STR      r1,[r3,#4]
;;;211    }
000040  bd30              POP      {r4,r5,pc}
;;;212    
                          ENDP

                  SDIO_StructInit PROC
;;;218      */
;;;219    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000042  2100              MOVS     r1,#0
;;;220    {
;;;221      /* SDIO_InitStruct members default value */
;;;222      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000044  7501              STRB     r1,[r0,#0x14]
;;;223      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;224      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000046  6001              STR      r1,[r0,#0]
;;;225      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000048  6041              STR      r1,[r0,#4]
;;;226      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
00004a  6081              STR      r1,[r0,#8]
;;;227      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00004c  60c1              STR      r1,[r0,#0xc]
00004e  6101              STR      r1,[r0,#0x10]
;;;228    }
000050  4770              BX       lr
;;;229    
                          ENDP

                  SDIO_ClockCmd PROC
;;;234      */
;;;235    void SDIO_ClockCmd(FunctionalState NewState)
000052  4954              LDR      r1,|L1.420|
;;;236    {
;;;237      /* Check the parameters */
;;;238      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;239      
;;;240      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000054  f8c100a0          STR      r0,[r1,#0xa0]
;;;241    }
000058  4770              BX       lr
;;;242    
                          ENDP

                  SDIO_SetPowerState PROC
;;;250      */
;;;251    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
00005a  4950              LDR      r1,|L1.412|
;;;252    {
;;;253      /* Check the parameters */
;;;254      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;255      
;;;256      SDIO->POWER &= PWR_PWRCTRL_MASK;
00005c  680a              LDR      r2,[r1,#0]
00005e  f0220203          BIC      r2,r2,#3
000062  600a              STR      r2,[r1,#0]
;;;257      SDIO->POWER |= SDIO_PowerState;
000064  680a              LDR      r2,[r1,#0]
000066  4302              ORRS     r2,r2,r0
000068  600a              STR      r2,[r1,#0]
;;;258    }
00006a  4770              BX       lr
;;;259    
                          ENDP

                  SDIO_GetPowerState PROC
;;;268      */
;;;269    uint32_t SDIO_GetPowerState(void)
00006c  484b              LDR      r0,|L1.412|
;;;270    {
;;;271      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
00006e  6800              LDR      r0,[r0,#0]
000070  f0000003          AND      r0,r0,#3
;;;272    }
000074  4770              BX       lr
;;;273    
                          ENDP

                  SDIO_ITConfig PROC
;;;306      */
;;;307    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
000076  4a49              LDR      r2,|L1.412|
;;;308    {
;;;309      /* Check the parameters */
;;;310      assert_param(IS_SDIO_IT(SDIO_IT));
;;;311      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;312      
;;;313      if (NewState != DISABLE)
000078  2900              CMP      r1,#0
;;;314      {
;;;315        /* Enable the SDIO interrupts */
;;;316        SDIO->MASK |= SDIO_IT;
;;;317      }
;;;318      else
;;;319      {
;;;320        /* Disable the SDIO interrupts */
;;;321        SDIO->MASK &= ~SDIO_IT;
00007a  6bd1              LDR      r1,[r2,#0x3c]
00007c  d001              BEQ      |L1.130|
00007e  4301              ORRS     r1,r1,r0              ;316
000080  e000              B        |L1.132|
                  |L1.130|
000082  4381              BICS     r1,r1,r0
                  |L1.132|
000084  63d1              STR      r1,[r2,#0x3c]         ;316
;;;322      } 
;;;323    }
000086  4770              BX       lr
;;;324    
                          ENDP

                  SDIO_DMACmd PROC
;;;330      */
;;;331    void SDIO_DMACmd(FunctionalState NewState)
000088  4947              LDR      r1,|L1.424|
;;;332    {
;;;333      /* Check the parameters */
;;;334      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;335      
;;;336      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
00008a  6008              STR      r0,[r1,#0]
;;;337    }
00008c  4770              BX       lr
;;;338    
                          ENDP

                  SDIO_SendCommand PROC
;;;345      */
;;;346    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
00008e  b510              PUSH     {r4,lr}
;;;347    {
;;;348      uint32_t tmpreg = 0;
;;;349      
;;;350      /* Check the parameters */
;;;351      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;352      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;353      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;354      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;355      
;;;356    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;357      /* Set the SDIO Argument value */
;;;358      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
000090  4942              LDR      r1,|L1.412|
000092  6802              LDR      r2,[r0,#0]
000094  608a              STR      r2,[r1,#8]
;;;359      
;;;360    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;361      /* Get the SDIO CMD value */
;;;362      tmpreg = SDIO->CMD;
000096  68ca              LDR      r2,[r1,#0xc]
;;;363      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;364      tmpreg &= CMD_CLEAR_MASK;
000098  e9d03401          LDRD     r3,r4,[r0,#4]
;;;365      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;366      /* Set WAITRESP bits according to SDIO_Response value */
;;;367      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;368      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;369      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
00009c  4323              ORRS     r3,r3,r4
00009e  e9d04003          LDRD     r4,r0,[r0,#0xc]
0000a2  4304              ORRS     r4,r4,r0
0000a4  f36f020a          BFC      r2,#0,#11             ;364
0000a8  4323              ORRS     r3,r3,r4
0000aa  4313              ORRS     r3,r3,r2
;;;370               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;371      
;;;372      /* Write to SDIO CMD */
;;;373      SDIO->CMD = tmpreg;
0000ac  60cb              STR      r3,[r1,#0xc]
;;;374    }
0000ae  bd10              POP      {r4,pc}
;;;375    
                          ENDP

                  SDIO_CmdStructInit PROC
;;;381      */
;;;382    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
0000b0  2100              MOVS     r1,#0
;;;383    {
;;;384      /* SDIO_CmdInitStruct members default value */
;;;385      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
;;;386      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
0000b2  6001              STR      r1,[r0,#0]
;;;387      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
0000b4  6041              STR      r1,[r0,#4]
;;;388      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
0000b6  6081              STR      r1,[r0,#8]
;;;389      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
0000b8  60c1              STR      r1,[r0,#0xc]
0000ba  6101              STR      r1,[r0,#0x10]
;;;390    }
0000bc  4770              BX       lr
;;;391    
                          ENDP

                  SDIO_GetCommandResponse PROC
;;;396      */
;;;397    uint8_t SDIO_GetCommandResponse(void)
0000be  4837              LDR      r0,|L1.412|
;;;398    {
;;;399      return (uint8_t)(SDIO->RESPCMD);
0000c0  6900              LDR      r0,[r0,#0x10]
0000c2  b2c0              UXTB     r0,r0
;;;400    }
0000c4  4770              BX       lr
;;;401    
                          ENDP

                  SDIO_GetResponse PROC
;;;411      */
;;;412    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
0000c6  4935              LDR      r1,|L1.412|
;;;413    {
0000c8  b508              PUSH     {r3,lr}
;;;414      __IO uint32_t tmp = 0;
;;;415    
;;;416      /* Check the parameters */
;;;417      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;418    
;;;419      tmp = SDIO_RESP_ADDR + SDIO_RESP;
0000ca  3114              ADDS     r1,r1,#0x14
0000cc  4408              ADD      r0,r0,r1
;;;420      
;;;421      return (*(__IO uint32_t *) tmp); 
0000ce  9000              STR      r0,[sp,#0]
0000d0  6800              LDR      r0,[r0,#0]
;;;422    }
0000d2  bd08              POP      {r3,pc}
;;;423    
                          ENDP

                  SDIO_DataConfig PROC
;;;430      */
;;;431    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
0000d4  b510              PUSH     {r4,lr}
;;;432    {
;;;433      uint32_t tmpreg = 0;
;;;434      
;;;435      /* Check the parameters */
;;;436      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;437      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;438      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;439      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;440      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;441    
;;;442    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;443      /* Set the SDIO Data TimeOut value */
;;;444      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
0000d6  4931              LDR      r1,|L1.412|
0000d8  6802              LDR      r2,[r0,#0]
0000da  624a              STR      r2,[r1,#0x24]
;;;445    
;;;446    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;447      /* Set the SDIO DataLength value */
;;;448      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
0000dc  6842              LDR      r2,[r0,#4]
0000de  628a              STR      r2,[r1,#0x28]
;;;449    
;;;450    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;451      /* Get the SDIO DCTRL value */
;;;452      tmpreg = SDIO->DCTRL;
0000e0  6aca              LDR      r2,[r1,#0x2c]
;;;453      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;454      tmpreg &= DCTRL_CLEAR_MASK;
0000e2  e9d03402          LDRD     r3,r4,[r0,#8]
;;;455      /* Set DEN bit according to SDIO_DPSM value */
;;;456      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;457      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;458      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;459      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
0000e6  4323              ORRS     r3,r3,r4
0000e8  e9d04004          LDRD     r4,r0,[r0,#0x10]
0000ec  4304              ORRS     r4,r4,r0
0000ee  f02202f7          BIC      r2,r2,#0xf7           ;454
0000f2  4323              ORRS     r3,r3,r4
0000f4  4313              ORRS     r3,r3,r2
;;;460               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;461    
;;;462      /* Write to SDIO DCTRL */
;;;463      SDIO->DCTRL = tmpreg;
0000f6  62cb              STR      r3,[r1,#0x2c]
;;;464    }
0000f8  bd10              POP      {r4,pc}
;;;465    
                          ENDP

                  SDIO_DataStructInit PROC
;;;471      */
;;;472    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
0000fa  f04f31ff          MOV      r1,#0xffffffff
;;;473    {
;;;474      /* SDIO_DataInitStruct members default value */
;;;475      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
;;;476      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
0000fe  6001              STR      r1,[r0,#0]
000100  2100              MOVS     r1,#0
;;;477      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
000102  6041              STR      r1,[r0,#4]
;;;478      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
000104  6081              STR      r1,[r0,#8]
;;;479      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
000106  60c1              STR      r1,[r0,#0xc]
;;;480      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
000108  6101              STR      r1,[r0,#0x10]
00010a  6141              STR      r1,[r0,#0x14]
;;;481    }
00010c  4770              BX       lr
;;;482    
                          ENDP

                  SDIO_GetDataCounter PROC
;;;487      */
;;;488    uint32_t SDIO_GetDataCounter(void)
00010e  4823              LDR      r0,|L1.412|
;;;489    { 
;;;490      return SDIO->DCOUNT;
000110  6b00              LDR      r0,[r0,#0x30]
;;;491    }
000112  4770              BX       lr
;;;492    
                          ENDP

                  SDIO_ReadData PROC
;;;497      */
;;;498    uint32_t SDIO_ReadData(void)
000114  4821              LDR      r0,|L1.412|
;;;499    { 
;;;500      return SDIO->FIFO;
000116  f8d00080          LDR      r0,[r0,#0x80]
;;;501    }
00011a  4770              BX       lr
;;;502    
                          ENDP

                  SDIO_WriteData PROC
;;;507      */
;;;508    void SDIO_WriteData(uint32_t Data)
00011c  491f              LDR      r1,|L1.412|
;;;509    { 
;;;510      SDIO->FIFO = Data;
00011e  f8c10080          STR      r0,[r1,#0x80]
;;;511    }
000122  4770              BX       lr
;;;512    
                          ENDP

                  SDIO_GetFIFOCount PROC
;;;517      */
;;;518    uint32_t SDIO_GetFIFOCount(void)
000124  481d              LDR      r0,|L1.412|
;;;519    { 
;;;520      return SDIO->FIFOCNT;
000126  6c80              LDR      r0,[r0,#0x48]
;;;521    }
000128  4770              BX       lr
;;;522    
                          ENDP

                  SDIO_StartSDIOReadWait PROC
;;;528      */
;;;529    void SDIO_StartSDIOReadWait(FunctionalState NewState)
00012a  491f              LDR      r1,|L1.424|
;;;530    { 
;;;531      /* Check the parameters */
;;;532      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;533      
;;;534      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
00012c  3114              ADDS     r1,r1,#0x14
00012e  6008              STR      r0,[r1,#0]
;;;535    }
000130  4770              BX       lr
;;;536    
                          ENDP

                  SDIO_StopSDIOReadWait PROC
;;;542      */
;;;543    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000132  491d              LDR      r1,|L1.424|
;;;544    { 
;;;545      /* Check the parameters */
;;;546      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;547      
;;;548      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
000134  3118              ADDS     r1,r1,#0x18
000136  6008              STR      r0,[r1,#0]
;;;549    }
000138  4770              BX       lr
;;;550    
                          ENDP

                  SDIO_SetSDIOReadWaitMode PROC
;;;558      */
;;;559    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
00013a  491b              LDR      r1,|L1.424|
;;;560    {
;;;561      /* Check the parameters */
;;;562      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;563      
;;;564      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
00013c  311c              ADDS     r1,r1,#0x1c
00013e  6008              STR      r0,[r1,#0]
;;;565    }
000140  4770              BX       lr
;;;566    
                          ENDP

                  SDIO_SetSDIOOperation PROC
;;;572      */
;;;573    void SDIO_SetSDIOOperation(FunctionalState NewState)
000142  4919              LDR      r1,|L1.424|
;;;574    { 
;;;575      /* Check the parameters */
;;;576      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;577      
;;;578      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000144  3120              ADDS     r1,r1,#0x20
000146  6008              STR      r0,[r1,#0]
;;;579    }
000148  4770              BX       lr
;;;580    
                          ENDP

                  SDIO_SendSDIOSuspendCmd PROC
;;;586      */
;;;587    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
00014a  4916              LDR      r1,|L1.420|
;;;588    { 
;;;589      /* Check the parameters */
;;;590      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;591      
;;;592      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
00014c  f8c101ac          STR      r0,[r1,#0x1ac]
;;;593    }
000150  4770              BX       lr
;;;594    
                          ENDP

                  SDIO_CommandCompletionCmd PROC
;;;600      */
;;;601    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000152  4914              LDR      r1,|L1.420|
;;;602    { 
;;;603      /* Check the parameters */
;;;604      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;605      
;;;606      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
000154  f8c101b0          STR      r0,[r1,#0x1b0]
;;;607    }
000158  4770              BX       lr
;;;608    
                          ENDP

                  SDIO_CEATAITCmd PROC
;;;613      */
;;;614    void SDIO_CEATAITCmd(FunctionalState NewState)
00015a  2101              MOVS     r1,#1
;;;615    { 
;;;616      /* Check the parameters */
;;;617      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;618      
;;;619      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
00015c  4381              BICS     r1,r1,r0
00015e  4811              LDR      r0,|L1.420|
000160  f8c011b4          STR      r1,[r0,#0x1b4]
;;;620    }
000164  4770              BX       lr
;;;621    
                          ENDP

                  SDIO_SendCEATACmd PROC
;;;626      */
;;;627    void SDIO_SendCEATACmd(FunctionalState NewState)
000166  490f              LDR      r1,|L1.420|
;;;628    { 
;;;629      /* Check the parameters */
;;;630      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;631      
;;;632      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
000168  f8c101b8          STR      r0,[r1,#0x1b8]
;;;633    }
00016c  4770              BX       lr
;;;634    
                          ENDP

                  SDIO_GetFlagStatus PROC
;;;665      */
;;;666    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
00016e  4a0b              LDR      r2,|L1.412|
;;;667    { 
000170  4601              MOV      r1,r0
;;;668      FlagStatus bitstatus = RESET;
000172  2000              MOVS     r0,#0
;;;669      
;;;670      /* Check the parameters */
;;;671      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;672      
;;;673      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000174  6b52              LDR      r2,[r2,#0x34]
000176  420a              TST      r2,r1
000178  d000              BEQ      |L1.380|
;;;674      {
;;;675        bitstatus = SET;
00017a  2001              MOVS     r0,#1
                  |L1.380|
;;;676      }
;;;677      else
;;;678      {
;;;679        bitstatus = RESET;
;;;680      }
;;;681      return bitstatus;
;;;682    }
00017c  4770              BX       lr
;;;683    
                          ENDP

                  SDIO_ClearFlag PROC
;;;703      */
;;;704    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
00017e  4907              LDR      r1,|L1.412|
;;;705    { 
;;;706      /* Check the parameters */
;;;707      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;708       
;;;709      SDIO->ICR = SDIO_FLAG;
000180  6388              STR      r0,[r1,#0x38]
;;;710    }
000182  4770              BX       lr
;;;711    
                          ENDP

                  SDIO_GetITStatus PROC
;;;742      */
;;;743    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
000184  4a05              LDR      r2,|L1.412|
;;;744    { 
000186  4601              MOV      r1,r0
;;;745      ITStatus bitstatus = RESET;
000188  2000              MOVS     r0,#0
;;;746      
;;;747      /* Check the parameters */
;;;748      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;749      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
00018a  6b52              LDR      r2,[r2,#0x34]
00018c  420a              TST      r2,r1
00018e  d000              BEQ      |L1.402|
;;;750      {
;;;751        bitstatus = SET;
000190  2001              MOVS     r0,#1
                  |L1.402|
;;;752      }
;;;753      else
;;;754      {
;;;755        bitstatus = RESET;
;;;756      }
;;;757      return bitstatus;
;;;758    }
000192  4770              BX       lr
;;;759    
                          ENDP

                  SDIO_ClearITPendingBit PROC
;;;778      */
;;;779    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
000194  4901              LDR      r1,|L1.412|
;;;780    { 
;;;781      /* Check the parameters */
;;;782      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;783       
;;;784      SDIO->ICR = SDIO_IT;
000196  6388              STR      r0,[r1,#0x38]
;;;785    }
000198  4770              BX       lr
;;;786    
                          ENDP

00019a  0000              DCW      0x0000
                  |L1.412|
                          DCD      0x40018000
                  |L1.416|
                          DCD      0x00c007ff
                  |L1.420|
                          DCD      0x42300000
                  |L1.424|
                          DCD      0x4230058c
